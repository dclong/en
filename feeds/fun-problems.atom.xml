<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ben Chuanlong Du's Blog - Fun Problems</title><link href="http://www.legendu.net/en/" rel="alternate"></link><link href="http://www.legendu.net/en/feeds/fun-problems.atom.xml" rel="self"></link><id>http://www.legendu.net/en/</id><updated>2018-01-04T02:30:19-08:00</updated><subtitle>And let it direct your passion with reason.</subtitle><entry><title>How Long Does It Take to Observe a Sequence?</title><link href="http://www.legendu.net/en/blog/how-long-observe-pattern/" rel="alternate"></link><published>2018-01-04T02:30:19-08:00</published><updated>2018-01-04T02:30:19-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2018-01-04:/en/blog/how-long-observe-pattern/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/pattern/coin.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;There are many interesting while at the same time very tricky problems in
statistics. One famous question is that how many steps (expected) does
it take to observe a given sequence (e.g. THTH, TTHH), if we flip a
balanced coin?&lt;/p&gt;
&lt;p&gt;This problem can be solved using (delay) renewal theory â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/pattern/coin.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;There are many interesting while at the same time very tricky problems in
statistics. One famous question is that how many steps (expected) does
it take to observe a given sequence (e.g. THTH, TTHH), if we flip a
balanced coin?&lt;/p&gt;
&lt;p&gt;This problem can be solved using (delay) renewal theory or martingales.
These two methods are well explained in stochastic processes text books
(e.g. Stochastic Processes, S. M. Ross), so I will not explain them here. 
I implemented an algorithm base on martingales in Mathematica. 
It can deal with all this kind of problems, no matter how
long the pattern to be observed is and no matter which discrete distribution
is specified for the sample space. The following are some running results in
Mathematica.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;pat1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;pat2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;PatternExpectedTime&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pat1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sp&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;16&lt;/span&gt;
&lt;span class="n"&gt;PatternExpectedTime&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pat2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sp&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Some people might be shock by the above results, because they either think
that the result should be the same, or they think that the expected time for
patter "HTHT" to occur should be smaller. Notice that pattern "HTHT" has a
duplicated structure which is the reason make it harder to occur. To be clearer,
we know that a random sequence generated by flipping a coin n times won't have
a big chance to have either too many or too few runs. Duplicated structures
usually result in too many runs in sequence, e.g. "HTHT" has four runs which
is the biggest run we can have in a sequence of length 4, so it would take more
time on average for "HTHT" to come out.&lt;/p&gt;
&lt;p&gt;Here are &lt;a href="http://dclong.github.io/media/pattern/pattern-time-examples.pdf"&gt;more examples and results&lt;/a&gt; of the &lt;a href="http://dclong.github.io/media/pattern/pattern.cdf"&gt;code&lt;/a&gt;.
You need either Mathematica or CDF player to open the code.
For you convenience, the code is also presented below. 
Notice that the code also contains a function for calculating the probability for a 
pattern to come out before other patterns. 
For a more detail description about this interesting problem see my post 
&lt;a href="http://dclong.github.io/en/blog/best-strategy/"&gt;Which One Is the Best Strategy?&lt;/a&gt; and
&lt;a href="http://dclong.github.io/en/blog/best-strategy-2/"&gt;Which One Is the Best Strategy? (continued)&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;PatternExpectedTime&lt;/span&gt;::&lt;span class="nv"&gt;nprob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;All element of `1` are negative.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;PatternExpectedTime&lt;/span&gt;::&lt;span class="nv"&gt;ndist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;The sum of `1` is greater than 1.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;PatternExpectedTime&lt;/span&gt;::&lt;span class="nv"&gt;sp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;The sample space `1` has duplicated element(s).&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;PatternExpectedTime&lt;/span&gt;::&lt;span class="nv"&gt;nmatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;The length of `1` does not match the length of `2`.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;PatternExpectedTime&lt;/span&gt;[&lt;span class="nv"&gt;pattern_&lt;/span&gt;, &lt;span class="nv"&gt;samspace_&lt;/span&gt;, &lt;span class="nv"&gt;prob_&lt;/span&gt;: &lt;span class="nv"&gt;Null&lt;/span&gt;, &lt;span class="nv"&gt;padj_&lt;/span&gt;: &lt;span class="nv"&gt;True&lt;/span&gt;] :&lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;algorithm&lt;/span&gt; &lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;based&lt;/span&gt; &lt;span class="nv"&gt;on&lt;/span&gt; &lt;span class="nv"&gt;martingales&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;pattern&lt;/span&gt;: &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;list&lt;/span&gt; &lt;span class="nv"&gt;defining&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;pattern&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;be&lt;/span&gt; &lt;span class="nv"&gt;observed&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;samspace&lt;/span&gt;: &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;list&lt;/span&gt; &lt;span class="nv"&gt;defining&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;sample&lt;/span&gt; &lt;span class="nv"&gt;space&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;prob&lt;/span&gt;: &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;list&lt;/span&gt; &lt;span class="nv"&gt;defining&lt;/span&gt; &lt;span class="nv"&gt;probabilites&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;padj&lt;/span&gt;: &lt;span class="nv"&gt;logical&lt;/span&gt;, &lt;span class="nv"&gt;whether&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;auto&lt;/span&gt; &lt;span class="nv"&gt;adjust&lt;/span&gt; &lt;span class="nv"&gt;argument&lt;/span&gt; &lt;span class="nv"&gt;prob&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;make&lt;/span&gt; &lt;span class="nv"&gt;it&lt;/span&gt; &lt;span class="nv"&gt;sum&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;Module&lt;/span&gt;[{&lt;span class="nv"&gt;nsample&lt;/span&gt;, &lt;span class="nv"&gt;npattern&lt;/span&gt;, &lt;span class="nv"&gt;i&lt;/span&gt;, &lt;span class="nv"&gt;j&lt;/span&gt;, &lt;span class="nv"&gt;ResultProb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; {}, &lt;span class="nv"&gt;temp&lt;/span&gt;, &lt;span class="nv"&gt;expect&lt;/span&gt;, &lt;span class="nv"&gt;probs&lt;/span&gt;},
    &lt;span class="nv"&gt;nsample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Length&lt;/span&gt;[&lt;span class="nv"&gt;samspace&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;Length&lt;/span&gt;[&lt;span class="nv"&gt;DeleteDuplicates&lt;/span&gt;[&lt;span class="nv"&gt;samspace&lt;/span&gt;]] &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;; nsample,&lt;/span&gt;
        &lt;span class="nv"&gt;Message&lt;/span&gt;[&lt;span class="nv"&gt;PatternExpectedTime&lt;/span&gt;::&lt;span class="nv"&gt;sp&lt;/span&gt;, &lt;span class="nv"&gt;samspace&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;Return&lt;/span&gt;[]
    ]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;prob&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nv"&gt;Null&lt;/span&gt;,
    &lt;span class="nv"&gt;probs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Table&lt;/span&gt;[&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;nsample&lt;/span&gt;, {&lt;span class="nv"&gt;nsample&lt;/span&gt;}],
    &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;Length&lt;/span&gt;[&lt;span class="nv"&gt;prob&lt;/span&gt;] &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nv"&gt;nsample&lt;/span&gt;,
        &lt;span class="nv"&gt;Message&lt;/span&gt;[&lt;span class="nv"&gt;PatternExpectedTime&lt;/span&gt;::&lt;span class="nv"&gt;nmatch&lt;/span&gt;, &lt;span class="nv"&gt;prob&lt;/span&gt;, &lt;span class="nv"&gt;samspace&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;Return&lt;/span&gt;[]
    ]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;Min&lt;/span&gt;[&lt;span class="nv"&gt;prob&lt;/span&gt;] &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;; 0,&lt;/span&gt;
    &lt;span class="nv"&gt;Message&lt;/span&gt;[&lt;span class="nv"&gt;PatternExpectedTime&lt;/span&gt;::&lt;span class="nv"&gt;nprob&lt;/span&gt;, &lt;span class="nv"&gt;prob&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;Return&lt;/span&gt;[]
    ]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;padj&lt;/span&gt;,
        &lt;span class="nv"&gt;probs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;prob&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;Total&lt;/span&gt;[&lt;span class="nv"&gt;prob&lt;/span&gt;],
        &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;Total&lt;/span&gt;[&lt;span class="nv"&gt;prob&lt;/span&gt;] &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;gt&lt;/span&gt;&lt;span class="c1"&gt;; 1,&lt;/span&gt;
          &lt;span class="nv"&gt;Message&lt;/span&gt;[&lt;span class="nv"&gt;PatternExpectedTime&lt;/span&gt;::&lt;span class="nv"&gt;ndist&lt;/span&gt;, &lt;span class="nv"&gt;prob&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
          &lt;span class="k"&gt;Return&lt;/span&gt;[],
          &lt;span class="nv"&gt;probs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;prob&lt;/span&gt;
          ]&lt;span class="c1"&gt;;&lt;/span&gt;
        ]&lt;span class="c1"&gt;;&lt;/span&gt;
    ]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;following&lt;/span&gt; &lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;core&lt;/span&gt; &lt;span class="nv"&gt;algorithm&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;npattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Length&lt;/span&gt;[&lt;span class="nv"&gt;pattern&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;For&lt;/span&gt;[&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;;= npattern, i++,&lt;/span&gt;
        &lt;span class="nv"&gt;AppendTo&lt;/span&gt;[&lt;span class="nv"&gt;ResultProb&lt;/span&gt;, 
        &lt;span class="nv"&gt;probs&lt;/span&gt;[[&lt;span class="nv"&gt;Flatten&lt;/span&gt;[&lt;span class="nv"&gt;Position&lt;/span&gt;[&lt;span class="nv"&gt;samspace&lt;/span&gt;, &lt;span class="nv"&gt;pattern&lt;/span&gt;[[&lt;span class="nv"&gt;i&lt;/span&gt;]]]][[&lt;span class="mi"&gt;1&lt;/span&gt;]]]]]&lt;span class="c1"&gt;;&lt;/span&gt;
    ]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;expect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;npattern&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;For&lt;/span&gt;[&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;;= npattern, i++,&lt;/span&gt;
        &lt;span class="nv"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;For&lt;/span&gt;[&lt;span class="nv"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;, &lt;span class="nv"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;;= npattern, j++,&lt;/span&gt;
            &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;pattern&lt;/span&gt;[[&lt;span class="nv"&gt;j&lt;/span&gt;]] &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;pattern&lt;/span&gt;[[&lt;span class="nv"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;]],
                &lt;span class="nv"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;ResultProb&lt;/span&gt;[[&lt;span class="nv"&gt;j&lt;/span&gt;]],
                &lt;span class="nv"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;Break&lt;/span&gt;[]
            ]
        ]&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;expect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;expect&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    ]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;Return&lt;/span&gt;[&lt;span class="nv"&gt;expect&lt;/span&gt;]
]

&lt;span class="nv"&gt;PatternAdditionalExpectedTime&lt;/span&gt;[&lt;span class="nv"&gt;pat_&lt;/span&gt;, &lt;span class="nv"&gt;gpat_&lt;/span&gt;, &lt;span class="nv"&gt;samspace_&lt;/span&gt;, &lt;span class="nv"&gt;prob_&lt;/span&gt;: &lt;span class="nv"&gt;Null&lt;/span&gt;, &lt;span class="nv"&gt;padj_&lt;/span&gt;: &lt;span class="nv"&gt;True&lt;/span&gt;] :&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;calculate&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;expected&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;pat&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;occur&lt;/span&gt; \
&lt;span class="nv"&gt;given&lt;/span&gt; &lt;span class="nv"&gt;that&lt;/span&gt; &lt;span class="nv"&gt;gpat&lt;/span&gt; &lt;span class="nv"&gt;already&lt;/span&gt; &lt;span class="nv"&gt;occurs&lt;/span&gt;,
&lt;span class="nv"&gt;it&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;s essentially based on the function PatternExpectedTime[]*)&lt;/span&gt;
&lt;span class="nv"&gt;Module&lt;/span&gt;[{&lt;span class="nv"&gt;npat&lt;/span&gt;, &lt;span class="nv"&gt;ngpat&lt;/span&gt;, &lt;span class="nv"&gt;i&lt;/span&gt;, &lt;span class="nv"&gt;j&lt;/span&gt;, &lt;span class="nv"&gt;count&lt;/span&gt;, &lt;span class="nv"&gt;win&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; {}, &lt;span class="nv"&gt;temp&lt;/span&gt;, &lt;span class="nv"&gt;nsample&lt;/span&gt;, &lt;span class="nv"&gt;probs&lt;/span&gt;},
    &lt;span class="nv"&gt;nsample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Length&lt;/span&gt;[&lt;span class="nv"&gt;samspace&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;Length&lt;/span&gt;[&lt;span class="nv"&gt;DeleteDuplicates&lt;/span&gt;[&lt;span class="nv"&gt;samspace&lt;/span&gt;]] &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;; nsample,&lt;/span&gt;
        &lt;span class="nv"&gt;Message&lt;/span&gt;[&lt;span class="nv"&gt;PatternExpectedTime&lt;/span&gt;::&lt;span class="nv"&gt;sp&lt;/span&gt;, &lt;span class="nv"&gt;samspace&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;Return&lt;/span&gt;[]
    ]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;prob&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nv"&gt;Null&lt;/span&gt;,
        &lt;span class="nv"&gt;probs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Table&lt;/span&gt;[&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;nsample&lt;/span&gt;, {&lt;span class="nv"&gt;nsample&lt;/span&gt;}],
        &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;Length&lt;/span&gt;[&lt;span class="nv"&gt;prob&lt;/span&gt;] &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nv"&gt;nsample&lt;/span&gt;,
            &lt;span class="nv"&gt;Message&lt;/span&gt;[&lt;span class="nv"&gt;PatternExpectedTime&lt;/span&gt;::&lt;span class="nv"&gt;nmatch&lt;/span&gt;, &lt;span class="nv"&gt;prob&lt;/span&gt;, &lt;span class="nv"&gt;samspace&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;Return&lt;/span&gt;[]
        ]&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;Min&lt;/span&gt;[&lt;span class="nv"&gt;prob&lt;/span&gt;] &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;; 0,&lt;/span&gt;
            &lt;span class="nv"&gt;Message&lt;/span&gt;[&lt;span class="nv"&gt;PatternExpectedTime&lt;/span&gt;::&lt;span class="nv"&gt;nprob&lt;/span&gt;, &lt;span class="nv"&gt;prob&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;Return&lt;/span&gt;[]
        ]&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;padj&lt;/span&gt;,
            &lt;span class="nv"&gt;probs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;prob&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;Total&lt;/span&gt;[&lt;span class="nv"&gt;prob&lt;/span&gt;],
            &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;Total&lt;/span&gt;[&lt;span class="nv"&gt;prob&lt;/span&gt;] &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;gt&lt;/span&gt;&lt;span class="c1"&gt;; 1,&lt;/span&gt;
                &lt;span class="nv"&gt;Message&lt;/span&gt;[&lt;span class="nv"&gt;PatternExpectedTime&lt;/span&gt;::&lt;span class="nv"&gt;ndist&lt;/span&gt;, &lt;span class="nv"&gt;prob&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;Return&lt;/span&gt;[],
                &lt;span class="nv"&gt;probs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;prob&lt;/span&gt;
            ]&lt;span class="c1"&gt;;&lt;/span&gt;
        ]&lt;span class="c1"&gt;;&lt;/span&gt;
    ]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;npat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Length&lt;/span&gt;[&lt;span class="nv"&gt;pat&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;ngpat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Length&lt;/span&gt;[&lt;span class="nv"&gt;gpat&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;ngpat&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;npat&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;gt&lt;/span&gt;&lt;span class="c1"&gt;;= 1,&lt;/span&gt;
        &lt;span class="nv"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;For&lt;/span&gt;[&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;;= npat, i++,&lt;/span&gt;
            &lt;span class="nv"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="nv"&gt;probs&lt;/span&gt;[[&lt;span class="nv"&gt;Flatten&lt;/span&gt;[&lt;span class="nv"&gt;Position&lt;/span&gt;[&lt;span class="nv"&gt;samspace&lt;/span&gt;, &lt;span class="nv"&gt;pat&lt;/span&gt;[[&lt;span class="nv"&gt;i&lt;/span&gt;]]]][[&lt;span class="mi"&gt;1&lt;/span&gt;]]]]
        ]&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;For&lt;/span&gt;[&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;;= count, i++,&lt;/span&gt;
            &lt;span class="k"&gt;For&lt;/span&gt;[&lt;span class="nv"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;;= npat, j++,&lt;/span&gt;
                &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;gpat&lt;/span&gt;[[&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;]] &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nv"&gt;pat&lt;/span&gt;[[&lt;span class="nv"&gt;j&lt;/span&gt;]],
                    &lt;span class="nv"&gt;AppendTo&lt;/span&gt;[&lt;span class="nv"&gt;win&lt;/span&gt;, &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
                    &lt;span class="nv"&gt;Goto&lt;/span&gt;[&lt;span class="k"&gt;next&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
                ]&lt;span class="c1"&gt;;&lt;/span&gt;
            ]&lt;span class="c1"&gt;;&lt;/span&gt;
            &lt;span class="nv"&gt;AppendTo&lt;/span&gt;[&lt;span class="nv"&gt;win&lt;/span&gt;, &lt;span class="nv"&gt;temp&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
            &lt;span class="nv"&gt;Label&lt;/span&gt;[&lt;span class="k"&gt;next&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
        ]&lt;span class="c1"&gt;;&lt;/span&gt;
    ]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Max&lt;/span&gt;[&lt;span class="mi"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;For&lt;/span&gt;[&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;, &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;;= ngpat, i++,&lt;/span&gt;
        &lt;span class="nv"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;For&lt;/span&gt;[&lt;span class="nv"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;, &lt;span class="nv"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;;= ngpat, j++,&lt;/span&gt;
            &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;gpat&lt;/span&gt;[[&lt;span class="nv"&gt;j&lt;/span&gt;]] &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;pat&lt;/span&gt;[[&lt;span class="nv"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;]],
                &lt;span class="nv"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; 
                &lt;span class="nv"&gt;probs&lt;/span&gt;[[&lt;span class="nv"&gt;Flatten&lt;/span&gt;[&lt;span class="nv"&gt;Position&lt;/span&gt;[&lt;span class="nv"&gt;samspace&lt;/span&gt;, &lt;span class="nv"&gt;pat&lt;/span&gt;[[&lt;span class="nv"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;]]]][[&lt;span class="mi"&gt;1&lt;/span&gt;]]]],
                &lt;span class="nv"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;Break&lt;/span&gt;[]&lt;span class="c1"&gt;;&lt;/span&gt;
            ]&lt;span class="c1"&gt;;&lt;/span&gt;
        ]&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;AppendTo&lt;/span&gt;[&lt;span class="nv"&gt;win&lt;/span&gt;, &lt;span class="nv"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
    ]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;win&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Total&lt;/span&gt;[&lt;span class="nv"&gt;win&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;PatternExpectedTime&lt;/span&gt;[&lt;span class="nv"&gt;pat&lt;/span&gt;, &lt;span class="nv"&gt;samspace&lt;/span&gt;, &lt;span class="nv"&gt;probs&lt;/span&gt;, &lt;span class="nv"&gt;padj&lt;/span&gt;] &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;win&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;ngpat&lt;/span&gt;
]

&lt;span class="nv"&gt;PatternFirstComeOutProbability&lt;/span&gt;::&lt;span class="nv"&gt;patnum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Argument `1` requires 2 or more elements.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;PatternFirstComeOutProbability&lt;/span&gt;[&lt;span class="nv"&gt;patterns_&lt;/span&gt;, &lt;span class="nv"&gt;samspace_&lt;/span&gt;, &lt;span class="nv"&gt;prob_&lt;/span&gt;: &lt;span class="nv"&gt;Null&lt;/span&gt;, &lt;span class="nv"&gt;padj_&lt;/span&gt;: &lt;span class="nv"&gt;True&lt;/span&gt;] :&lt;span class="o"&gt;=&lt;/span&gt; 
&lt;span class="nv"&gt;Module&lt;/span&gt;[{&lt;span class="nv"&gt;npat&lt;/span&gt;, &lt;span class="nv"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; {}, &lt;span class="nv"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; {}, &lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; {}, &lt;span class="nv"&gt;i&lt;/span&gt;, &lt;span class="nv"&gt;j&lt;/span&gt;, &lt;span class="nv"&gt;nsample&lt;/span&gt;, &lt;span class="nv"&gt;probs&lt;/span&gt;},
    &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;patterns&lt;/span&gt; &lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;list&lt;/span&gt; &lt;span class="nv"&gt;which&lt;/span&gt; &lt;span class="nv"&gt;contains&lt;/span&gt; &lt;span class="nv"&gt;patterns&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;be&lt;/span&gt; &lt;span class="nv"&gt;compared&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;dist&lt;/span&gt; &lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;list&lt;/span&gt; &lt;span class="nv"&gt;which&lt;/span&gt; &lt;span class="nv"&gt;specifies&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;discrete&lt;/span&gt; &lt;span class="nv"&gt;distribution&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;npat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Length&lt;/span&gt;[&lt;span class="nv"&gt;patterns&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;npat&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;; 2,&lt;/span&gt;
        &lt;span class="nv"&gt;Message&lt;/span&gt;[&lt;span class="nv"&gt;PatternFirstComeOutProbability&lt;/span&gt;::&lt;span class="nv"&gt;patnum&lt;/span&gt;, &lt;span class="nv"&gt;patterns&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;Return&lt;/span&gt;[]
    ]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;nsample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Length&lt;/span&gt;[&lt;span class="nv"&gt;samspace&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;Length&lt;/span&gt;[&lt;span class="nv"&gt;DeleteDuplicates&lt;/span&gt;[&lt;span class="nv"&gt;samspace&lt;/span&gt;]] &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;; nsample,&lt;/span&gt;
        &lt;span class="nv"&gt;Message&lt;/span&gt;[&lt;span class="nv"&gt;PatternExpectedTime&lt;/span&gt;::&lt;span class="nv"&gt;sp&lt;/span&gt;, &lt;span class="nv"&gt;samspace&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;Return&lt;/span&gt;[]
    ]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;prob&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nv"&gt;Null&lt;/span&gt;,
        &lt;span class="nv"&gt;probs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Table&lt;/span&gt;[&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;nsample&lt;/span&gt;, {&lt;span class="nv"&gt;nsample&lt;/span&gt;}],
        &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;Length&lt;/span&gt;[&lt;span class="nv"&gt;prob&lt;/span&gt;] &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nv"&gt;nsample&lt;/span&gt;,
            &lt;span class="nv"&gt;Message&lt;/span&gt;[&lt;span class="nv"&gt;PatternExpectedTime&lt;/span&gt;::&lt;span class="nv"&gt;nmatch&lt;/span&gt;, &lt;span class="nv"&gt;prob&lt;/span&gt;, &lt;span class="nv"&gt;samspace&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;Return&lt;/span&gt;[]
        ]&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;Min&lt;/span&gt;[&lt;span class="nv"&gt;prob&lt;/span&gt;] &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;; 0,&lt;/span&gt;
            &lt;span class="nv"&gt;Message&lt;/span&gt;[&lt;span class="nv"&gt;PatternExpectedTime&lt;/span&gt;::&lt;span class="nv"&gt;nprob&lt;/span&gt;, &lt;span class="nv"&gt;prob&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;Return&lt;/span&gt;[]
        ]&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;padj&lt;/span&gt;,
            &lt;span class="nv"&gt;probs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;prob&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;Total&lt;/span&gt;[&lt;span class="nv"&gt;prob&lt;/span&gt;],
            &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;Total&lt;/span&gt;[&lt;span class="nv"&gt;prob&lt;/span&gt;] &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;gt&lt;/span&gt;&lt;span class="c1"&gt;; 1,&lt;/span&gt;
                &lt;span class="nv"&gt;Message&lt;/span&gt;[&lt;span class="nv"&gt;PatternExpectedTime&lt;/span&gt;::&lt;span class="nv"&gt;ndist&lt;/span&gt;, &lt;span class="nv"&gt;prob&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;Return&lt;/span&gt;[],
                &lt;span class="nv"&gt;probs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;prob&lt;/span&gt;
            ]&lt;span class="c1"&gt;;&lt;/span&gt;
        ]&lt;span class="c1"&gt;;&lt;/span&gt;
    ]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Table&lt;/span&gt;[&lt;span class="mi"&gt;0&lt;/span&gt;, {&lt;span class="nv"&gt;i&lt;/span&gt;, &lt;span class="mi"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;npat&lt;/span&gt;}, {&lt;span class="nv"&gt;j&lt;/span&gt;, &lt;span class="mi"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;npat&lt;/span&gt;}]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;For&lt;/span&gt;[&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;;= npat, i++,&lt;/span&gt;
        &lt;span class="k"&gt;For&lt;/span&gt;[&lt;span class="nv"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;;= npat, j++,&lt;/span&gt;
            &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;j&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;, &lt;span class="k"&gt;Continue&lt;/span&gt;[]]&lt;span class="c1"&gt;;&lt;/span&gt;
                &lt;span class="nv"&gt;A&lt;/span&gt;[[&lt;span class="nv"&gt;i&lt;/span&gt;, &lt;span class="nv"&gt;j&lt;/span&gt;]] &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;PatternAdditionalExpectedTime&lt;/span&gt;[&lt;span class="nv"&gt;patterns&lt;/span&gt;[[&lt;span class="nv"&gt;i&lt;/span&gt;]], &lt;span class="nv"&gt;patterns&lt;/span&gt;[[&lt;span class="nv"&gt;j&lt;/span&gt;]], &lt;span class="nv"&gt;samspace&lt;/span&gt;, &lt;span class="nv"&gt;probs&lt;/span&gt;, &lt;span class="nv"&gt;padj&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
            ]&lt;span class="c1"&gt;;&lt;/span&gt;
        ]&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Join&lt;/span&gt;[&lt;span class="nv"&gt;Table&lt;/span&gt;[&lt;span class="mi"&gt;1&lt;/span&gt;, {&lt;span class="nv"&gt;i&lt;/span&gt;, &lt;span class="nv"&gt;npat&lt;/span&gt;}, {&lt;span class="nv"&gt;j&lt;/span&gt;, &lt;span class="mi"&gt;1&lt;/span&gt;}], &lt;span class="nv"&gt;A&lt;/span&gt;, &lt;span class="mi"&gt;2&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Table&lt;/span&gt;[&lt;span class="mi"&gt;1&lt;/span&gt;, {&lt;span class="nv"&gt;i&lt;/span&gt;, &lt;span class="nv"&gt;npat&lt;/span&gt;}]&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;PrependTo&lt;/span&gt;[&lt;span class="nv"&gt;row&lt;/span&gt;, &lt;span class="mi"&gt;0&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;AppendTo&lt;/span&gt;[&lt;span class="nv"&gt;A&lt;/span&gt;, &lt;span class="nv"&gt;row&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;For&lt;/span&gt;[&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;;= npat, i++,&lt;/span&gt;
            &lt;span class="nv"&gt;AppendTo&lt;/span&gt;[&lt;span class="nv"&gt;b&lt;/span&gt;, 
            &lt;span class="nv"&gt;PatternExpectedTime&lt;/span&gt;[&lt;span class="nv"&gt;patterns&lt;/span&gt;[[&lt;span class="nv"&gt;i&lt;/span&gt;]], &lt;span class="nv"&gt;samspace&lt;/span&gt;, &lt;span class="nv"&gt;probs&lt;/span&gt;, &lt;span class="nv"&gt;padj&lt;/span&gt;]
        ]
    ]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;AppendTo&lt;/span&gt;[&lt;span class="nv"&gt;b&lt;/span&gt;, &lt;span class="mi"&gt;1&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;Return&lt;/span&gt;[&lt;span class="nv"&gt;LinearSolve&lt;/span&gt;[&lt;span class="nv"&gt;A&lt;/span&gt;, &lt;span class="nv"&gt;b&lt;/span&gt;]]&lt;span class="c1"&gt;;&lt;/span&gt;
]
&lt;/pre&gt;&lt;/div&gt;</content><category term="Mathematica"></category><category term="pattern"></category><category term="Markov chain"></category><category term="statistics"></category><category term="sequence"></category><category term="coin"></category><category term="stochastic"></category><category term="martingale"></category><category term="fun problems"></category></entry><entry><title>First 10-digit Prime in Consecutive Digits of Euler Constant?</title><link href="http://www.legendu.net/en/blog/first-prime/" rel="alternate"></link><published>2016-07-13T00:12:11-07:00</published><updated>2016-07-13T00:12:11-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2016-07-13:/en/blog/first-prime/</id><summary type="html">&lt;p&gt;One day my friend Ru He asked me a question.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What is the first 10-digit prime found in consecutive digits of e? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is an easy problem with the help of Mathematica.
The following is the Mathematica code I wrote to solve this question. 
It actually solves the general problem â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;One day my friend Ru He asked me a question.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What is the first 10-digit prime found in consecutive digits of e? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is an easy problem with the help of Mathematica.
The following is the Mathematica code I wrote to solve this question. 
It actually solves the general problem of first n-digit prime in consecutive digits of e.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;(*&lt;/span&gt;
&lt;span class="c"&gt;@param k: number of digits of the prime to be found in e*)&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;param&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt;
&lt;span class="o"&gt;*)&lt;/span&gt;
&lt;span class="n"&gt;PrimeInE&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k_&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="kn"&gt;Module&lt;/span&gt;&lt;span class="o"&gt;[{&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;For&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++,&lt;/span&gt;
    &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;^(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Floor&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
    &lt;span class="n"&gt;If&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PrimeQ&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="n"&gt;Return&lt;/span&gt;&lt;span class="bp"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Floor&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]];&lt;/span&gt;
    &lt;span class="kn"&gt;Print&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Please choose a bigger value for argument \&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; in order to find the first &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-digit prime in e.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;PrimeInE&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;7427466391&lt;/span&gt;

&lt;span class="n"&gt;PrimeInE&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;182845904523536028747135266249&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Mathematica"></category><category term="Google"></category><category term="Euler constant"></category><category term="interview"></category><category term="math"></category><category term="fun problems"></category></entry><entry><title>Probability to Lose All Money</title><link href="http://www.legendu.net/en/blog/probability-lose-all-money/" rel="alternate"></link><published>2015-11-22T03:56:28-08:00</published><updated>2015-11-22T03:56:28-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-11-22:/en/blog/probability-lose-all-money/</id><summary type="html">&lt;p&gt;&lt;img src="http://www.legendu.net/media/object/money-1.jpeg"
width="240" height="200" align="right" /&gt;&lt;/p&gt;
&lt;p&gt;A few days ago I found someone asking an interview questions on &lt;a href="http://www.mitbbs.com/"&gt;mitbbs&lt;/a&gt;.
The question is as follows. 
A gambler plays a fair game and bet 1 dollar each time. 
If he lose all his money, 
the game stops. 
Suppose he has 10 dollars and is only allowed to play â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://www.legendu.net/media/object/money-1.jpeg"
width="240" height="200" align="right" /&gt;&lt;/p&gt;
&lt;p&gt;A few days ago I found someone asking an interview questions on &lt;a href="http://www.mitbbs.com/"&gt;mitbbs&lt;/a&gt;.
The question is as follows. 
A gambler plays a fair game and bet 1 dollar each time. 
If he lose all his money, 
the game stops. 
Suppose he has 10 dollars and is only allowed to play 50 rounds at most, 
what is the probability that he lose all his money?&lt;/p&gt;
&lt;p&gt;This is a problem of random work. 
I am pretty sure that there are very neat solutions to 
this problem using &lt;em&gt;reflection&lt;/em&gt;. 
However, 
as I mentioned in my book &lt;em&gt;Statistics Thinkings&lt;/em&gt;, 
there is a universal way to solve this kind of problems. 
The key is to find a recursive forumula using conditional expectation/probability. 
First, 
we can generalize the problem to the following one. 
A gamber palys a fair game and bet 1 dollar each time. 
If he lose all his money, 
the game stops. 
Suppoe he has &lt;span class="math"&gt;\(m_0\)&lt;/span&gt; dollars and is only allowed to play &lt;span class="math"&gt;\(k\)&lt;/span&gt; rounds at most,
what is the probability that he end up with &lt;span class="math"&gt;\(m\)&lt;/span&gt; dollars?&lt;/p&gt;
&lt;p&gt;Let's use &lt;span class="math"&gt;\(P_{n,m}\)&lt;/span&gt; to stand the probability 
that the player end up with &lt;span class="math"&gt;\(m\)&lt;/span&gt; dollars after &lt;span class="math"&gt;\(n\)&lt;/span&gt; steps. 
Conditioning on step &lt;span class="math"&gt;\(n-1\)&lt;/span&gt;, 
we have
&lt;/p&gt;
&lt;div class="math"&gt;$$
P_{n,m} = 0.5 P_{n-1,m+1} + 0.5 P_{n-1,m-1} I(m&amp;gt;1)
$$&lt;/div&gt;
&lt;p&gt;
with initial condition 
&lt;/p&gt;
&lt;div class="math"&gt;$$
P_{0,m} = I(m=m_0),
$$&lt;/div&gt;
&lt;p&gt;
where &lt;span class="math"&gt;\(I\)&lt;/span&gt; is the indicator function. 
As I mentioned in my book &lt;em&gt;Statistics Thinkings&lt;/em&gt; and other similar posts on my blog,
there are several ways (e.g., moment generating function) to solve for &lt;span class="math"&gt;\(P_{n,m}\)&lt;/span&gt;. 
A pratical way is write a program to do this. &lt;/p&gt;
&lt;p&gt;I recently learned C++11, so I wrote a program in C++11 to solve this problem just for practice. 
The core code is just a recursive function. 
Though recursive algorithms are convenient, they are usually not efficient. 
A simple way to improve the speed of recursive algorithm is to use cache. 
In my code, I used a ordered map to store previous calculated probabilities 
to avoid duplicated computations. Since the code uses the standard library of C++11, 
it has to be compiled with option &lt;code&gt;-std=c++0x&lt;/code&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;map&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;init_money&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;final_money&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;init_money&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;final_money&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;hit_probability&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;init_money&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;final_money&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;hp_table&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;hp_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;init_money&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;final_money&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hp_table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hp_key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="n"&gt;hp_table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;final_money&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;init_money&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="n"&gt;hp_table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;hp_key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;hp_table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;hp_key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;hit_probability&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;init_money&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;final_money&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;final_money&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;hit_probability&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;init_money&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;final_money&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;hp_table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;hp_key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;lose_probability&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;init_money&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;hit_probability&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;init_money&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;init_money&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Please type in the initial amount of money:&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cin&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;init_money&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Please type in the stop step:&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cin&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lose_probability&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;init_money&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;The probablity to lose all money is: &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="cache"></category><category term="C++"></category><category term="simulation"></category><category term="statistics"></category><category term="map"></category><category term="probability"></category><category term="recursive"></category><category term="condition"></category><category term="fun problems"></category><category term="hash table"></category><category term="money"></category><category term="lose"></category></entry><entry><title>The Power of Generating Functions</title><link href="http://www.legendu.net/en/blog/generating-functions/" rel="alternate"></link><published>2015-11-22T02:20:55-08:00</published><updated>2015-11-22T02:20:55-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-11-22:/en/blog/generating-functions/</id><summary type="html">&lt;p&gt;Generating functions is a very powerful way to find closed 
formula for sequences defined iteratively.
I was so bored during the final week, 
so I went on internet for fun. 
Finally I found someone from Sydney University was asking for help on this question:&lt;/p&gt;
&lt;p&gt;(a) If Ln=Ln-1+Ln-2 for â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Generating functions is a very powerful way to find closed 
formula for sequences defined iteratively.
I was so bored during the final week, 
so I went on internet for fun. 
Finally I found someone from Sydney University was asking for help on this question:&lt;/p&gt;
&lt;p&gt;(a) If Ln=Ln-1+Ln-2 for n&amp;gt;1 and Lo=2 and L1=1, please Find a closed formula for Ln.&lt;/p&gt;
&lt;p&gt;(b) Sn=Ln+ Ln-1 + â€¦ + Lo, please find an closed formula for Sn.&lt;/p&gt;
&lt;p&gt;(c) An=Ln-1So + Ln-2S1 + â€¦ + LoSn-1, please find a closed formula for An.&lt;/p&gt;
&lt;p&gt;I gave a solution using generating functions. See &lt;a href="http://www.legendu.net/media/sequence.pdf"&gt;sequence&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you're from math department, 
you might question that do these series defined converge, 
if so what are the domains of convergence? 
Dating back to some day when I was still a sophomore, 
I read a book about generating functions 
and talked with my friend Hao Ying about how powerful it is. 
I cited the author's words:" We don't even have to check the domain of convergence of the seriesâ€¦". 
Hao bugged up and said:" What? You don't need to check the domain of converge? 
It's not important what others said. 
What really matters is what you think. 
Do you really think that's valid?â€¦". 
Well, I still have to say that really we don't need check the converge domain of the series we used. 
It's trifle and might too be hard. 
As is known too all, 
it's easy to use mathematical induction method to prove or disprove 
a closed formula for a sequence define iteratively. 
If the formula can be proved, 
the generating method works, vise versa. 
So far I haven't come across a situation 
that generating functions method fails to work.&lt;/p&gt;</content><category term="series"></category><category term="statistics"></category><category term="sequence"></category><category term="math"></category><category term="fun problems"></category><category term="generating function"></category></entry><entry><title>Which One Is the Best Strategy?</title><link href="http://www.legendu.net/en/blog/best-strategy/" rel="alternate"></link><published>2015-02-20T10:54:32-08:00</published><updated>2015-02-20T10:54:32-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-02-20:/en/blog/best-strategy/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/pattern/coin.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;Another interesting problem I met in statistic is: 
suppose we flip a coin which has probability 0.7 to be head again and again 
and two people choose two different sequences of length 3 (e.g. THH). 
The people whose sequence appears first wins. 
If you're allowed to choose first â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/pattern/coin.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;Another interesting problem I met in statistic is: 
suppose we flip a coin which has probability 0.7 to be head again and again 
and two people choose two different sequences of length 3 (e.g. THH). 
The people whose sequence appears first wins. 
If you're allowed to choose first, which sequence will you choose?&lt;/p&gt;
&lt;p&gt;I guess most people will choose sequence HHH. 
However, this sequence is beaten by THH. 
Suppose we first observe sequence HHH at step &lt;span class="math"&gt;\(n(&amp;gt;3)\)&lt;/span&gt;, 
then the outcome must be T at step &lt;span class="math"&gt;\(n-3\)&lt;/span&gt;, 
which means that we have observed THH at step &lt;span class="math"&gt;\(n-1\)&lt;/span&gt;. 
So for HHH to win against THH, 
it must appear at step 3. 
So the probability for HHH to beat THH is 0.7^3=0.343&amp;lt;0.5, 
i.e., HHH is not as good as THH.&lt;/p&gt;
&lt;p&gt;A nature question is that does there exist a best choice in this problem? 
The answer is no. 
I have done simulations in MATLAB to find the probability for a sequence to beat another. 
The simulation result shows that none of the 8 sequence can beat all other choices, 
which means that there is no benefit to choose a sequence first.&lt;/p&gt;
&lt;p&gt;Talking about the probability for one sequence to come out first against another one, 
there is a much better solution rather than simulation. 
I will make post about this good solution later.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="pattern"></category><category term="Markov chain"></category><category term="statistics"></category><category term="sequence"></category><category term="coin"></category><category term="stochastic"></category><category term="martingale"></category><category term="fun problems"></category><category term="MATLAB"></category><category term="best strategy"></category></entry><entry><title>The Sum and Product Puzzle</title><link href="http://www.legendu.net/en/blog/the-sum-and-product-puzzle/" rel="alternate"></link><published>2015-02-04T23:47:19-08:00</published><updated>2015-02-04T23:47:19-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-02-04:/en/blog/the-sum-and-product-puzzle/</id><summary type="html">&lt;p&gt;I talked about an interesting problem &lt;a href="http://www.legendu.net/en/blog/sun-bin-pang-juan/"&gt;in this post&lt;/a&gt;.
I had onsite-inteviews from Wolfram at the end of April this year,
and I decided to talk how to solve the problem using Mathematica.
I did some research and realized that the problem is a well-known one
which is called the â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I talked about an interesting problem &lt;a href="http://www.legendu.net/en/blog/sun-bin-pang-juan/"&gt;in this post&lt;/a&gt;.
I had onsite-inteviews from Wolfram at the end of April this year,
and I decided to talk how to solve the problem using Mathematica.
I did some research and realized that the problem is a well-known one
which is called the &lt;em&gt;Sum and Product Puzzle&lt;/em&gt; (aka the &lt;em&gt;Impossible Puzzle&lt;/em&gt;). 
The &lt;em&gt;Sum and Product Puzzle&lt;/em&gt; has several different versions. 
I reframe the one mentioned in my previous post as follows.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Two numbers (not necessarily unique) between 2 and 99 are chosen. 
The sum of them is told to Sam and the product of them is told to Peter .&lt;/p&gt;
&lt;p&gt;Sam: "Now I don't know what the 2 numbers are, 
but I'm sure you don't know either."&lt;/p&gt;
&lt;p&gt;Peter: "I have to thank you for the information, 
because I did have no idea of what the 2 numbers are, 
but now I already know."&lt;/p&gt;
&lt;p&gt;Sam: "Now the same here."&lt;/p&gt;
&lt;p&gt;Question: what are the two numbers?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="notations"&gt;Notations&lt;/h2&gt;
&lt;p&gt;R: range of the 2 numbers, which is {2,3,. . . ,99} in this case&lt;/p&gt;
&lt;p&gt;x0 , y0: a (the) solution to the Puzzle&lt;/p&gt;
&lt;h2 id="mathematical-information-hidden-in-words"&gt;Mathematical Information Hidden in Words&lt;/h2&gt;
&lt;p&gt;"Now I don't know what the 2 numbers are, 
but I'm pretty sure you don't know either." &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\exists\)&lt;/span&gt; multiple pairs of &lt;span class="math"&gt;\(x, y\in R\)&lt;/span&gt; such that &lt;span class="math"&gt;\(x+y=x_0+y_0\)&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For each pair of &lt;span class="math"&gt;\(x,y\in R\)&lt;/span&gt; such that &lt;span class="math"&gt;\(x+y=x_0+y_0\)&lt;/span&gt;, 
&lt;span class="math"&gt;\(\exists\)&lt;/span&gt; multiple pairs of &lt;span class="math"&gt;\(x',y'\in R\)&lt;/span&gt; such that &lt;span class="math"&gt;\(x'\times y'=x \times y\)&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's called the above conditions set I.&lt;/p&gt;
&lt;p&gt;"I have to thank you for the information, 
because I did have no idea of what the 2 numbers are, 
but now I already know."&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\exists\)&lt;/span&gt; multiple pairs of &lt;span class="math"&gt;\(x, y\in R\)&lt;/span&gt; 
such that &lt;span class="math"&gt;\(x\times y=x_0\times y_0\)&lt;/span&gt; (already in conditions set I). &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Among all pairs &lt;span class="math"&gt;\(x,y\in R\)&lt;/span&gt; such that &lt;span class="math"&gt;\(x\times y=x_0\times y_0\)&lt;/span&gt;, 
&lt;span class="math"&gt;\(\exists\)&lt;/span&gt; an unique pair satisfying conditions set I. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's called the above conditions set II.&lt;/p&gt;
&lt;p&gt;"Now the same here"&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\exists\)&lt;/span&gt; multiple pairs of &lt;span class="math"&gt;\(x, y\in R\)&lt;/span&gt; 
such that &lt;span class="math"&gt;\(x+y=x_0+y_0\)&lt;/span&gt; (already in conditions set I). &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Among all pairs &lt;span class="math"&gt;\(x,y\in R\)&lt;/span&gt; such that &lt;span class="math"&gt;\(x+y=x_0+y_0\)&lt;/span&gt;, 
&lt;span class="math"&gt;\(\exists\)&lt;/span&gt; an unique pair satisfying conditions set II. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's called the above conditions set III.&lt;/p&gt;
&lt;h2 id="algorithm-to-solve-the-sum-and-product-puzzle"&gt;Algorithm to Solve the Sum and Product Puzzle&lt;/h2&gt;
&lt;p&gt;A/The solution (pair of &lt;span class="math"&gt;\(x_0\)&lt;/span&gt; and &lt;span class="math"&gt;\(y_0\)&lt;/span&gt;) 
must satisfies conditions set I, II and III at the same time. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Construct all possible combinations of &lt;span class="math"&gt;\(x,y\in R\)&lt;/span&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select pairs (among all possible pairs) that satisfy conditions set I, II and III at the same time. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="mathematica-code-for-the-sum-and-product-puzzle"&gt;Mathematica Code for the Sum and Product Puzzle&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;TwoAddends&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s_Integer, range_List&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Module&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;{lower, upper},&lt;/span&gt;
&lt;span class="n"&gt;   lower = range[[1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nf"&gt;upper&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;[2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;{i, s - i}, {i, Max[lower, s - upper&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;upper, s - lower, s/2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;}]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;TwoFactors&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p_Integer, range_List&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Module&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;{lower, upper, div, n},&lt;/span&gt;
&lt;span class="n"&gt;   lower = range[[1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nf"&gt;upper&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;[2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Select&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Divisors[p&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lower, p/upper&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;upper, p/lower, Sqrt[p&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;{#, p/#} &amp;amp;amp;, div&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pair_List, range_List&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Module&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;{s, candidates},&lt;/span&gt;
&lt;span class="n"&gt;   s = Total[pair&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;candidates&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TwoAddends&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s, range&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;candidates&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Apply&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;And, Length[TwoFactors[Times @@ #, range&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;candidates&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;P1&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pair_List, range_List&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Module&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;{p, candidates},&lt;/span&gt;
&lt;span class="n"&gt;   p = Times @@ pair;&lt;/span&gt;
&lt;span class="n"&gt;   candidates = TwoFactors[p, range&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;candidates&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Total&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Boole[S1[#, range&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;candidates&lt;/span&gt;&lt;span class="err"&gt;]]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pair_List, range_List&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Module&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;{s, candidates},&lt;/span&gt;
&lt;span class="n"&gt;   s = Total[pair&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;candidates&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TwoAddends&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s, range&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;candidates&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Total&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Boole[P1[#, range&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;candidates&lt;/span&gt;&lt;span class="err"&gt;]]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;SumProductPuzzle&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;range_List&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Module&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;{lower, upper, candidates},&lt;/span&gt;
&lt;span class="n"&gt;   lower = range[[1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nf"&gt;upper&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;[2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;candidates&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Flatten&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Table[{i, j}, {i, lower, upper}, {j, i, upper}&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;Select&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;candidates, S1[#, range&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;P1&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;#, range&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;#, range&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All code and results for this project are hosted on GitHub at &lt;a href="https://github.com/dclong/sum_prod"&gt;sum_prod&lt;/a&gt;.
As I will continue to study this problem, 
it is the best place to find the most updated code and results for this problem.&lt;/p&gt;
&lt;h2 id="result"&gt;Result&lt;/h2&gt;
&lt;p&gt;Run the function &lt;code&gt;SumProductPuzzle&lt;/code&gt; to find a/the solution to the puzzle.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;SumProductPuzzle[{2, 99}]&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="some-discussions-about-the-sum-and-product-puzzle"&gt;Some Discussions about the Sum and Product Puzzle&lt;/h2&gt;
&lt;p&gt;It is of great interest to find all ranges of the form &lt;span class="math"&gt;\([2, U]\)&lt;/span&gt;
such that there is an unique solution to the puzzle in these ranges.&lt;/p&gt;
&lt;p&gt;Use the following code to do computation in parallel&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;DistributeDefinitions&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TwoAddends, TwoFactors, S1, P1, S2, SumProductPuzzle&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;rr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ParallelSubmit[{i}, SumProductPuzzle[{2, i}&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="err"&gt;}]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;WaitAll&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rr&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;The solution depends on the range (can have no, unique or multiple answers).&lt;/li&gt;
&lt;li&gt;There is no solution in [2, U] for &lt;span class="math"&gt;\(2 \le U \le 61\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;I have verified that an unique solution exists in [2, U] for &lt;span class="math"&gt;\(62 \le U \le 610\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;As the Mathematica code I wrote is more for illustrating my ideas 
and runs slowly.
I will reimplement the algorithm with previous calculated results cached in Java
to further study this problem.&lt;/li&gt;
&lt;/ol&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="puzzle"></category><category term="Mathematica"></category><category term="math"></category><category term="Work"></category><category term="fun problems"></category><category term="sum"></category><category term="product"></category></entry><entry><title>Stick Breaking Problems</title><link href="http://www.legendu.net/en/blog/stick-breaking-problems/" rel="alternate"></link><published>2014-12-16T19:47:59-08:00</published><updated>2014-12-16T19:47:59-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2014-12-16:/en/blog/stick-breaking-problems/</id><summary type="html">&lt;p&gt;The following is a popular brain teaser problem about probability.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Randomly select two points on a unit stick to break it into 3 pieces,
what is the probability that the 3 pieces can form a triangle?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The critical thing here is how are the two points selected. 
The most popular â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;The following is a popular brain teaser problem about probability.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Randomly select two points on a unit stick to break it into 3 pieces,
what is the probability that the 3 pieces can form a triangle?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The critical thing here is how are the two points selected. 
The most popular (and probably default) way is that 
&lt;span class="math"&gt;\(X_1, X_2 \overset{iid}{\sim} U(0, 1)\)&lt;/span&gt;,
where &lt;span class="math"&gt;\(X_1\)&lt;/span&gt; and &lt;span class="math"&gt;\(X_2\)&lt;/span&gt; are the distances from the two points to the left end of the stick.
There some other interesting ways of selecting the points,
and I will study the 3 cases in this post.&lt;/p&gt;
&lt;h2 id="independent-uniformly-distributed"&gt;Independent Uniformly Distributed&lt;/h2&gt;
&lt;p&gt;Let &lt;span class="math"&gt;\(X_1\)&lt;/span&gt; and &lt;span class="math"&gt;\(X_2\)&lt;/span&gt; be the distances from the two points to the left end of the stick.
In this situation we assume that 
&lt;span class="math"&gt;\(X_1, X_2 \overset{iid}{\sim} U(0, 1).\)&lt;/span&gt;&lt;/p&gt;
&lt;h3 id="method-i-exclusive-method"&gt;Method I: Exclusive Method&lt;/h3&gt;
&lt;p&gt;Let 
&lt;span class="math"&gt;\(l_1\)&lt;/span&gt;, &lt;span class="math"&gt;\(l_2\)&lt;/span&gt; and &lt;span class="math"&gt;\(l_3\)&lt;/span&gt; 
be the lengths of the 3 pieces from the left end of the stick.
To form a triangle, 
&lt;span class="math"&gt;\(l_1\)&lt;/span&gt;, &lt;span class="math"&gt;\(l_2\)&lt;/span&gt; and &lt;span class="math"&gt;\(l_3\)&lt;/span&gt; have to satisfy the following conditions.&lt;/p&gt;
&lt;div class="math"&gt;$$l_1 + l_2 &amp;gt; l_3,$$&lt;/div&gt;
&lt;div class="math"&gt;$$l_2 + l_3 &amp;gt; l_1,$$&lt;/div&gt;
&lt;div class="math"&gt;$$l_3 + l_1 &amp;gt; l_2.$$&lt;/div&gt;
&lt;p&gt;Or equivalently,
&lt;/p&gt;
&lt;div class="math"&gt;$$0 &amp;lt; l_1, l_2, l_3 &amp;lt; \frac{1}{2}.$$&lt;/div&gt;
&lt;div class="math"&gt;\begin{align}
P_{\bigtriangleup} &amp;amp;= P(0 &amp;lt; l_1, l_2, l_3 &amp;lt; \frac{1}{2}) \nonumber \newline 
                   &amp;amp;= 1 - P(l_1 \ge \frac{1}{2} | l_2 \ge \frac{1}{2} | l_3 \ge \frac{1}{2}) \nonumber \newline 
                   &amp;amp;= 1 - \left(P(l_1 \ge \frac{1}{2}) + P(l_2 \ge \frac{1}{2}) + P(l_3 \ge \frac{1}{2})\right). \nonumber \newline 
\end{align}&lt;/div&gt;
&lt;div class="math"&gt;\begin{align}
P(l_1 \ge \frac{1}{2}) &amp;amp;= P(min\\{X_1, X_2\\} \ge \frac{1}{2}) = P(X_1 \ge \frac{1}{2}, X_2 \ge \frac{1}{2}) \nonumber \newline 
                       &amp;amp;= P(X_1 \ge \frac{1}{2}) P(X_2 \ge \frac{1}{2}) \nonumber \newline 
                       &amp;amp;= \frac{1}{2} \times \frac{1}{2} = \frac{1}{4}. \nonumber
\end{align}&lt;/div&gt;
&lt;p&gt;&lt;span class="math"&gt;\(l_3\)&lt;/span&gt; is symmetric to &lt;span class="math"&gt;\(l_1\)&lt;/span&gt;, 
so 
&lt;span class="math"&gt;\(P(l_3 \ge \frac{1}{2}) = \frac{1}{4}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;It can be shown (see Method II) that &lt;span class="math"&gt;\(P(l_2 \ge \frac{1}{2}) = \frac{1}{4}\)&lt;/span&gt;,
so 
&lt;/p&gt;
&lt;div class="math"&gt;\begin{align}
P_{\bigtriangleup} &amp;amp;= 1 - \left(P(l_1 \ge \frac{1}{2}) + P(l_2 \ge \frac{1}{2}) + P(l_3 \ge \frac{1}{2})\right) \nonumber \newline 
                       &amp;amp;= 1 - \left(\frac{1}{4} + \frac{1}{4} + \frac{1}{4}\right) = \frac{1}{4} = 0.25. \nonumber
\end{align}&lt;/div&gt;
&lt;h3 id="method-ii-visualization"&gt;Method II: Visualization&lt;/h3&gt;
&lt;p&gt;&lt;div align="middle"&gt;
    &lt;figure&gt;
        &lt;img src="http://dclong.github.io/media/fun_problems/triangle/triangle.jpg" 
        alt="Probability to Form a Triangle" 
        height="400" width="400"/&gt;
        &lt;figcaption&gt;
            Figure 1: Probability to Form a Triangle.
        &lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Let &lt;span class="math"&gt;\(X_1\)&lt;/span&gt; and &lt;span class="math"&gt;\(X_2\)&lt;/span&gt; be defined as above. 
For the convenience of visualization, 
Figure 1 uses &lt;span class="math"&gt;\(X\)&lt;/span&gt; to stand for &lt;span class="math"&gt;\(X_1\)&lt;/span&gt; and &lt;span class="math"&gt;\(Y\)&lt;/span&gt; to stand for &lt;span class="math"&gt;\(X_2\)&lt;/span&gt;.
The pair &lt;span class="math"&gt;\((X, Y)\)&lt;/span&gt; is uniformly distributed 
in the unit square &lt;span class="math"&gt;\([0,1] \times [0,1]\)&lt;/span&gt;
as shown in Figure 1.
To form a triangle, 
&lt;span class="math"&gt;\(X\)&lt;/span&gt; and &lt;span class="math"&gt;\(Y\)&lt;/span&gt; need to satisfy the following conditions.
&lt;/p&gt;
&lt;div class="math"&gt;\begin{align}
              |X - Y| &amp;amp;&amp;lt; \frac{1}{2}, \newline
    (X - \frac{1}{2}) &amp;amp;  (Y - \frac{1}{2}) &amp;lt; 0
\end{align}&lt;/div&gt;
&lt;p&gt;Condition (1) requires that the middle part of the 3 pieces 
cannot be greater than &lt;span class="math"&gt;\(\frac{1}{2}\)&lt;/span&gt;.
It is equivalent to 
&lt;/p&gt;
&lt;div class="math"&gt;\begin{align}
    Y &amp;amp;&amp;gt; x - \frac{1}{2}, \newline
    Y &amp;amp;&amp;lt; x + \frac{1}{2},
\end{align}&lt;/div&gt;
&lt;p&gt;
which corresponds to the hexagon in the middle of the unit square 
(consisting of &lt;span class="math"&gt;\(B_1\)&lt;/span&gt;, &lt;span class="math"&gt;\(B_2\)&lt;/span&gt;, &lt;span class="math"&gt;\(T_1\)&lt;/span&gt; and &lt;span class="math"&gt;\(T_2\)&lt;/span&gt;).
Condition (2) requires that &lt;span class="math"&gt;\(X\)&lt;/span&gt; and &lt;span class="math"&gt;\(Y\)&lt;/span&gt; cannot be 
both smaller than &lt;span class="math"&gt;\(\frac{1}{2}\)&lt;/span&gt; 
or bother greater than &lt;span class="math"&gt;\(\frac{1}{2}\)&lt;/span&gt;,
which excludes areas &lt;span class="math"&gt;\(B_1\)&lt;/span&gt; and &lt;span class="math"&gt;\(B_2\)&lt;/span&gt;.
So when &lt;span class="math"&gt;\(X\)&lt;/span&gt; and &lt;span class="math"&gt;\(Y\)&lt;/span&gt; falls into &lt;span class="math"&gt;\(T_1\)&lt;/span&gt; or &lt;span class="math"&gt;\(T_2\)&lt;/span&gt; (grean areas),
the 3 pieces of sticks can form a triangle. 
It is easy to see that the area/probability is &lt;span class="math"&gt;\(\frac{1}{4}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Let &lt;span class="math"&gt;\(l_1\)&lt;/span&gt;, &lt;span class="math"&gt;\(l_2\)&lt;/span&gt; and &lt;span class="math"&gt;\(l_3\)&lt;/span&gt; be defined as in Method I.
&lt;span class="math"&gt;\(l_1 &amp;gt; \frac{1}{2}\)&lt;/span&gt; corresponds to the area &lt;span class="math"&gt;\(B_2\)&lt;/span&gt; 
whose area/probability is &lt;span class="math"&gt;\(\frac{1}{4}\)&lt;/span&gt;;
&lt;span class="math"&gt;\(l_2 &amp;gt; \frac{1}{2}\)&lt;/span&gt; corresponds to the areas &lt;span class="math"&gt;\(A_1\)&lt;/span&gt; and &lt;span class="math"&gt;\(A_2\)&lt;/span&gt;.
Their areas/probabilities sums to &lt;span class="math"&gt;\(\frac{1}{4}\)&lt;/span&gt;.
&lt;span class="math"&gt;\(l_3 &amp;gt; \frac{1}{2}\)&lt;/span&gt; corresponds to the area &lt;span class="math"&gt;\(B_1\)&lt;/span&gt;
whose area/probability is &lt;span class="math"&gt;\(\frac{1}{2}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The R code used to generate Figure 1 is given below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;par&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;solid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="n"&gt;plot&lt;/span&gt; &lt;span class="k"&gt;without&lt;/span&gt; &lt;span class="n"&gt;axes&lt;/span&gt;
&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xlab&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ylab&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;y&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;add&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;square&lt;/span&gt; 
&lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;add&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;axes&lt;/span&gt;
&lt;span class="k"&gt;at&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;lab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;0.5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;at&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;at&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lab&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;at&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;at&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lab&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;add&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;slope&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;abline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;green&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;abline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;green&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;add&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;vertical&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
&lt;span class="n"&gt;abline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;add&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;horizontal&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
&lt;span class="n"&gt;abline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="k"&gt;left&lt;/span&gt; &lt;span class="n"&gt;triangle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grayed&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;gray&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;bottom&lt;/span&gt; &lt;span class="k"&gt;right&lt;/span&gt; &lt;span class="n"&gt;triangle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grayed&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;gray&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;bottom&lt;/span&gt; &lt;span class="k"&gt;left&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="k"&gt;right&lt;/span&gt; &lt;span class="n"&gt;squares&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grayed&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;gray&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;add&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;inner&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt; &lt;span class="n"&gt;triangles&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;green&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="k"&gt;left&lt;/span&gt; &lt;span class="n"&gt;gray&lt;/span&gt; &lt;span class="n"&gt;triangle&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;A1&lt;/span&gt;
&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;A1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;bottom&lt;/span&gt; &lt;span class="k"&gt;right&lt;/span&gt; &lt;span class="n"&gt;gray&lt;/span&gt; &lt;span class="n"&gt;triangle&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;A2&lt;/span&gt;
&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;A2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;bottom&lt;/span&gt; &lt;span class="k"&gt;left&lt;/span&gt; &lt;span class="n"&gt;gray&lt;/span&gt; &lt;span class="n"&gt;square&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;B1&lt;/span&gt;
&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;B1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="k"&gt;right&lt;/span&gt; &lt;span class="n"&gt;gray&lt;/span&gt; &lt;span class="n"&gt;square&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;B2&lt;/span&gt;
&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;B2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;inner&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt; &lt;span class="n"&gt;triangles&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;T1&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;T2&lt;/span&gt;
&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;T1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;T2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;y = x + 0.5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;y = x - 0.5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="method-iii-order-statistics"&gt;Method III: Order Statistics&lt;/h3&gt;
&lt;p&gt;&lt;div align="middle"&gt;
    &lt;figure&gt;
        &lt;img src="http://dclong.github.io/media/fun_problems/triangle/order_stat.jpg" 
        alt="Probability to Form a Triangle" 
        height="400" width="400"/&gt;
        &lt;figcaption&gt;
            Figure 2: Probability to Form a Triangle.
        &lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;
Let &lt;span class="math"&gt;\(X_1\)&lt;/span&gt; and &lt;span class="math"&gt;\(X_2\)&lt;/span&gt; be as defined above.
Let &lt;span class="math"&gt;\(X_{(1)} = min\{X_1, X_2\}\)&lt;/span&gt; and &lt;span class="math"&gt;\(X_{(2)} = max\{X_1, X_2\}\)&lt;/span&gt;,
then 
&lt;span class="math"&gt;\(X_{(1)}\)&lt;/span&gt; and &lt;span class="math"&gt;\(X_{(2)}\)&lt;/span&gt; 
are order statistics.
From the theorem of order statistics we know that 
the join density of 
&lt;span class="math"&gt;\(X_{(1)}\)&lt;/span&gt; and &lt;span class="math"&gt;\(X_{(2)}\)&lt;/span&gt; 
is constant 2 with support &lt;span class="math"&gt;\(0 &amp;lt; X_{(1)} &amp;lt; X_{(2)} &amp;lt; 1\)&lt;/span&gt;.
To form an triangle, 
&lt;span class="math"&gt;\(X_{(1)}\)&lt;/span&gt; and &lt;span class="math"&gt;\(X_{(2)}\)&lt;/span&gt; have to satisfy the following condition.
&lt;/p&gt;
&lt;div class="math"&gt;$$
    0 &amp;lt; x_{(1)} &amp;lt; \frac{1}{2} &amp;lt; X_{(2)} &amp;lt; X_{(1)} + \frac{1}{2}.
$$&lt;/div&gt;
&lt;p&gt;
The probability for the 3 pieces of sticks to form an triangle is thus&lt;/p&gt;
&lt;div class="math"&gt;\begin{equation}
    \int_{0}^{\frac{1}{2}} \int_{\frac{1}{2}}^{x_1+\frac{1}{2}} 2\, dx_2\,dx_1  
    = \int_{0}^{\frac{1}{2}} 2x_1 dx_1 = x_1^2|_{0}^{\frac{1}{2}} = \frac{1}{4}. 
\end{equation}&lt;/div&gt;
&lt;p&gt;The support of the joint density of &lt;span class="math"&gt;\(X_{(1)}\)&lt;/span&gt; and &lt;span class="math"&gt;\(X_{(2)}\)&lt;/span&gt; 
is the big triangle in Figure 2. 
For the convenience of visualization,
Figure 2 uses &lt;span class="math"&gt;\(X\)&lt;/span&gt; to stand for &lt;span class="math"&gt;\(X_{(1)}\)&lt;/span&gt; 
and &lt;span class="math"&gt;\(Y\)&lt;/span&gt;  to stand for &lt;span class="math"&gt;\(X_{(2)}\)&lt;/span&gt;.
The integral domain of (5) is the green area T in Figure 2.&lt;/p&gt;
&lt;p&gt;The R code to generate Figure 2 is given below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;par&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;solid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xlab&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ylab&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;y&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;segments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;segments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;abline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;at&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;lab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;0.5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;at&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;at&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lab&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;at&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;at&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lab&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;middle&lt;/span&gt; &lt;span class="n"&gt;triangle&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;green&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;y = x + 0.5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;y = x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="dependent-uniformly-distributed"&gt;Dependent Uniformly Distributed&lt;/h2&gt;
&lt;p&gt;Let &lt;span class="math"&gt;\(X_1\)&lt;/span&gt; and &lt;span class="math"&gt;\(X_2\)&lt;/span&gt; be defined as above. 
In this situation we assume that 
&lt;/p&gt;
&lt;div class="math"&gt;$$X_1 \sim U(0, 1),$$&lt;/div&gt;
&lt;div class="math"&gt;$$X_2 | X_1  \sim U(X_1, 1).$$&lt;/div&gt;
&lt;div class="math"&gt;\begin{align}
P_{\bigtriangleup} &amp;amp;= \int_{0}^{\frac{1}{2}} \frac{1}{1-x_1} \int_{\frac{1}{2}}^{x_1+\frac{1}{2}} dx_2\, dx_1 \nonumber \newline  
        &amp;amp;= \int_{0}^{\frac{1}{2}} \frac{x_1}{1-x_1}dx_1 = log2 - \frac{1}{2} \approx 0.1931. \nonumber
\end{align}&lt;/div&gt;
&lt;p&gt;The Dirichlet distribution is a distribution 
that is frequently used in Bayesian non-parametric models.
It has a stick-breaking construction. 
Let &lt;span class="math"&gt;\(Y_1 = X_1\)&lt;/span&gt;, &lt;span class="math"&gt;\(Y_2 = X_2 - X_1\)&lt;/span&gt; and &lt;span class="math"&gt;\(Y_3 = 1 - X_1 - X_2\)&lt;/span&gt;.
The specification of the joint distribution of &lt;span class="math"&gt;\(Y_1\)&lt;/span&gt; and &lt;span class="math"&gt;\(Y_2\)&lt;/span&gt; 
sounds a lot like a the construction of a Dirichlet distribution,
however, it is not!
Given &lt;span class="math"&gt;\(Y_1 = X_1 \sim U(0, 1) \overset{d}{=} B(1, 1)\)&lt;/span&gt;, 
if &lt;span class="math"&gt;\(Y_2 \sim (1-Y_1)B(\alpha, \beta)\)&lt;/span&gt;,
where &lt;span class="math"&gt;\(\alpha + \beta = 1\)&lt;/span&gt;, 
then the joint distribution of &lt;span class="math"&gt;\(Y_1\)&lt;/span&gt;, &lt;span class="math"&gt;\(Y_2\)&lt;/span&gt; and &lt;span class="math"&gt;\(Y_3\)&lt;/span&gt; is Dirichlet distribution
with concentration parameters 1, &lt;span class="math"&gt;\(\alpha\)&lt;/span&gt; and &lt;span class="math"&gt;\(\beta\)&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id="dirichlet-distributed"&gt;Dirichlet Distributed&lt;/h2&gt;
&lt;p&gt;Let &lt;span class="math"&gt;\(Y_1\)&lt;/span&gt;, &lt;span class="math"&gt;\(Y_2\)&lt;/span&gt; and &lt;span class="math"&gt;\(Y_3\)&lt;/span&gt; be defined as above. 
In this situation we assume that 
&lt;/p&gt;
&lt;div class="math"&gt;$$(Y_1, Y_2, Y_3) \sim Dir(1, \frac{1}{2}, \frac{1}{2}),$$&lt;/div&gt;
&lt;p&gt;
that is 
&lt;/p&gt;
&lt;div class="math"&gt;$$X_1 \sim U(0, 1),$$&lt;/div&gt;
&lt;div class="math"&gt;$$X_2 | X_1  \sim X_1 + (1-X_1) U(\frac{1}{2}, \frac{1}{2}).$$&lt;/div&gt;
&lt;div class="math"&gt;\begin{align}
P_{\bigtriangleup} &amp;amp;= \int_{0}^{\frac{1}{2}} \int_{\frac{1}{2}-x_1}^{\frac{1}{2}} \frac{1}{\pi} x_2^{1/2}(1-x_1-x_2)^{1/2} dx_2\, dx_1 \nonumber \newline
&amp;amp;= \frac{2}{\pi} - \frac{1}{2} \approx 0.1366. \nonumber
\end{align}&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="fun problems"></category><category term="stick breaking"></category><category term="probability"></category><category term="statistics"></category><category term="triangle"></category><category term="Dirichlet distribution"></category><category term="graph"></category><category term="plot"></category><category term="visualization"></category><category term="R"></category></entry><entry><title>What are the Two Integers?</title><link href="http://www.legendu.net/en/blog/find-the-two-indivisible-numbers/" rel="alternate"></link><published>2014-09-08T11:41:48-07:00</published><updated>2014-09-08T11:41:48-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2014-09-08:/en/blog/find-the-two-indivisible-numbers/</id><summary type="html">&lt;p&gt;I met a friend majored in math on a bus home today. 
He held a piece of paper with a question 
(probably an interview question since he is trying to find a job recently).
He asked the question to me and I found it to be an interesting one. &lt;/p&gt;
&lt;p&gt;A â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I met a friend majored in math on a bus home today. 
He held a piece of paper with a question 
(probably an interview question since he is trying to find a job recently).
He asked the question to me and I found it to be an interesting one. &lt;/p&gt;
&lt;p&gt;A very large positive integer is divisible by all 
but two of the integers &lt;/p&gt;
&lt;div class="math"&gt;$$1, 2, 3, \dots, 10000,$$&lt;/div&gt;
&lt;p&gt;and the two excepted numbers are consecutive integers.
What are the two integers?&lt;/p&gt;
&lt;p&gt;I did not get the answer before my friend get off the bus. 
However, as soon as arriving home I get the key to the questions. 
The outline of my thoughts leading to the answer is as follows.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Assume the question is valid, 
i.e., there is a unique answer to this problem.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Both of the two numbers (indivisible to the large integer) 
have prime factorization of the form: &lt;span class="math"&gt;\(a^b\)&lt;/span&gt;,
where &lt;span class="math"&gt;\(b\)&lt;/span&gt; is the largest possible value. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Since one of two consecutive integers is even, 
one of the two numbers (indivisible to the large integer) has
the form &lt;span class="math"&gt;\(2^b\)&lt;/span&gt; and thus is &lt;span class="math"&gt;\(2^{13}=8192\)&lt;/span&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The other number must be either &lt;code&gt;8193&lt;/code&gt; or &lt;code&gt;8191&lt;/code&gt;. 
Since &lt;code&gt;8193&lt;/code&gt; is divisible to &lt;code&gt;3&lt;/code&gt; but not &lt;code&gt;9&lt;/code&gt; 
(&lt;code&gt;8 + 1 + 9 + 3 = 21&lt;/code&gt; is a multiple of &lt;code&gt;3&lt;/code&gt; but not &lt;code&gt;9&lt;/code&gt;), 
it does not have the form mentioned in step 2.
So the other number is &lt;code&gt;8191&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="puzzle"></category><category term="fun problems"></category><category term="number"></category></entry><entry><title>Probability to Get a Complete Deck of Cards?</title><link href="http://www.legendu.net/en/blog/chance-complete-decks-poker/" rel="alternate"></link><published>2014-08-17T17:54:37-07:00</published><updated>2014-08-17T17:54:37-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2014-08-17:/en/blog/chance-complete-decks-poker/</id><summary type="html">&lt;p&gt;&lt;img src="http://www.legendu.net/media/poker/poker.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;Suppose a poker games requires 4 decks of poker.
After the game, the cards are put back into the 4 decks randomly.
Now there is another game which requires only 1 deck of poker,
so we want to open some decks of the poker and find a complete set of â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://www.legendu.net/media/poker/poker.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;Suppose a poker games requires 4 decks of poker.
After the game, the cards are put back into the 4 decks randomly.
Now there is another game which requires only 1 deck of poker,
so we want to open some decks of the poker and find a complete set of cards.
Since people are lazy, 
we do not want to open all the 4 decks of poker.
If we open 2 decks of cards, 
what is the probability that we can get a complete set of cards?&lt;/p&gt;
&lt;p&gt;It is hard to solve this specific problem directly.
The viewpoint of treating a deck of cards as a whole is especially a barrier for solving this problem.
Here is the fancy idea.
We can generalize this problem as follows.
Suppose there are &lt;span class="math"&gt;\(N\)&lt;/span&gt; distinct cards in a deck of poker.
Now &lt;span class="math"&gt;\(M\)&lt;/span&gt; decks of pokers are mixed together and then put back.
If we draw &lt;span class="math"&gt;\(n\)&lt;/span&gt; cards randomly,
what is the probability that we get &lt;span class="math"&gt;\(m\)&lt;/span&gt; types (cards of the same color and suit are consider to be the same type) of cards?
Now to answer the question that how much chance we can get a complete set of cards if we open &lt;span class="math"&gt;\(k\)&lt;/span&gt; decks of poker,
we just need to calculate the probability of getting &lt;span class="math"&gt;\(N\)&lt;/span&gt; types of cards,
if we draw &lt;span class="math"&gt;\(kN\)&lt;/span&gt; cards randomly from these mixed cards.&lt;/p&gt;
&lt;p&gt;Let's use &lt;span class="math"&gt;\(A_{n,m}\)&lt;/span&gt; to stand for the event of getting &lt;span class="math"&gt;\(m\)&lt;/span&gt; types of cards when &lt;span class="math"&gt;\(n\)&lt;/span&gt; cards are randomly drawn,
and &lt;span class="math"&gt;\(P_{n,m}\equiv P(A_{n,m})\)&lt;/span&gt;.
Then conditioning on the number of types of cards we get in the first &lt;span class="math"&gt;\(n-1\)&lt;/span&gt; draws,
we have the following recursion formula
    &lt;/p&gt;
&lt;div class="math"&gt;$$
    P_{n,m}=P_{n-1,m}\frac{mM-n+1}{NM-n+1}+P_{n-1,m-1}\frac{(N-m+1)M}{NM-n+1}.
    $$&lt;/div&gt;
&lt;p&gt;
We can find a formula for general terms using method of generating functions.
Since there are two subscript changing at the same time,
it is much harder to solve this recursion formula.
However, 
as I mentioned before, 
we have actually solved the problem from
practical view because we have recursion formula and we know the initial values.
We can write a program to help us solve this problem.
The following is an implementation of the recursion formula in Mathematica.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;GeneralizedHyperGeometryProbability&lt;/span&gt;::&lt;span class="nv"&gt;illegal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;The number of selected exeeds the total number.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
@&lt;span class="nv"&gt;param&lt;/span&gt; &lt;span class="nv"&gt;nselected&lt;/span&gt;: &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;number&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;card&lt;/span&gt; &lt;span class="nv"&gt;selected&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
@&lt;span class="nv"&gt;param&lt;/span&gt; &lt;span class="nv"&gt;ndistinct&lt;/span&gt;: &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;number&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;distinct&lt;/span&gt; &lt;span class="nv"&gt;card&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;selected&lt;/span&gt; &lt;span class="nv"&gt;card&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
@&lt;span class="nv"&gt;param&lt;/span&gt; &lt;span class="nv"&gt;Ndistinct&lt;/span&gt;: &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;total&lt;/span&gt; &lt;span class="nv"&gt;number&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;distinct&lt;/span&gt; &lt;span class="nv"&gt;card&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
@&lt;span class="nv"&gt;param&lt;/span&gt; &lt;span class="nv"&gt;Ncopies&lt;/span&gt;: &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;copies&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;poker&lt;/span&gt;.
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;GeneralizedHyperGeometryProbability&lt;/span&gt;[&lt;span class="nv"&gt;nselected_&lt;/span&gt;, &lt;span class="nv"&gt;ndistinct_&lt;/span&gt;, &lt;span class="nv"&gt;Ndistinct_&lt;/span&gt;, &lt;span class="nv"&gt;Ncopies_&lt;/span&gt;] :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Module&lt;/span&gt;[
    {&lt;span class="nv"&gt;TotalCardsNumber&lt;/span&gt;, &lt;span class="nv"&gt;TotalChoices&lt;/span&gt;, &lt;span class="nv"&gt;i&lt;/span&gt;, &lt;span class="nv"&gt;j&lt;/span&gt;, &lt;span class="nb"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; {}, &lt;span class="nv"&gt;n&lt;/span&gt;, &lt;span class="nv"&gt;nleft&lt;/span&gt;},
    &lt;span class="nv"&gt;TotalCardsNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Ndistinct&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;Ncopies&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;TotalCardsNumber&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;; nselected, &lt;/span&gt;
        &lt;span class="nv"&gt;Message&lt;/span&gt;[&lt;span class="nv"&gt;GeneralizedHyperGeometryProbability&lt;/span&gt;::&lt;span class="nv"&gt;illegal&lt;/span&gt;]&lt;span class="c1"&gt;; &lt;/span&gt;
        &lt;span class="k"&gt;Return&lt;/span&gt;[&lt;span class="nv"&gt;False&lt;/span&gt;]
    ]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;Ndistinct&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;; ndistinct, Return[0]];&lt;/span&gt;
    &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;nselected&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;; ndistinct, Return[0]];&lt;/span&gt;
    &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;ndistinct&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;Ncopies&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;; nselected, Return[0]];&lt;/span&gt;
    &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;ndistinct&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;,
        &lt;span class="k"&gt;Return&lt;/span&gt;[&lt;span class="nv"&gt;Ndistinct&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;Binomial&lt;/span&gt;[&lt;span class="nv"&gt;Ncopies&lt;/span&gt;, &lt;span class="nv"&gt;nselected&lt;/span&gt;] &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nv"&gt;Binomial&lt;/span&gt;[&lt;span class="nv"&gt;TotalCardsNumber&lt;/span&gt;, &lt;span class="nv"&gt;nselected&lt;/span&gt;]]
    ]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;TotalChoices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Binomial&lt;/span&gt;[&lt;span class="nv"&gt;TotalCardsNumber&lt;/span&gt;, &lt;span class="nv"&gt;nselected&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;nselected&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;ndistinct&lt;/span&gt;,
        &lt;span class="k"&gt;Return&lt;/span&gt;[&lt;span class="nv"&gt;Binomial&lt;/span&gt;[&lt;span class="nv"&gt;Ndistinct&lt;/span&gt;, &lt;span class="nv"&gt;ndistinct&lt;/span&gt;]&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;Ncopies&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="nv"&gt;ndistinct&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;TotalChoices&lt;/span&gt;]
    ]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;For&lt;/span&gt;[&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;;= ndistinct, i++,&lt;/span&gt;
        &lt;span class="nv"&gt;AppendTo&lt;/span&gt;[&lt;span class="nb"&gt;result&lt;/span&gt;, 
        &lt;span class="nv"&gt;GeneralizedHyperGeometryProbability&lt;/span&gt;[&lt;span class="nv"&gt;i&lt;/span&gt;, &lt;span class="nv"&gt;i&lt;/span&gt;, &lt;span class="nv"&gt;Ndistinct&lt;/span&gt;, &lt;span class="nv"&gt;Ncopies&lt;/span&gt;]]
    ]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;For&lt;/span&gt;[&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;, &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;;= nselected - ndistinct + 1, i++,&lt;/span&gt;
        &lt;span class="nb"&gt;result&lt;/span&gt;[[&lt;span class="mi"&gt;1&lt;/span&gt;]] &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;GeneralizedHyperGeometryProbability&lt;/span&gt;[&lt;span class="nv"&gt;i&lt;/span&gt;, &lt;span class="mi"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;Ndistinct&lt;/span&gt;, &lt;span class="nv"&gt;Ncopies&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;For&lt;/span&gt;[&lt;span class="nv"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;, &lt;span class="nv"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;;= ndistinct, j++,&lt;/span&gt;
            &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
            &lt;span class="nv"&gt;nleft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;TotalCardsNumber&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
            &lt;span class="nb"&gt;result&lt;/span&gt;[[&lt;span class="nv"&gt;j&lt;/span&gt;]] &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;result&lt;/span&gt;[[&lt;span class="nv"&gt;j&lt;/span&gt;]]&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;j&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;Ncopies&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;nleft&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;result&lt;/span&gt;[[&lt;span class="nv"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;]]&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Ndistinct&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;Ncopies&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;nleft&lt;/span&gt;
        ]
    ]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;Return&lt;/span&gt;[&lt;span class="nb"&gt;result&lt;/span&gt;[[&lt;span class="nv"&gt;ndistinct&lt;/span&gt;]]]
]

&lt;span class="nv"&gt;In&lt;/span&gt;[&lt;span class="mi"&gt;5&lt;/span&gt;]:&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;N&lt;/span&gt;[&lt;span class="nv"&gt;GeneralizedHyperGeometryProbability&lt;/span&gt;[&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;, &lt;span class="mi"&gt;54&lt;/span&gt;, &lt;span class="mi"&gt;54&lt;/span&gt;, &lt;span class="mi"&gt;4&lt;/span&gt;]]
&lt;span class="nv"&gt;Out&lt;/span&gt;[&lt;span class="mi"&gt;5&lt;/span&gt;]&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;.&lt;span class="mi"&gt;19323&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;^-&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="nv"&gt;In&lt;/span&gt;[&lt;span class="mi"&gt;6&lt;/span&gt;]:&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;N&lt;/span&gt;[&lt;span class="nv"&gt;GeneralizedHyperGeometryProbability&lt;/span&gt;[&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;, &lt;span class="mi"&gt;54&lt;/span&gt;, &lt;span class="mi"&gt;54&lt;/span&gt;, &lt;span class="mi"&gt;4&lt;/span&gt;]]
&lt;span class="nv"&gt;Out&lt;/span&gt;[&lt;span class="mi"&gt;6&lt;/span&gt;]&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;.&lt;span class="mi"&gt;0190881&lt;/span&gt;
&lt;span class="nv"&gt;In&lt;/span&gt;[&lt;span class="mi"&gt;7&lt;/span&gt;]:&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;N&lt;/span&gt;[&lt;span class="nv"&gt;GeneralizedHyperGeometryProbability&lt;/span&gt;[&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;, &lt;span class="mi"&gt;54&lt;/span&gt;, &lt;span class="mi"&gt;54&lt;/span&gt;, &lt;span class="mi"&gt;4&lt;/span&gt;]]
&lt;span class="nv"&gt;Out&lt;/span&gt;[&lt;span class="mi"&gt;7&lt;/span&gt;]&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;.&lt;span class="mi"&gt;820296&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the following is another implementation of the recursion formula in R.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
#&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt; @param nselected the number of card selected;&lt;/span&gt;
#&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt; @param ndistinct the number of distinct card in the selected card;&lt;/span&gt;
#&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt; @param Ndistinct the total number of distinct card;&lt;/span&gt;
#&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt; @param Ncopies the copies of poker.&lt;/span&gt;
#&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;pghyper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;function&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;nselected&lt;/span&gt;, &lt;span class="nv"&gt;ndistinct&lt;/span&gt;, &lt;span class="nv"&gt;Ndistinct&lt;/span&gt;, &lt;span class="nv"&gt;Ncopies&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;{
    &lt;span class="nv"&gt;TotalCardsNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Ndistinct&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;Ncopies&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;TotalCardsNumber&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;; nselected)&lt;/span&gt;
        &lt;span class="nv"&gt;stop&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;the number of selected exceeds the total number.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Ndistinct&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;; ndistinct)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;nselected&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;; ndistinct)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ndistinct&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;Ncopies&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;; nselected)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;TotalChoices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;choose&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;TotalCardsNumber&lt;/span&gt;, &lt;span class="nv"&gt;nselected&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ndistinct&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Ndistinct&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;choose&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Ncopies&lt;/span&gt;, &lt;span class="nv"&gt;nselected&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nv"&gt;TotalChoices&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;nselected&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;ndistinct&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;{
        &lt;span class="nv"&gt;dchoices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;choose&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Ndistinct&lt;/span&gt;, &lt;span class="nv"&gt;ndistinct&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
        &lt;span class="nv"&gt;multiple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Ncopies&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="nv"&gt;ndistinct&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;dchoices&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;; multiple)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;multiple&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;TotalChoices&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nv"&gt;dchoices&lt;/span&gt;&lt;span class="ss"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;dchoices&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;TotalChoices&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nv"&gt;multiple&lt;/span&gt;&lt;span class="ss"&gt;))&lt;/span&gt;
    }
    &lt;span class="nb"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;NULL&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;:&lt;span class="nv"&gt;ndistinct&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;result&lt;/span&gt;, &lt;span class="nv"&gt;pghyper&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;, &lt;span class="nv"&gt;i&lt;/span&gt;, &lt;span class="nv"&gt;Ndistinct&lt;/span&gt;, &lt;span class="nv"&gt;Ncopies&lt;/span&gt;&lt;span class="ss"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;:&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;nselected&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;ndistinct&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="ss"&gt;))&lt;/span&gt;{
        &lt;span class="nb"&gt;result&lt;/span&gt;[&lt;span class="mi"&gt;1&lt;/span&gt;]&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;pghyper&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;,&lt;span class="mi"&gt;1&lt;/span&gt;,&lt;span class="nv"&gt;Ndistinct&lt;/span&gt;,&lt;span class="nv"&gt;Ncopies&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;j&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;:&lt;span class="nv"&gt;ndistinct&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;{
            &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;
            &lt;span class="nv"&gt;nleft&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;TotalCardsNumber&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="nb"&gt;result&lt;/span&gt;[&lt;span class="nv"&gt;j&lt;/span&gt;]&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;result&lt;/span&gt;[&lt;span class="nv"&gt;j&lt;/span&gt;]&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;j&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;Ncopies&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;nleft&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;result&lt;/span&gt;[&lt;span class="nv"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;]&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Ndistinct&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;Ncopies&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;nleft&lt;/span&gt;
        }
    }
    &lt;span class="nb"&gt;result&lt;/span&gt;[&lt;span class="nv"&gt;ndistinct&lt;/span&gt;]
}

&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;gt&lt;/span&gt;&lt;span class="c1"&gt;; pghyper(54*1,54,54,4)&lt;/span&gt;
[&lt;span class="mi"&gt;1&lt;/span&gt;] &lt;span class="mi"&gt;9&lt;/span&gt;.&lt;span class="mi"&gt;19323&lt;/span&gt;&lt;span class="nv"&gt;e&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;gt&lt;/span&gt;&lt;span class="c1"&gt;; pghyper(54*2,54,54,4)&lt;/span&gt;
[&lt;span class="mi"&gt;1&lt;/span&gt;] &lt;span class="mi"&gt;0&lt;/span&gt;.&lt;span class="mi"&gt;01908814&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;gt&lt;/span&gt;&lt;span class="c1"&gt;; pghyper(54*3,54,54,4)&lt;/span&gt;
[&lt;span class="mi"&gt;1&lt;/span&gt;] &lt;span class="mi"&gt;0&lt;/span&gt;.&lt;span class="mi"&gt;8202961&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From the above result,
we can see that in the original problem the probability 
is only about &lt;span class="math"&gt;\(2\%\)&lt;/span&gt; for us to get a complete set of cards
if we only open 2 decks of pokers 
while the probability is about &lt;span class="math"&gt;\(82\%\)&lt;/span&gt; if we open one more deck of poker (i.e. open 3 decks of pokers).
So for a really lazy person, it seems that to open 3 decks of poker is a good choice.
Let &lt;span class="math"&gt;\(f(k)=P_{54k,54}, k=1,\ldots, 4\)&lt;/span&gt;.
The above result also suggests us that function &lt;span class="math"&gt;\(f(k)\)&lt;/span&gt; is a very odd function.
It is small when &lt;span class="math"&gt;\(k\)&lt;/span&gt; is smaller and then suddenly increases to a (relative) very big value,
and then it increases mildly to 1.
Now suppose there are 20 decks of poker (each has 54 cards) involved,
let's see how function &lt;span class="math"&gt;\(f(k)=P_{54k,54}\)&lt;/span&gt;, &lt;span class="math"&gt;\(k=1,\ldots, 20\)&lt;/span&gt;, behaves.
The plot of the function &lt;span class="math"&gt;\(f(k)=P_{54k,54}\)&lt;/span&gt;, &lt;span class="math"&gt;\(k=1,\ldots, 20\)&lt;/span&gt;, 
is shown is in the following figure. 
We can see that for very small &lt;span class="math"&gt;\(k\)&lt;/span&gt;, &lt;span class="math"&gt;\(f(k)\)&lt;/span&gt; is very small;
then &lt;span class="math"&gt;\(f(k)\)&lt;/span&gt; increase dramatically to a (relative) very big value and then it increase mildly to 1.
For other number of decks of poker, &lt;span class="math"&gt;\(f(k)\)&lt;/span&gt; has similar properties.
So in this kind of problems, definitely we will not have a big probability to success if open 1 or 2
decks of poker. However, we do not have to open too many decks of poker, e.g., 4 or 5 decks would
yield a remarkable success probability even if many (e.g., 100) decks of pokers are involved.
&lt;img alt="Probability" src="http://www.legendu.net/media/poker/probability.png"&gt;&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="statistics"></category><category term="recursion"></category><category term="probability"></category><category term="Mathematica"></category><category term="fun problems"></category><category term="poker"></category></entry><entry><title>Chance to Take One's Own Seat?</title><link href="http://www.legendu.net/en/blog/chance-take-own-seat/" rel="alternate"></link><published>2014-08-10T13:13:46-07:00</published><updated>2014-08-10T13:13:46-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2014-08-10:/en/blog/chance-take-own-seat/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/seat/seat.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;There are &lt;span class="math"&gt;\(N\)&lt;/span&gt; seats on a plane.
Suppose the first passengers is drunk and he takes a seat randomly.
For each of the other passengers, if his/her seat is not taken by other people,
then he/she sits on his/her own seat, otherwise he/she takes a seat â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/seat/seat.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;There are &lt;span class="math"&gt;\(N\)&lt;/span&gt; seats on a plane.
Suppose the first passengers is drunk and he takes a seat randomly.
For each of the other passengers, if his/her seat is not taken by other people,
then he/she sits on his/her own seat, otherwise he/she takes a seat randomly.
What is  the probability that the last passenger takes his/her own seat?&lt;/p&gt;
&lt;p&gt;Let's use &lt;span class="math"&gt;\(P_n\)&lt;/span&gt; to stand for the probability that the last passenger takes his/her own seat,
given that there're &lt;span class="math"&gt;\(n\)&lt;/span&gt; seats in total, i.e. &lt;span class="math"&gt;\(N=n\)&lt;/span&gt;.
If the first passenger takes his own seat,
then the last passenger will take his/her own seat.
If the first passenger takes the last passenger's seat,
then the last passenger cannot take his/her own seat (we know that he/she must take the first passenger's seat).
If the first passenger takes the &lt;span class="math"&gt;\(i^{th}, 1&amp;lt;i&amp;lt;n\)&lt;/span&gt; passenger's seat,
then for the &lt;span class="math"&gt;\(j^{th}\)&lt;/span&gt; passenger, &lt;span class="math"&gt;\(1&amp;lt; j\lt i\)&lt;/span&gt;, he/she will takes his/her own seat.
Now the &lt;span class="math"&gt;\(i^{th}\)&lt;/span&gt; passenger has to choose a seat randomly.
Since we don't care about whether the &lt;span class="math"&gt;\(i^{th}\)&lt;/span&gt; passenger takes his/her own seat or not,
we can pretend that the first passenger's seat is the &lt;span class="math"&gt;\(i^{th}\)&lt;/span&gt; passengers.
From this perspective, the problem has been changed to a same problem with &lt;span class="math"&gt;\(N=n-i+1\)&lt;/span&gt;.
So conditioning on the seat that the first passenger takes,
we have the following recursive formula:&lt;/p&gt;
&lt;div class="math"&gt;$$
P_n=\frac{1}{n}\times1+\frac{1}{n}\times0+\sum_{i=2}^{n-1}\frac{1}{n}P_{n-i+1}=\frac{1}{n}\sum_{i=1}^{n-1}P_i,\ n\ge2,
$$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(P_1=1\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;We can use method of generating function to find the formula of general terms.
However, if we notice from the recursive formula that &lt;span class="math"&gt;\(P_2=\frac{1}{2}\)&lt;/span&gt;,
&lt;span class="math"&gt;\(P_3=\frac{1}{2}\)&lt;/span&gt;, &lt;span class="math"&gt;\(P_4=\frac{1}{2}\)&lt;/span&gt; and so on.
We can easily see that &lt;span class="math"&gt;\(P_i=\frac{1}{2}\)&lt;/span&gt; for &lt;span class="math"&gt;\(i\ge2\)&lt;/span&gt; is the
unique solution for the general terms.\
So as long as there're more than 1 people,
the probability that the last passenger takes his/her own seat is &lt;span class="math"&gt;\(\frac{1}{2}\)&lt;/span&gt;.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="statistics"></category><category term="recursion"></category><category term="probability"></category><category term="fun problems"></category><category term="seat"></category></entry><entry><title>Sun Bin PK Pang Juan</title><link href="http://www.legendu.net/en/blog/sun-bin-pang-juan/" rel="alternate"></link><published>2014-08-06T10:57:40-07:00</published><updated>2014-08-06T10:57:40-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2014-08-06:/en/blog/sun-bin-pang-juan/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/pk/pk.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;Dating back to the time when I was a sophomore, 
I read a very interesting problem from "Waming", 
which is a magazine of math department of USTC (University of Science and Technology of China).&lt;/p&gt;
&lt;p&gt;One day Guigu Zi (a famous ancient Chinese sophist, 
the teacher of Sun Bin and Pang â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/pk/pk.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;Dating back to the time when I was a sophomore, 
I read a very interesting problem from "Waming", 
which is a magazine of math department of USTC (University of Science and Technology of China).&lt;/p&gt;
&lt;p&gt;One day Guigu Zi (a famous ancient Chinese sophist, 
the teacher of Sun Bin and Pang Juan) came up with two numbers between 1 and 100, 
and told the product of the two numbers to Sun Bin, the sum to Pang Juan. 
The next day when Pang Juan ran into Sun Bin, he boasted, 
"Now I don't know what the 2 numbers are, 
but I'm pretty sure you don't know either." 
"I have to thank you for the information, 
because I did have no idea of what the 2 numbers are, but now I already know." 
responded Sun Bin. 
Pang Juan thought for a while, smiled and then said, 
"Now the same here." Question: what are the two numbers?&lt;/p&gt;
&lt;p&gt;If you think are a very smart people and very good at logic, you can spend some time think about this problem. 
My code (written in Mathmatica) for solving this problem is given below. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;(*function filter possible combinations based on Pang Juan&amp;#39;s first words.*)&lt;/span&gt;
&lt;span class="n"&gt;PangJuan1&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;comb_&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="kn"&gt;Module&lt;/span&gt;&lt;span class="o"&gt;[{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt;
    &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;comb&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{};&lt;/span&gt;
    &lt;span class="n"&gt;For&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++,&lt;/span&gt;
        &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]];&lt;/span&gt;
        &lt;span class="n"&gt;If&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;EvenQ&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;PrimeQ&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;Floor&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AppendTo&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;}]]&lt;/span&gt;
    &lt;span class="o"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Delete&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
&lt;span class="o"&gt;];&lt;/span&gt;
&lt;span class="c"&gt;(*function filter possible combinations based on Sun Bin&amp;#39;s words.*)&lt;/span&gt;
&lt;span class="n"&gt;SunBin&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;comb_&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; 
    &lt;span class="kn"&gt;Module&lt;/span&gt;&lt;span class="o"&gt;[{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prod&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;divisors&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DivisorCombinations&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;positions&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FlagLower&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FlagUpper&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt;
    &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;comb&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;positions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{};&lt;/span&gt;
    &lt;span class="n"&gt;For&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++,&lt;/span&gt;
        &lt;span class="n"&gt;prod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]]*&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]];&lt;/span&gt;
        &lt;span class="n"&gt;divisors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Divisors&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;prod&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="c"&gt;(*Build up all possible combinations*)&lt;/span&gt;
        &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;divisors&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;FlagLower&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Floor&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="c"&gt;(*The smallest subscript of the bigger divisors*)&lt;/span&gt;
        &lt;span class="n"&gt;DivisorCombinations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{};&lt;/span&gt;
        &lt;span class="c"&gt;(*Find the upper subscript of the bigger divisors*)&lt;/span&gt;
        &lt;span class="n"&gt;For&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;FlagUpper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FlagLower&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
            &lt;span class="n"&gt;FlagUpper&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="o"&gt;;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;divisors&lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;FlagUpper&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FlagUpper&lt;/span&gt;&lt;span class="o"&gt;++];&lt;/span&gt;
            &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
            &lt;span class="n"&gt;For&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FlagUpper&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="o"&gt;;=&lt;/span&gt; &lt;span class="n"&gt;FlagLower&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;--,&lt;/span&gt;
                &lt;span class="n"&gt;AppendTo&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;
      &lt;span class="n"&gt;DivisorCombinations&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;divisors&lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;]],&lt;/span&gt; 
       &lt;span class="n"&gt;divisors&lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;]]}]&lt;/span&gt;
     &lt;span class="o"&gt;];&lt;/span&gt;
    &lt;span class="c"&gt;(*There should be only one possible combination according the \&lt;/span&gt;
&lt;span class="c"&gt;imformation that Pang Juan provided in his first sentence*)&lt;/span&gt;
    &lt;span class="n"&gt;If&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;DivisorCombinations&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
     &lt;span class="n"&gt;AppendTo&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;positions&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;}],&lt;/span&gt;
     &lt;span class="n"&gt;If&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PangJuan1&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;DivisorCombinations&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;AppendTo&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;positions&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;}]&lt;/span&gt;
      &lt;span class="o"&gt;]&lt;/span&gt;
     &lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;];&lt;/span&gt;
   &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Delete&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;positions&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
   &lt;span class="n"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
   &lt;span class="o"&gt;];&lt;/span&gt;
&lt;span class="c"&gt;(*function filter possible combinations based on Pang Juan&amp;#39;s second words.*)&lt;/span&gt;
&lt;span class="n"&gt;PangJuan2&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;comb_&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; 
  &lt;span class="kn"&gt;Module&lt;/span&gt;&lt;span class="o"&gt;[{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AddendCombinations&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;positions&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt;
   &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;comb&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
   &lt;span class="n"&gt;positions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{};&lt;/span&gt;
   &lt;span class="n"&gt;For&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++,&lt;/span&gt;
    &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]];&lt;/span&gt;
    &lt;span class="c"&gt;(*Build up all the possible combinations*)&lt;/span&gt;

    &lt;span class="n"&gt;AddendCombinations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{};&lt;/span&gt;
    &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;For&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;;=&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++,&lt;/span&gt;
     &lt;span class="n"&gt;AppendTo&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;AddendCombinations&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;}]&lt;/span&gt;
     &lt;span class="o"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;If&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SunBin&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;AddendCombinations&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
     &lt;span class="n"&gt;AppendTo&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;positions&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;}]&lt;/span&gt;
     &lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;];&lt;/span&gt;
   &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Delete&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;positions&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
   &lt;span class="n"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
   &lt;span class="o"&gt;];&lt;/span&gt;
&lt;span class="c"&gt;(*construct all combinations and use the above three functions to \&lt;/span&gt;
&lt;span class="c"&gt;filter the right one*)&lt;/span&gt;
&lt;span class="n"&gt;GuiGuzi&lt;/span&gt;&lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="kn"&gt;Module&lt;/span&gt;&lt;span class="o"&gt;[{&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt;
   &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{};&lt;/span&gt;
   &lt;span class="n"&gt;For&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++,&lt;/span&gt;
    &lt;span class="n"&gt;For&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++,&lt;/span&gt;
      &lt;span class="n"&gt;AppendTo&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;}];&lt;/span&gt;
      &lt;span class="o"&gt;];&lt;/span&gt;
    &lt;span class="o"&gt;];&lt;/span&gt;
   &lt;span class="c"&gt;(*Use the information that Pang Juan provide in his first sentence \&lt;/span&gt;
&lt;span class="c"&gt;to delete those impossible combinations*)&lt;/span&gt;

   &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PangJuan1&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
   &lt;span class="c"&gt;(*Use the information that Sun Bin provide to delete those \&lt;/span&gt;
&lt;span class="c"&gt;impossible combinations*)&lt;/span&gt;
   &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SunBin&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
   &lt;span class="c"&gt;(*Use the information that Pang Juan provide in his second sentenc \&lt;/span&gt;
&lt;span class="c"&gt;to delete those impossible combinations*)&lt;/span&gt;

   &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PangJuan2&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
   &lt;span class="n"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
   &lt;span class="o"&gt;];&lt;/span&gt;
&lt;span class="c"&gt;(*run the porgram*)&lt;/span&gt;
&lt;span class="n"&gt;GuiGuzi&lt;/span&gt;&lt;span class="bp"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;{{&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="o"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="puzzle"></category><category term="Mathematica"></category><category term="fun problems"></category><category term="math"></category><category term="number"></category><category term="sum"></category><category term="product"></category></entry><entry><title>Basketball Player</title><link href="http://www.legendu.net/en/blog/basketball-player/" rel="alternate"></link><published>2014-07-28T21:56:16-07:00</published><updated>2014-07-28T21:56:16-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2014-07-28:/en/blog/basketball-player/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/basketball-player/basketball.jpg" 
height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;Suppose a basketball player make &lt;span class="math"&gt;\(N\)&lt;/span&gt; shots,
and we know that in the first &lt;span class="math"&gt;\(n(\le N)\)&lt;/span&gt; shots he sinked &lt;span class="math"&gt;\(m(\le n)\)&lt;/span&gt; shots.
If from the &lt;span class="math"&gt;\((n+1)^{th}\)&lt;/span&gt; shot, 
his ratio of sink a shot is his accumulative ratio before the shot,
e.g., suppose he sinked 40 â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/basketball-player/basketball.jpg" 
height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;Suppose a basketball player make &lt;span class="math"&gt;\(N\)&lt;/span&gt; shots,
and we know that in the first &lt;span class="math"&gt;\(n(\le N)\)&lt;/span&gt; shots he sinked &lt;span class="math"&gt;\(m(\le n)\)&lt;/span&gt; shots.
If from the &lt;span class="math"&gt;\((n+1)^{th}\)&lt;/span&gt; shot, 
his ratio of sink a shot is his accumulative ratio before the shot,
e.g., suppose he sinked 40 shots in the first 50 shots,
then his ratio of sink the next shot is 80%.
What's the probability that he will make &lt;span class="math"&gt;\(M\)&lt;/span&gt; shots finally?&lt;/p&gt;
&lt;p&gt;Using the knowledge of permutation and combination, we can solve this problem directly.
Let &lt;span class="math"&gt;\(E_{m,n}\)&lt;/span&gt; be the event that &lt;span class="math"&gt;\(m\)&lt;/span&gt; success in the first &lt;span class="math"&gt;\(n\)&lt;/span&gt; shots.
It turns out to be that&lt;/p&gt;
&lt;div class="math"&gt;$$
P\left( E_{M,N}\mid E_{m,n}\right)
=\frac{ {N-M-1 \choose n-m-1} }{ {N-1 \choose n-1} } ,\ m\le M\le N-(n-m).
$$&lt;/div&gt;
&lt;p&gt;Notice that&lt;/p&gt;
&lt;div class="math"&gt;$$
P\left( E_{M,N}\mid E_{1,2}\right)=\frac{1}{N-1},\ 1\le M\le N-1.
$$&lt;/div&gt;
&lt;p&gt;i.e., the number of sinked shots &lt;span class="math"&gt;\(M\)&lt;/span&gt; is uniformly distributed on its support
given that the player only sinked 1 shot in the first 2 shots.&lt;/p&gt;
&lt;p&gt;Let &lt;span class="math"&gt;\(X_k, n\le k\le N\)&lt;/span&gt; be the number of shots the player sinks in the first &lt;span class="math"&gt;\(k\)&lt;/span&gt; shots,
then the distribution of &lt;span class="math"&gt;\(X_{k+1}\)&lt;/span&gt; conditioning on &lt;span class="math"&gt;\(X_{k}\)&lt;/span&gt; is given in &lt;a href="http://dclong.github.io/media/basketball-player/table.pdf"&gt;Table 1&lt;/a&gt;.
Using the similar method as we've done in the first 3 problems,
we can easily find the first and second moment of &lt;span class="math"&gt;\(X_k\)&lt;/span&gt; which are given below:&lt;/p&gt;
&lt;div class="math"&gt;$$
E(X_k\mid E_{m,n})=k\frac{m}{n},\ n\le k\le N;
$$&lt;/div&gt;
&lt;div class="math"&gt;$$
E(X_k^2)=(k+1)k\frac{(m+1)m}{(n+1)n}-k\frac{m}{n},\ n\le k\le N.
$$&lt;/div&gt;
&lt;p&gt;So the variance of &lt;span class="math"&gt;\(X_k\)&lt;/span&gt; is&lt;/p&gt;
&lt;div class="math"&gt;$$
Var(X_k)=EX_k^2-\left( E X_k\right)^2=k(k-n)\frac{m(n-m)}{n^2(n+1)},\ n\le k\le N.
$$&lt;/div&gt;
&lt;p&gt;From the above formulas, we can know that the expectation and variance
of the number of sinked shots are linear quadratic functions of &lt;span class="math"&gt;\(k\)&lt;/span&gt; respectively,
and both of them increase as &lt;span class="math"&gt;\(k\)&lt;/span&gt; increases.
This makes it hard for us to predict &lt;span class="math"&gt;\(X_k\)&lt;/span&gt; when &lt;span class="math"&gt;\(k\)&lt;/span&gt; is big.
The 2-&lt;span class="math"&gt;\(\sigma\)&lt;/span&gt; intervals for &lt;span class="math"&gt;\(X_k\)&lt;/span&gt; is shown in the follow figure. &lt;/p&gt;
&lt;p&gt;&lt;img src="http://www.legendu.net/media/basketball-player/interval.png" 
height="200" width="240" align="middle"/&gt;
&lt;!---
&lt;img alt="a picture" src="http://www.legendu.net/media/basketball-player/interval.png"&gt; 
--&gt;&lt;/p&gt;
&lt;p&gt;Since we know the distribution of the number of sinked shots 
given that the player sinked &lt;span class="math"&gt;\(m\)&lt;/span&gt; shots in the first &lt;span class="math"&gt;\(n\)&lt;/span&gt; shots,
we can calculate the first and second moments directly, 
which yields the following equations:&lt;/p&gt;
&lt;div class="math"&gt;$$
\sum_M \frac{ {N-M-1 \choose n-m-1} }{ {N-1 \choose n-1} }=1;
$$&lt;/div&gt;
&lt;div class="math"&gt;$$
\sum_M M\frac{ {N-M-1 \choose n-m-1} }{ {N-1 \choose n-1} }=N\frac{m}{n};
$$&lt;/div&gt;
&lt;div class="math"&gt;$$
\sum_M M^2\frac{ {N-M-1 \choose n-m-1} }{ {N-1 \choose n-1} }=(k+1)k\frac{(m+1)m}{(n+1)n}-k\frac{m}{n}.
$$&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="statistics"></category><category term="condition"></category><category term="probability"></category><category term="fun problems"></category><category term="basket ball player"></category></entry><entry><title>How Many People Stay in the Same Position?</title><link href="http://www.legendu.net/en/blog/same-position-permutation/" rel="alternate"></link><published>2013-11-17T15:16:03-08:00</published><updated>2013-11-17T15:16:03-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2013-11-17:/en/blog/same-position-permutation/</id><summary type="html">&lt;p&gt;&lt;img src="http://www.legendu.net/media/people/same.jpg" width="240" height="200" align="right"&gt;&lt;/p&gt;
&lt;p&gt;There are 100 seats on a plane.
If each of the 100 passengers randomly take a seat,
how many people will have his/her own seat on average?&lt;/p&gt;
&lt;p&gt;There is a classic way to solve this problem, 
which is to decompose a (complicated) random variable into a sum of simple â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://www.legendu.net/media/people/same.jpg" width="240" height="200" align="right"&gt;&lt;/p&gt;
&lt;p&gt;There are 100 seats on a plane.
If each of the 100 passengers randomly take a seat,
how many people will have his/her own seat on average?&lt;/p&gt;
&lt;p&gt;There is a classic way to solve this problem, 
which is to decompose a (complicated) random variable into a sum of simple random variables.
This is an important trick. 
See &lt;a href="http://www.legendu.net/en/blog/calculate-covariance-between-multinomial-categories-by-hand/"&gt;this post&lt;/a&gt; 
for the use of this trick to calculate the covariance 
of observastions in two categories in a multinomial distribution.&lt;/p&gt;
&lt;p&gt;Let's generalize this problem to assume that 
there are &lt;span class="math"&gt;\(n\)&lt;/span&gt; seats and &lt;span class="math"&gt;\(n\)&lt;/span&gt; passengers. 
Let &lt;span class="math"&gt;\(Y_i=I(\text{passenger } i \text{ takes its seat})\)&lt;/span&gt;, &lt;span class="math"&gt;\(1\le i \le n\)&lt;/span&gt;,
where &lt;span class="math"&gt;\(I\)&lt;/span&gt; is an indicator function. 
&lt;span class="math"&gt;\(Y_i\)&lt;/span&gt;'s are exchangeable, 
which means that for a fixed &lt;span class="math"&gt;\(k\)&lt;/span&gt; (&lt;span class="math"&gt;\(1\le k\le n\)&lt;/span&gt;), 
any subset of &lt;span class="math"&gt;\(\\{Y_i: 1\le i \le n\\}\)&lt;/span&gt; with &lt;span class="math"&gt;\(k\)&lt;/span&gt; elements has the same distribution.
Specially,
it's easy to see that &lt;/p&gt;
&lt;div class="math"&gt;$$
Y_i\overset{iid}{\sim}\text{Bernoulli}(\frac{1}{n}),
$$&lt;/div&gt;
&lt;div class="math"&gt;$$
Y_iY_j\overset{iid}{\sim}Bernoulli(\frac{1}{n(n-1)}), i\ne j.
$$&lt;/div&gt;
&lt;p&gt;So we have &lt;/p&gt;
&lt;div class="math"&gt;$$
EY_i=\frac{1}{n},
$$&lt;/div&gt;
&lt;div class="math"&gt;$$
EY_iY_j=\frac{1}{n(n-1)}, i\ne j, 
$$&lt;/div&gt;
&lt;div class="math"&gt;$$
Var(Y_i)=\frac{n-1}{n^2},
$$&lt;/div&gt;
&lt;div class="math"&gt;$$
Cov(Y_1,Y_2)=EY_1Y_2-EY_1EY_2=\frac{1}{n^2(n-1)}.
$$&lt;/div&gt;
&lt;p&gt;Let &lt;span class="math"&gt;\(X_n\equiv\sum_{i=1}^nY_i\)&lt;/span&gt;, 
which is the number of passengers taking their own seats.
From above results we know that&lt;/p&gt;
&lt;div class="math"&gt;$$
E(X_n)=E\left( \sum_{i=1}^nY_i\right)=\sum_{i=1}^n E Y_i=n E Y_1=n\frac{1}{n}=1,
$$&lt;/div&gt;
&lt;div class="math"&gt;\begin{align}
Var\left( X_n\right) &amp;amp;= Var\left( \sum_{i=1}^nY_i\right)
                =\sum_{i=1}^n Var(Y_i)+\sum_{i\ne j}Cov(Y_i,Y_j) \nonumber \newline
                     &amp;amp;=  nVar(Y_1)+n(n-1)Cov(Y_1,Y_2) \nonumber \newline
                     &amp;amp;=  n\frac{n-1}{n^2}+n(n-1)\frac{1}{n^2(n-1)}=1. \nonumber
\end{align}&lt;/div&gt;
&lt;p&gt;Surprisingly, both the mean and the variance of &lt;span class="math"&gt;\(X_n\)&lt;/span&gt; is 1,
which suggests that we can predict &lt;span class="math"&gt;\(X_n\)&lt;/span&gt;,
i.e. the number of integers that have the same position as their
original position very well.&lt;/p&gt;
&lt;p&gt;The above solution is elegant. 
However, 
I'd like to try to solve this problem using my preferred universal procedure.
Let &lt;span class="math"&gt;\(Y_i\)&lt;/span&gt; and &lt;span class="math"&gt;\(X_i\)&lt;/span&gt;, &lt;span class="math"&gt;\(1\le i \le n\)&lt;/span&gt;, be as defined above. 
Conditioning &lt;span class="math"&gt;\(X_n\)&lt;/span&gt; on &lt;span class="math"&gt;\(Y_1\)&lt;/span&gt; gives us a recursive/differtial equation.
If &lt;span class="math"&gt;\(Y_1=1\)&lt;/span&gt; (with probability &lt;span class="math"&gt;\(\frac{1}{n}\)&lt;/span&gt;), 
i.e., the first passenger sits on its seat,
then &lt;span class="math"&gt;\(X_n = 1 + X_{n-1}\)&lt;/span&gt;;
It's a little tricky when &lt;span class="math"&gt;\(Y_1=0\)&lt;/span&gt; (with probability &lt;span class="math"&gt;\(1-\frac{1}{n}\)&lt;/span&gt;),
i.e., the first passenger sits on other people's seat. 
Assume the first passenger takes &lt;span class="math"&gt;\(k^{th}\)&lt;/span&gt; (&lt;span class="math"&gt;\(2\le k\le n\)&lt;/span&gt;) passenger's seat.
If we pretend that seat 1 is the &lt;span class="math"&gt;\(k^{th}\)&lt;/span&gt; passenger's seat,
then we have &lt;span class="math"&gt;\(X_n = X_{n-1}\)&lt;/span&gt;. 
However, seat 1 is not &lt;span class="math"&gt;\(k^{th}\)&lt;/span&gt; passenger's seat,
and we cannot count it into &lt;span class="math"&gt;\(X_{n-1}\)&lt;/span&gt;. 
Let &lt;span class="math"&gt;\(E_k\equiv I(\text{passenger } k \text{ sits on seat 1})\)&lt;/span&gt;. 
We only miss count &lt;span class="math"&gt;\(X_{n-1}\)&lt;/span&gt; by extra 1 when &lt;span class="math"&gt;\(E_k=1\)&lt;/span&gt;, 
so when &lt;span class="math"&gt;\(Y_1=0\)&lt;/span&gt; we have 
&lt;/p&gt;
&lt;div class="math"&gt;$$
X_n = X_{n-1} - E_k.
$$&lt;/div&gt;
&lt;p&gt;
It's easy to see that &lt;span class="math"&gt;\(E_k\sim\text{Bernoulli}(\frac{1}{n-1})\)&lt;/span&gt;. 
So using the conditional expectation formula, we have
&lt;/p&gt;
&lt;div class="math"&gt;\begin{align}
EX_n &amp;amp;= E(E(X_n|Y_1))\nonumber\newline 
     &amp;amp;= E\left(\frac{1}{n}(1 + X_{n-1}) + (1-\frac{1}{n}) (X_{n-1} - E_k)\right)\nonumber\newline
     &amp;amp;=EX_{n-1},
\end{align}&lt;/div&gt;
&lt;p&gt;
where &lt;span class="math"&gt;\(EX_1=1\)&lt;/span&gt;.
This is the simplest recursive/differential equation. 
Anyone can immediately see that &lt;span class="math"&gt;\(EX_n=1, \forall n\ge1\)&lt;/span&gt; is the solution to this recursive/differential equation.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="same position"></category><category term="statistics"></category><category term="probability"></category><category term="linear recursion"></category><category term="fun problems"></category><category term="conditional expectation"></category><category term="permutation"></category></entry><entry><title>Calculate Covariance Between Multinomial Categories by Hand</title><link href="http://www.legendu.net/en/blog/calculate-covariance-between-multinomial-categories-by-hand/" rel="alternate"></link><published>2013-11-17T15:14:27-08:00</published><updated>2013-11-17T15:14:27-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2013-11-17:/en/blog/calculate-covariance-between-multinomial-categories-by-hand/</id><summary type="html">&lt;p&gt;Let &lt;span class="math"&gt;\((X_1, \ldots, X_k)\sim\text{Multinomial}(n, p_1, \ldots, p_k)\)&lt;/span&gt;. 
I'll show how to calculate &lt;span class="math"&gt;\(Cov(X_i, X_j), i\ne j\)&lt;/span&gt;. 
The main purpose of doing this is to illustrate the little trick 
of reducing complexity of problems by decomposing a complicated random variable 
into simple ones. &lt;/p&gt;
&lt;p&gt;Let &lt;span class="math"&gt;\((Y_ â€¦&lt;/span&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Let &lt;span class="math"&gt;\((X_1, \ldots, X_k)\sim\text{Multinomial}(n, p_1, \ldots, p_k)\)&lt;/span&gt;. 
I'll show how to calculate &lt;span class="math"&gt;\(Cov(X_i, X_j), i\ne j\)&lt;/span&gt;. 
The main purpose of doing this is to illustrate the little trick 
of reducing complexity of problems by decomposing a complicated random variable 
into simple ones. &lt;/p&gt;
&lt;p&gt;Let &lt;span class="math"&gt;\((Y_{i1}, \ldots, Y_{ik})\overset{iid}{\sim}\text{Multinomial}(1, p_1, \ldots, p_k), i\ge1\)&lt;/span&gt;,
then 
&lt;/p&gt;
&lt;div class="math"&gt;$$
X_j = \sum_{i=1}^n Y_{ij}, 1\le j \le k.
$$&lt;/div&gt;
&lt;p&gt;
So,
&lt;/p&gt;
&lt;div class="math"&gt;\begin{align}
Cov(X_i,X_j) &amp;amp;= Cov(\sum_{l=1}^n Y_{li}, \sum_{m=1}^n Y_{mj})\nonumber\newline
             &amp;amp;= \sum_{l=1}^n\sum_{m=1}^n Cov(Y_{li}, Y_{mj})\nonumber\newline
             &amp;amp;= \sum_{m=1}^n Cov(Y_{mi}, Y_{mj})\nonumber\newline
             &amp;amp;= nCov(Y_{1i}, Y_{1j}) = n(EY_{1i}Y_{1j} - EY_{1i}EY_{1j})\nonumber\newline
             &amp;amp;= -np_ip_j\nonumber\newline
\end{align}&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="fun problem"></category><category term="statistics"></category><category term="probability"></category><category term="multinomial"></category><category term="covariance"></category></entry><entry><title>Creative Use of Keepassx -- Odd Skills?</title><link href="http://www.legendu.net/en/blog/creative-use-of-keepassx-odd-skills/" rel="alternate"></link><published>2013-10-30T22:15:37-07:00</published><updated>2013-10-30T22:15:37-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2013-10-30:/en/blog/creative-use-of-keepassx-odd-skills/</id><summary type="html">&lt;p&gt;&lt;img src="http://www.legendu.net/media/logo/keepassx.jpeg"
width="200" height="160" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;I had to schedule an event on Doodle.
I wanted to fill in all possible regular meeting times 
(starting at 8:00 am with 30 minutes interval).
I am such a lazy guy who never want to repeat the same thing for more than 3 times.
Typing all these time â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://www.legendu.net/media/logo/keepassx.jpeg"
width="200" height="160" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;I had to schedule an event on Doodle.
I wanted to fill in all possible regular meeting times 
(starting at 8:00 am with 30 minutes interval).
I am such a lazy guy who never want to repeat the same thing for more than 3 times.
Typing all these time slots in Doodle was obvious a pain for me.
I immediately came out with the idea of simulating keyboard events. 
I started search in gooled for such a tool in Linux, 
then I immediately realized that I already had such a tool -- keepassx. 
Odd enough, keepassx is a tool for managing passwords!
That's right! 
keepassx allows one to send customized keys to windows.
This is what I wanted. 
Readers might think aloud: 
"Huh, 
so you transformed the work of repeated typing in Doodle into repeated typing in keepassx?"
The answer is letting R 
(or any script language you're familiar with) 
to generate the string for you!
Another advantage of this way is that you work is saved in keepassx.
Scheduling events with the same time slots in future is greatly simplified.
Though I might have used less time to get the work done 
by just typing in Doodle,
I enjoyed getting my worked done creatively. 
And as mentioned above, 
my work is saved. 
I have killed many birds (scheduling similar events in future) with one stone.&lt;/p&gt;</content><category term="skills"></category><category term="Linux"></category><category term="software"></category><category term="fun problems"></category></entry><entry><title>Inverse of a Special Class of Matrices with High Dimensions</title><link href="http://www.legendu.net/en/blog/inverse-of-matrix/" rel="alternate"></link><published>2013-10-30T22:12:02-07:00</published><updated>2013-10-30T22:12:02-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2013-10-30:/en/blog/inverse-of-matrix/</id><summary type="html">&lt;p&gt;&lt;img src="http://www.legendu.net/media/math/matrix-inverse.png"
width="200" height="160" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;One day, my officemate Tieming asked me about a problem that she met in her research. 
Suppose &lt;span class="math"&gt;\(\boldsymbol{B}\)&lt;/span&gt; is a symmetric matrix of huge dimension 
and &lt;span class="math"&gt;\(\boldsymbol{D}\)&lt;/span&gt; is a diagonal matrix with nonnegative diagonal elements. 
The inverse of &lt;span class="math"&gt;\(\boldsymbol{B}\)&lt;/span&gt; is already known, 
how can we calculate the â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://www.legendu.net/media/math/matrix-inverse.png"
width="200" height="160" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;One day, my officemate Tieming asked me about a problem that she met in her research. 
Suppose &lt;span class="math"&gt;\(\boldsymbol{B}\)&lt;/span&gt; is a symmetric matrix of huge dimension 
and &lt;span class="math"&gt;\(\boldsymbol{D}\)&lt;/span&gt; is a diagonal matrix with nonnegative diagonal elements. 
The inverse of &lt;span class="math"&gt;\(\boldsymbol{B}\)&lt;/span&gt; is already known, 
how can we calculate the inverse of &lt;span class="math"&gt;\(\boldsymbol{B}+\boldsymbol{D}\)&lt;/span&gt; efficiently? 
I thought for a while and found a good way to solve the problem. 
See solution in &lt;a href="http://dclong.github.io/media/inverse-of-matrix.pdf"&gt;Inverse of Matrix&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I haven't implemented the algorithm yet, 
but a roughly estimate of the complexity of this algorithm tells me that even R can handle it. 
I will write a R function to do this later when I have time.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="inverse"></category><category term="fun problems"></category><category term="matrix"></category><category term="math"></category><category term="statistics"></category><category term="R"></category><category term="high dimension"></category></entry><entry><title>Which One Is the Best Strategy? (continued)</title><link href="http://www.legendu.net/en/blog/best-strategy-2/" rel="alternate"></link><published>2013-10-30T15:13:01-07:00</published><updated>2013-10-30T15:13:01-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2013-10-30:/en/blog/best-strategy-2/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/pattern/coin.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;Suppose we flip a coin which has probability 0.7 to be head again 
and again and two people choose two different sequences of length 3 (e.g., THH). 
The people whose sequence appears first wins. 
If you are allowed to choose first, which sequence will you choose?&lt;/p&gt;
&lt;p&gt;I discussed â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/pattern/coin.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;Suppose we flip a coin which has probability 0.7 to be head again 
and again and two people choose two different sequences of length 3 (e.g., THH). 
The people whose sequence appears first wins. 
If you are allowed to choose first, which sequence will you choose?&lt;/p&gt;
&lt;p&gt;I discussed about the following interesting probability problem in my post 
&lt;a href="http://dclong.github.io/en/blog/best-strategy/"&gt;Which One is the Best Strategy?&lt;/a&gt; before.
I mentioned that there are better ways to solve this problem. 
I will talk about these methods here. &lt;/p&gt;
&lt;p&gt;In this problem, we have to calculate the probabilities for two given sequences to come out first. 
There are at least two ways to do this. 
The first way is to use Markov Chain, which is simple and direct. 
As long as we can write down the transition matrix,
we can calculate the limiting probabilities in various ways.
Since this process is similar to Example ??, I will just skip it here. 
The other way is by introducing a new random variable &lt;span class="math"&gt;\(M = min\{X_1 , X_2 \}\)&lt;/span&gt;, 
where &lt;span class="math"&gt;\(X_1\)&lt;/span&gt; and &lt;span class="math"&gt;\(X_2\)&lt;/span&gt; are the steps needed for the two patterns to first come out. 
Conditioning on the event &lt;span class="math"&gt;\(E_1 \equiv \text{pattern 1 comes out first}\)&lt;/span&gt;, 
we get an equation involves &lt;span class="math"&gt;\(P_1 \equiv P (E_1 )\)&lt;/span&gt;, &lt;span class="math"&gt;\(E(M )\)&lt;/span&gt; 
and the expected time for some patterns (pattern 1, pattern 2 and probably some new patterns) to occur. 
Similarly, conditioning on the event &lt;span class="math"&gt;\(E_2 \equiv \text{pattern 2 comes out first}\)&lt;/span&gt;, 
we get an equation involves &lt;span class="math"&gt;\(P_2 \equiv P (E_2 )\)&lt;/span&gt;, &lt;span class="math"&gt;\(E(M )\)&lt;/span&gt;
and the expected time of some patterns (pattern 1, pattern 2 and probably
some new patterns) to occur. 
In addition, we have the constraint &lt;span class="math"&gt;\(P_1 + P_2 = 1\)&lt;/span&gt;. 
I have already talked about how to calculate the expected time for a sequence to occur 
in the post &lt;a href="http://dclong.github.io/en/blog/how-long-observe-pattern/"&gt;How Long Does It Take to Observe a Sequence?&lt;/a&gt;,
so what we have to do is just to solve a group of linear equations. &lt;/p&gt;
&lt;p&gt;Before doing any calculation, I guess many people will choose pattern "HHH". 
However, this pattern is beaten by "THH". 
There's an easy way to show this. 
Suppose we first observe sequence HHH at step &lt;span class="math"&gt;\(n(&amp;gt;3)\)&lt;/span&gt;, 
then the outcome must be "T" at step &lt;span class="math"&gt;\(n âˆ’ 3\)&lt;/span&gt;,
which means that we have observed "THH" at step &lt;span class="math"&gt;\(n âˆ’ 1\)&lt;/span&gt;. 
So for "HHH" to win against "THH", it must appear at step 3. 
So the probability for "HHH" to beat "THH" is &lt;span class="math"&gt;\(0.7^3 = 0.343 &amp;lt; 0.5\)&lt;/span&gt;, 
i.e. "HHH" is not as good as "THH".
This method is very neat, but unfortunately it does not work for all pairs of patterns. 
To compare other pairs of patterns, 
we can use function "PatternFirstComeOurProbability" in the code of the post 
&lt;a href="http://dclong.github.io/en/blog/how-long-observe-pattern/"&gt;How Long Does It Take to Observe a Sequence?&lt;/a&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PatternFirstComeOutProbability&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;219&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;343&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;657&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From the above result we can see that the chance for pattern "HHH" to beat
pattern "THH" is &lt;span class="math"&gt;\(343/1000 = 0.343 &amp;lt; 0.5\)&lt;/span&gt; which matches the results I got
before.&lt;/p&gt;
&lt;p&gt;Now we already know that pattern "HHH" is beaten by pattern "THH". 
A nature question people might ask is that cannot pattern "THH" beat all other
patterns? The answer is no, and actually there's no pattern which can beat all
other patterns in this problem. 
The following Mathematica code will help us
to calculate the probability for a pattern to come our first when compared to
some other pattern.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;patterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Tuples&lt;/span&gt;[{&lt;span class="mi"&gt;0&lt;/span&gt;, &lt;span class="mi"&gt;1&lt;/span&gt;}, &lt;span class="mi"&gt;3&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;ProbMatrix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Table&lt;/span&gt;[&lt;span class="nv"&gt;Null&lt;/span&gt;, {&lt;span class="mi"&gt;8&lt;/span&gt;}, {&lt;span class="mi"&gt;8&lt;/span&gt;}]&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;For&lt;/span&gt;[&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;; 8, i++,&lt;/span&gt;
    &lt;span class="k"&gt;For&lt;/span&gt;[&lt;span class="nv"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;;= 8, j++,&lt;/span&gt;
        &lt;span class="nv"&gt;probs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="nv"&gt;PatternFirstComeOutProbability&lt;/span&gt;[{&lt;span class="nv"&gt;patterns&lt;/span&gt;[[&lt;span class="nv"&gt;i&lt;/span&gt;]], &lt;span class="nv"&gt;patterns&lt;/span&gt;[[&lt;span class="nv"&gt;j&lt;/span&gt;]]}, {&lt;span class="mi"&gt;1&lt;/span&gt;, &lt;span class="mi"&gt;0&lt;/span&gt;}, {&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;, &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;}]&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;ProbMatrix&lt;/span&gt;[[&lt;span class="nv"&gt;i&lt;/span&gt;, &lt;span class="nv"&gt;j&lt;/span&gt;]] &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;probs&lt;/span&gt;[[&lt;span class="mi"&gt;2&lt;/span&gt;]]&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;ProbMatrix&lt;/span&gt;[[&lt;span class="nv"&gt;j&lt;/span&gt;, &lt;span class="nv"&gt;i&lt;/span&gt;]] &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;probs&lt;/span&gt;[[&lt;span class="mi"&gt;3&lt;/span&gt;]]&lt;span class="c1"&gt;;&lt;/span&gt;
    ]
]&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;For&lt;/span&gt;[&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;;= 8, i++,&lt;/span&gt;
    &lt;span class="nv"&gt;AppendTo&lt;/span&gt;[&lt;span class="nv"&gt;ProbMatrix&lt;/span&gt;[[&lt;span class="nv"&gt;i&lt;/span&gt;]],
    &lt;span class="nv"&gt;Min&lt;/span&gt;[&lt;span class="nv"&gt;Drop&lt;/span&gt;[&lt;span class="nv"&gt;ProbMatrix&lt;/span&gt;[[&lt;span class="nv"&gt;i&lt;/span&gt;]],
    &lt;span class="nv"&gt;Flatten&lt;/span&gt;[&lt;span class="nv"&gt;Position&lt;/span&gt;[&lt;span class="nv"&gt;ProbMatrix&lt;/span&gt;[[&lt;span class="nv"&gt;i&lt;/span&gt;]], &lt;span class="nv"&gt;Null&lt;/span&gt;]]]]]
]&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;StringJoin&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;@ &lt;span class="nv"&gt;IntegerString&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;@ &lt;span class="nv"&gt;patterns&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;TableForm&lt;/span&gt;[&lt;span class="nv"&gt;ProbMatrix&lt;/span&gt;, &lt;span class="nv"&gt;TableHeadings&lt;/span&gt; &lt;span class="o"&gt;-&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;gt&lt;/span&gt;&lt;span class="c1"&gt;; {AppendTo[names, &amp;quot;Min&amp;quot;], names}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The result of the above code is presented in 
&lt;a href="http://dclong.github.io/media/pattern/pattern-first-out-probability.pdf"&gt;Table 1&lt;/a&gt;. 
From Table 1, we can see
that none of the 8 rows has values that're all at least 0.5, which means that none
of the 8 patterns can beat all other patterns. 
Though we cannot find a pattern
which can always give you a higher chance to win against other patterns, we still
have to make a decision. Suppose we have to let our competitor know which
pattern we choose , and he/she is smart enough (which means that he/she will
always make the best choice based the pattern we choose), we want to choose
the pattern which yields highest winning probability. So we have to choose
the pattern which is the best (yields the highest winning probability) in the
worst situation. This is kind of like the Mini-Max rule in decision theory. The
following Mathematica code help us find the right pattern.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;Flatten&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;Position&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ProbMatrix&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="k"&gt;All&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="k"&gt;Max&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ProbMatrix&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="k"&gt;All&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]]]]]]]&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So if the other player is smart enough, we should choose pattern "THH".
Though in this problem we only compare two patterns at a time, function
"PatternFirstComeOurProbability" can handle the case when multiple patterns
are involved. For example, suppose 3 people are in this game and they choose
pattern "THH", "HHH" and "TTT" respectively. Running function 
"PatternFirstComeOurProbability" in Mathematica yields the following result.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PatternFirstComeOutProbability&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;30441&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;7270&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;418509&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;727000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;343&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5913&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;72700&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;18721&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;575666&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;343&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0813343&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That is the probabilities for the 3 people to win are about 0.576, 0.343 and 0.081
respectively.
Indeed function "PatternFirstComeOurProbability" is powerful, but it also
has a limitation. It might give us wrong results when patterns with different
lengths are compared with function PatternFirstComeOurProbability. 
For example, pattern "HT" will definitely appear before pattern "HHTH", however,
function PatternFirstComeOurProbability doesn't give us the right answer.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PatternFirstComeOutProbability&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These kind of situations are easy to handle. A always safe way compare patterns
with differen lengths is to change the problem to one in which all patterns have
the same length. For example, instead of letting function PatternFirstComeOur-
Probability compare patterns "HH" and "HTH", we can let it compare patterns
"HHT", "HHH" and "HTT".
Based on the above idea, it's easy to write a function which is able to handle
all situations, however, this is trivia and I don't think it's worth my time. Time
is finite while knowledge is infinite. We should spend time on more valuable
things.&lt;/p&gt;
&lt;p&gt;Actually we've killed multiple birds with one stone in this problem. We can
also calculate the expected time for a pattern to show up, given that some
other pattern has already occurred, 
see function PatternAdditionalExpected Time. 
However, this function have a similar issue as function PatternFirst-
ComeOurProbability has. And what's more, we have to carefully define what
"addition step needed" means.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Mathematica"></category><category term="pattern"></category><category term="Markov chain"></category><category term="statistics"></category><category term="probability"></category><category term="sequence"></category><category term="coin"></category><category term="fun problems"></category></entry><entry><title>Expected Gain of Tossing a Dice</title><link href="http://www.legendu.net/en/blog/dice-expected-gain/" rel="alternate"></link><published>2013-10-30T09:37:39-07:00</published><updated>2013-10-30T09:37:39-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2013-10-30:/en/blog/dice-expected-gain/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/dice/dice.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;Suppose you toss a symmetric dice. 
You are allowed to quit the game and
get money which equals the total points you get at any time if 6 has never
showed up. Whenever 6 shows up, the game is over and you get nothing. For
example, if the first three â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/dice/dice.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;Suppose you toss a symmetric dice. 
You are allowed to quit the game and
get money which equals the total points you get at any time if 6 has never
showed up. Whenever 6 shows up, the game is over and you get nothing. For
example, if the first three tosses turn out to be 2, 3 and 5 you can quit the
game immediately and gain 10 dollars or you can choose to continue the game.
What is the expected gains of this game?&lt;/p&gt;
&lt;p&gt;First we have to decide how to play the game, i.e. when to quit the game.
Suppose &lt;span class="math"&gt;\(T\)&lt;/span&gt; is the total points we get now.
If we choose to continue the game, the distribution of our profit is presented in &lt;a href="http://dclong.github.io/media/dice/tables.pdf"&gt;Table 1&lt;/a&gt;.
So our net profit is &lt;span class="math"&gt;\(\frac{15-T}{6}\)&lt;/span&gt; if we choose to continue the game,
which suggests us quit the game when &lt;span class="math"&gt;\(T\ge15\)&lt;/span&gt;.
Let's use &lt;span class="math"&gt;\(W\)&lt;/span&gt; to denote the final gain in this game,
then &lt;span class="math"&gt;\(W\)&lt;/span&gt; can be either 0 or some element in &lt;span class="math"&gt;\(A\equiv\{15, 16, 17, 18, 19\}\)&lt;/span&gt;.
To find the expected gains,
we have to find the distribution of &lt;span class="math"&gt;\(W\)&lt;/span&gt;,
i.e. we have to find &lt;span class="math"&gt;\(P(W=i)\)&lt;/span&gt;, &lt;span class="math"&gt;\(i\in A\)&lt;/span&gt;.
There're at least two ways to do this.
One of them is to use the powerful tool Markov Chain and the other is to use recursion formula.&lt;/p&gt;
&lt;h2 id="method-i-markov-chain"&gt;Method I: Markov Chain&lt;/h2&gt;
&lt;p&gt;Let's use &lt;span class="math"&gt;\(\{X_n\}\)&lt;/span&gt;, &lt;span class="math"&gt;\(n\in \mathbb{N}\)&lt;/span&gt; to stand for the total points we get at step &lt;span class="math"&gt;\(n\)&lt;/span&gt;.
Let &lt;span class="math"&gt;\(X_0=0\)&lt;/span&gt;; &lt;span class="math"&gt;\(X_k=s\)&lt;/span&gt; (just a symbol to avoid confusion with the other states of &lt;span class="math"&gt;\(\{X_n\}\)&lt;/span&gt;) for &lt;span class="math"&gt;\(k\ge n\)&lt;/span&gt; if the tossing result turns out to 6 at step &lt;span class="math"&gt;\(n\)&lt;/span&gt;;
&lt;span class="math"&gt;\(X_k=t\)&lt;/span&gt; for &lt;span class="math"&gt;\(k\ge n\)&lt;/span&gt; if &lt;span class="math"&gt;\(X_n=t\in A\)&lt;/span&gt;.
It's easy to check that &lt;span class="math"&gt;\(\{X_n\}\)&lt;/span&gt; is a Markov Chain and its limiting distribution is what we are interested in.
The transition probability matrix of &lt;span class="math"&gt;\(\{X_n\}\)&lt;/span&gt; is given in &lt;a href="http://dclong.github.io/media/dice/tables.pdf"&gt;Table 1&lt;/a&gt;.
The probabilities that &lt;span class="math"&gt;\(W=i\)&lt;/span&gt; where &lt;span class="math"&gt;\(i\in A\)&lt;/span&gt;,
are the probabilities that &lt;span class="math"&gt;\(X_n\)&lt;/span&gt; ends in the corresponding states,
i.e. &lt;span class="math"&gt;\(lim_n P(X_n=i)\)&lt;/span&gt;, &lt;span class="math"&gt;\(i\in A\)&lt;/span&gt;.
To find these limiting probabilities, we need to find the limit of &lt;span class="math"&gt;\(P^n\)&lt;/span&gt; (actually we only care about the limit property of the second row of the transition matrix since &lt;span class="math"&gt;\(X_0=0\)&lt;/span&gt;).
With the help of R, we can easily find these probabilities which are given below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;probs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;
&lt;span class="mi"&gt;15&lt;/span&gt;         &lt;span class="mi"&gt;16&lt;/span&gt;         &lt;span class="mi"&gt;17&lt;/span&gt;         &lt;span class="mi"&gt;18&lt;/span&gt;         &lt;span class="mi"&gt;19&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;13128076&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;10092009&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;07407628&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;04813533&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;02337223&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So the average gain of this game is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;probs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;%*%&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;
&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;153738&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="method-ii-recursion-formula"&gt;Method II: Recursion Formula&lt;/h2&gt;
&lt;p&gt;Let &lt;span class="math"&gt;\(\{X_n\}\)&lt;/span&gt;, &lt;span class="math"&gt;\(n\in \mathbb{N}\)&lt;/span&gt; and &lt;span class="math"&gt;\(A\)&lt;/span&gt; be the same as in Method I.
Let &lt;span class="math"&gt;\(E_{t,n}\)&lt;/span&gt; be the event that &lt;span class="math"&gt;\(X_n=t, X_{n-1}&amp;lt;t\)&lt;/span&gt; 
and &lt;span class="math"&gt;\(P_{t,n}\equiv P(E_{t,n})\)&lt;/span&gt;,
then &lt;span class="math"&gt;\(P_{t,n}\)&lt;/span&gt; stands for the probability that we first achieve total points &lt;span class="math"&gt;\(t\)&lt;/span&gt; at step &lt;span class="math"&gt;\(n\)&lt;/span&gt;.
Specially for &lt;span class="math"&gt;\(t\in A\)&lt;/span&gt;, &lt;span class="math"&gt;\(P_{t,n}\)&lt;/span&gt; stand for the probability that the game ends with total points at step &lt;span class="math"&gt;\(n\)&lt;/span&gt;.
Let &lt;span class="math"&gt;\(P_t\equiv \sum_{n\ge0} P_{t,n}\)&lt;/span&gt;, then &lt;span class="math"&gt;\(P_t\)&lt;/span&gt;, &lt;span class="math"&gt;\(t\in A\)&lt;/span&gt; are what we're interested in.
Conditioning &lt;span class="math"&gt;\(E_{t,n}\)&lt;/span&gt; on the value &lt;span class="math"&gt;\(X_{n-1}\)&lt;/span&gt; takes, we have the following recursion formula
&lt;/p&gt;
&lt;div class="math"&gt;$$
P_{t,n}=\frac{1}{6}P_{t-1,n-1}+\frac{1}{6}P_{t-2,n-1} +\frac{1}{6}P_{t-3,n-1}\\
    +\frac{1}{6}P_{t-4,n-1} +\frac{1}{6}P_{t-5,n-1},\text{ for } 0&amp;lt;t\le 15,\ n\ge1.  
$$&lt;/div&gt;
&lt;p&gt;Because the game is over when &lt;span class="math"&gt;\(t\ge15\)&lt;/span&gt;,
we have different formulas for &lt;span class="math"&gt;\(t&amp;gt;15\)&lt;/span&gt; and &lt;span class="math"&gt;\(n\ge1\)&lt;/span&gt;&lt;/p&gt;
&lt;div class="math"&gt;$$
P_{16,n}=\frac{1}{6}P_{14,n-1}+\frac{1}{6}P_{13,n-1}+\frac{1}{6}P_{12,n-1}+\frac{1}{6}P_{11,n-1},
$$&lt;/div&gt;
&lt;div class="math"&gt;$$ P_{17,n}=\frac{1}{6}P_{14,n-1}+\frac{1}{6}P_{13,n-1}+\frac{1}{6}P_{12,n-1}, $$&lt;/div&gt;
&lt;div class="math"&gt;$$ P_{18,n}=\frac{1}{6}P_{14,n-1}+\frac{1}{6}P_{13,n-1},$$&lt;/div&gt;
&lt;div class="math"&gt;$$ P_{19,n}=\frac{1}{6}P_{14,n-1}.  $$&lt;/div&gt;
&lt;p&gt;It's obvious that &lt;span class="math"&gt;\(P_{t,0}=0\)&lt;/span&gt; for &lt;span class="math"&gt;\(t&amp;gt;0\)&lt;/span&gt;.
Sum the above formulas over &lt;span class="math"&gt;\(n\)&lt;/span&gt; from 1 to &lt;span class="math"&gt;\(\infty\)&lt;/span&gt; we have
&lt;/p&gt;
&lt;div class="math"&gt;$$
P_{t}=\frac{1}{6}P_{t-1}+\frac{1}{6}P_{t-2}+\frac{1}{6}P_{t-3}
+\frac{1}{6}P_{t-4}+\frac{1}{6}P_{t-5},\text{ for } 0&amp;lt;t\le 15,
$$&lt;/div&gt;
&lt;div class="math"&gt;$$ P_{16}=\frac{1}{6}P_{14}+\frac{1}{6}P_{13}+\frac{1}{6}P_{12}+\frac{1}{6}P_{11}, $$&lt;/div&gt;
&lt;div class="math"&gt;$$P_{17}=\frac{1}{6}P_{14}+\frac{1}{6}P_{13}+\frac{1}{6}P_{12},$$&lt;/div&gt;
&lt;div class="math"&gt;$$P_{18}=\frac{1}{6}P_{14}+\frac{1}{6}P_{13},$$&lt;/div&gt;
&lt;div class="math"&gt;$$P_{19}=\frac{1}{6}P_{14}.$$&lt;/div&gt;
&lt;p&gt;To solve this system, we have to ascertain the initial values.
It's not hard to find values for &lt;span class="math"&gt;\(P_0,\ldots,P_4\)&lt;/span&gt;, however,
we can make things even easier by extending the recursion formula forward to term
&lt;span class="math"&gt;\(P_{-4}\)&lt;/span&gt;.
Under this extension, the initial conditions for this system are as follows&lt;/p&gt;
&lt;div class="math"&gt;$$ P_{-4}=P_{-3}=P_{-2}=P_{-1}=0 \text{ and } P_0=1.  $$&lt;/div&gt;
&lt;p&gt;Now we can find values for &lt;span class="math"&gt;\(P_t\)&lt;/span&gt;, &lt;span class="math"&gt;\(t\in A\)&lt;/span&gt; easily.
One way is to use method of generating functions to find the general term for &lt;span class="math"&gt;\(P_t\)&lt;/span&gt; when &lt;span class="math"&gt;\(t\le15\)&lt;/span&gt; and then calculate &lt;span class="math"&gt;\(P_t\)&lt;/span&gt; for &lt;span class="math"&gt;\(t\in A\)&lt;/span&gt;.
Another easier way and more practical way is use computer to find these values directly based on these formulas given above.
The implementation in Mathmatica and the corresponding result are as follows. 
Notice that their is a built-in function called &lt;code&gt;LinearRecurrence&lt;/code&gt; in Mathematica which 
does a similar job to the function &lt;code&gt;LinearRecursion&lt;/code&gt; here. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;LinearRecursion&lt;/span&gt;::&lt;span class="nv"&gt;SmallOrder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;The order of the linear recursive equation must be at least 2.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;LinearRecursion&lt;/span&gt;::&lt;span class="nv"&gt;NotMatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;The length of argument &amp;#39;coef&amp;#39; doesn&amp;#39;t match the length of &amp;#39;initial&amp;#39;.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;LinearRecursion&lt;/span&gt;[&lt;span class="nv"&gt;n_&lt;/span&gt;, &lt;span class="nv"&gt;ini_&lt;/span&gt;, &lt;span class="nv"&gt;coef_&lt;/span&gt;: &lt;span class="nv"&gt;Null&lt;/span&gt;, &lt;span class="nv"&gt;start_&lt;/span&gt;: &lt;span class="mi"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;irev_&lt;/span&gt;: &lt;span class="nv"&gt;False&lt;/span&gt;, &lt;span class="nv"&gt;crev_&lt;/span&gt;: &lt;span class="nv"&gt;False&lt;/span&gt;] :&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;Module&lt;/span&gt;[{&lt;span class="nv"&gt;nmax&lt;/span&gt;, &lt;span class="nb"&gt;result&lt;/span&gt;, &lt;span class="nv"&gt;i&lt;/span&gt;, &lt;span class="nv"&gt;coefficient&lt;/span&gt;, &lt;span class="nv"&gt;order&lt;/span&gt;, &lt;span class="nv"&gt;index&lt;/span&gt;, &lt;span class="nv"&gt;initials&lt;/span&gt;},
    &lt;span class="nv"&gt;order&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Length&lt;/span&gt;[&lt;span class="nv"&gt;ini&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;order&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;; 2, Message[LinearRecursion::SmallOrder]; Return[]];&lt;/span&gt;
    &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;coef&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nv"&gt;Null&lt;/span&gt;,
        &lt;span class="nv"&gt;coefficient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Table&lt;/span&gt;[&lt;span class="mi"&gt;1&lt;/span&gt;, {&lt;span class="nv"&gt;order&lt;/span&gt;}],
        &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;Length&lt;/span&gt;[&lt;span class="nv"&gt;coef&lt;/span&gt;] &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nv"&gt;order&lt;/span&gt;,
            &lt;span class="nv"&gt;Message&lt;/span&gt;[&lt;span class="nv"&gt;LinearRecursion&lt;/span&gt;::&lt;span class="nv"&gt;NotMatch&lt;/span&gt;]&lt;span class="c1"&gt;; Return[],&lt;/span&gt;
            &lt;span class="nv"&gt;coefficient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;coef&lt;/span&gt;
        ]
    ]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;irev&lt;/span&gt;, &lt;span class="nv"&gt;initials&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Reverse&lt;/span&gt;[&lt;span class="nv"&gt;ini&lt;/span&gt;], &lt;span class="nv"&gt;initials&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;ini&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;crev&lt;/span&gt;, &lt;span class="nv"&gt;coefficient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Reverse&lt;/span&gt;[&lt;span class="nv"&gt;coefficient&lt;/span&gt;]]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;start&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;nmax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Max&lt;/span&gt;[&lt;span class="nv"&gt;index&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;If&lt;/span&gt;[&lt;span class="nv"&gt;nmax&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;;= order, Return[initials[[index]]]];&lt;/span&gt;
    &lt;span class="nb"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Table&lt;/span&gt;[&lt;span class="mi"&gt;0&lt;/span&gt;, {&lt;span class="nv"&gt;nmax&lt;/span&gt;}]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;result&lt;/span&gt;[[&lt;span class="nv"&gt;Table&lt;/span&gt;[&lt;span class="nv"&gt;i&lt;/span&gt;, {&lt;span class="nv"&gt;i&lt;/span&gt;, &lt;span class="mi"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;order&lt;/span&gt;}]]] &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;initials&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;For&lt;/span&gt;[&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;order&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;;= nmax, i++,&lt;/span&gt;
        &lt;span class="nb"&gt;result&lt;/span&gt;[[&lt;span class="nv"&gt;i&lt;/span&gt;]] &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;result&lt;/span&gt;[[&lt;span class="nv"&gt;Table&lt;/span&gt;[&lt;span class="nv"&gt;j&lt;/span&gt;, {&lt;span class="nv"&gt;j&lt;/span&gt;, &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;order&lt;/span&gt;, &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;}]]].&lt;span class="nv"&gt;coefficient&lt;/span&gt;
    ]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;result&lt;/span&gt;[[&lt;span class="nv"&gt;index&lt;/span&gt;]]
]

&lt;span class="nv"&gt;In&lt;/span&gt;[&lt;span class="mi"&gt;142&lt;/span&gt;]:&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;ini&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; {&lt;span class="mi"&gt;0&lt;/span&gt;, &lt;span class="mi"&gt;0&lt;/span&gt;, &lt;span class="mi"&gt;0&lt;/span&gt;, &lt;span class="mi"&gt;0&lt;/span&gt;, &lt;span class="mi"&gt;1&lt;/span&gt;}&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;coef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; {&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;, &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;, &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;, &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;, &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;}&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;c1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;coef&lt;/span&gt;[[&lt;span class="mi"&gt;1&lt;/span&gt;]]&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;c2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;coef&lt;/span&gt;[[&lt;span class="mi"&gt;2&lt;/span&gt;]]&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;c3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;coef&lt;/span&gt;[[&lt;span class="mi"&gt;3&lt;/span&gt;]]&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;c4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;coef&lt;/span&gt;[[&lt;span class="mi"&gt;4&lt;/span&gt;]]&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;c5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;coef&lt;/span&gt;[[&lt;span class="mi"&gt;5&lt;/span&gt;]]&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;p11&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;LinearRecursion&lt;/span&gt;[&lt;span class="mi"&gt;11&lt;/span&gt;, &lt;span class="nv"&gt;ini&lt;/span&gt;, &lt;span class="nv"&gt;coef&lt;/span&gt;, &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;p12&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;LinearRecursion&lt;/span&gt;[&lt;span class="mi"&gt;12&lt;/span&gt;, &lt;span class="nv"&gt;ini&lt;/span&gt;, &lt;span class="nv"&gt;coef&lt;/span&gt;, &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;p13&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;LinearRecursion&lt;/span&gt;[&lt;span class="mi"&gt;13&lt;/span&gt;, &lt;span class="nv"&gt;ini&lt;/span&gt;, &lt;span class="nv"&gt;coef&lt;/span&gt;, &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;p14&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;LinearRecursion&lt;/span&gt;[&lt;span class="mi"&gt;14&lt;/span&gt;, &lt;span class="nv"&gt;ini&lt;/span&gt;, &lt;span class="nv"&gt;coef&lt;/span&gt;, &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;p15&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;LinearRecursion&lt;/span&gt;[&lt;span class="mi"&gt;15&lt;/span&gt;, &lt;span class="nv"&gt;ini&lt;/span&gt;, &lt;span class="nv"&gt;coef&lt;/span&gt;, &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;p16&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;c5&lt;/span&gt; &lt;span class="nv"&gt;p11&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;c4&lt;/span&gt; &lt;span class="nv"&gt;p12&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;c3&lt;/span&gt; &lt;span class="nv"&gt;p13&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;c2&lt;/span&gt; &lt;span class="nv"&gt;p14&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;p17&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;c5&lt;/span&gt; &lt;span class="nv"&gt;p12&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;c4&lt;/span&gt; &lt;span class="nv"&gt;p13&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;c3&lt;/span&gt; &lt;span class="nv"&gt;p14&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;p18&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;c5&lt;/span&gt; &lt;span class="nv"&gt;p13&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;c4&lt;/span&gt; &lt;span class="nv"&gt;p14&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;p19&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;c5&lt;/span&gt; &lt;span class="nv"&gt;p14&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;probs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; {&lt;span class="nv"&gt;p15&lt;/span&gt;, &lt;span class="nv"&gt;p16&lt;/span&gt;, &lt;span class="nv"&gt;p17&lt;/span&gt;, &lt;span class="nv"&gt;p18&lt;/span&gt;, &lt;span class="nv"&gt;p19&lt;/span&gt;}&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;gain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;probs&lt;/span&gt;.&lt;span class="nv"&gt;Table&lt;/span&gt;[&lt;span class="nv"&gt;i&lt;/span&gt;, {&lt;span class="nv"&gt;i&lt;/span&gt;, &lt;span class="mi"&gt;15&lt;/span&gt;, &lt;span class="mi"&gt;19&lt;/span&gt;}]

&lt;span class="nv"&gt;Out&lt;/span&gt;[&lt;span class="mi"&gt;159&lt;/span&gt;]&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="mi"&gt;2893395172951&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;470184984576&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The implementation in R and the corresponding result are as below. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt; @param n is the subscript of the array to be calculated&lt;/span&gt;
#&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt; @param ini is the initial values vector starting from the first term&lt;/span&gt;
#&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt; @param  coef is the coefficients vector in the linear recursion equation&lt;/span&gt;
&lt;span class="nv"&gt;fibo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;function&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;,&lt;span class="nv"&gt;ini&lt;/span&gt;,&lt;span class="nv"&gt;coef&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;rep&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;,&lt;span class="nv"&gt;length&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ini&lt;/span&gt;&lt;span class="ss"&gt;))&lt;/span&gt;,&lt;span class="nv"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;,&lt;span class="nv"&gt;irev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;FALSE&lt;/span&gt;,&lt;span class="nv"&gt;crev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;FALSE&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;{
    &lt;span class="nv"&gt;order&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;length&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ini&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;order&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;;2)&lt;/span&gt;
    &lt;span class="nv"&gt;stop&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;the order of the difference equation must be at least 2.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;length&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;coef&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="nv"&gt;order&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;stop&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;the lengths of the coefficents vector and the initial&lt;/span&gt;
    &lt;span class="nv"&gt;values&lt;/span&gt; &lt;span class="nv"&gt;vector&lt;/span&gt; &lt;span class="nv"&gt;must&lt;/span&gt; &lt;span class="nv"&gt;be&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;same&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;start&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="nv"&gt;nmax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;max&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;nmax&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;;=order)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ini&lt;/span&gt;[&lt;span class="nv"&gt;n&lt;/span&gt;]&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;irev&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;ini&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;rev&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ini&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;crev&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;coef&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;rev&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;coef&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;result&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;rep&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;,&lt;span class="nv"&gt;nmax&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;result&lt;/span&gt;[&lt;span class="mi"&gt;1&lt;/span&gt;:&lt;span class="nv"&gt;order&lt;/span&gt;]&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;ini&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;order&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;:&lt;span class="nv"&gt;nmax&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;result&lt;/span&gt;[&lt;span class="nv"&gt;i&lt;/span&gt;]&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;result&lt;/span&gt;[&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;order&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;:&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;]&lt;span class="o"&gt;%*%&lt;/span&gt;&lt;span class="nv"&gt;coef&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;result&lt;/span&gt;[&lt;span class="nv"&gt;n&lt;/span&gt;]&lt;span class="ss"&gt;)&lt;/span&gt;
}

&lt;span class="nv"&gt;ini&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;,&lt;span class="mi"&gt;0&lt;/span&gt;,&lt;span class="mi"&gt;0&lt;/span&gt;,&lt;span class="mi"&gt;0&lt;/span&gt;,&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;coef&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;rep&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;,&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;c1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;coef&lt;/span&gt;[&lt;span class="mi"&gt;1&lt;/span&gt;]
&lt;span class="nv"&gt;c2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;coef&lt;/span&gt;[&lt;span class="mi"&gt;2&lt;/span&gt;]
&lt;span class="nv"&gt;c3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;coef&lt;/span&gt;[&lt;span class="mi"&gt;3&lt;/span&gt;]
&lt;span class="nv"&gt;c4&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;coef&lt;/span&gt;[&lt;span class="mi"&gt;4&lt;/span&gt;]
&lt;span class="nv"&gt;c5&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;coef&lt;/span&gt;[&lt;span class="mi"&gt;5&lt;/span&gt;]
&lt;span class="nv"&gt;p11&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;fibo&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;,&lt;span class="nv"&gt;ini&lt;/span&gt;,&lt;span class="nv"&gt;coef&lt;/span&gt;,&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;p12&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;fibo&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;,&lt;span class="nv"&gt;ini&lt;/span&gt;,&lt;span class="nv"&gt;coef&lt;/span&gt;,&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;p13&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;fibo&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;,&lt;span class="nv"&gt;ini&lt;/span&gt;,&lt;span class="nv"&gt;coef&lt;/span&gt;,&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;p14&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;fibo&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;,&lt;span class="nv"&gt;ini&lt;/span&gt;,&lt;span class="nv"&gt;coef&lt;/span&gt;,&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;p15&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;fibo&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;,&lt;span class="nv"&gt;ini&lt;/span&gt;,&lt;span class="nv"&gt;coef&lt;/span&gt;,&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;p16&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;c5&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;p11&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;c4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;p12&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;c3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;p13&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;c2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;p14&lt;/span&gt;
&lt;span class="nv"&gt;p17&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;c5&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;p12&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;c4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;p13&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;c3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;p14&lt;/span&gt;
&lt;span class="nv"&gt;p18&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;c5&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;p13&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;c4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;p14&lt;/span&gt;
&lt;span class="nv"&gt;p19&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;c5&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;p14&lt;/span&gt;
&lt;span class="nv"&gt;probs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;p15&lt;/span&gt;,&lt;span class="nv"&gt;p16&lt;/span&gt;,&lt;span class="nv"&gt;p17&lt;/span&gt;,&lt;span class="nv"&gt;p18&lt;/span&gt;,&lt;span class="nv"&gt;p19&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;gain&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;probs&lt;/span&gt;&lt;span class="o"&gt;%*%&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;:&lt;span class="mi"&gt;19&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;gt&lt;/span&gt;&lt;span class="c1"&gt;; gain&lt;/span&gt;
[,&lt;span class="mi"&gt;1&lt;/span&gt;]
[&lt;span class="mi"&gt;1&lt;/span&gt;,] &lt;span class="mi"&gt;6&lt;/span&gt;.&lt;span class="mi"&gt;153738&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can easily generalize this problem by assume the dice to be a nonsymmetric one with &lt;span class="math"&gt;\(f\)&lt;/span&gt; faces having arbitrary points on it.
Both of the two above methods can apply to the generalized problem,
however the second method is simpler for this kind of problems.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Mathematica"></category><category term="recursion"></category><category term="statistics"></category><category term="probability"></category><category term="Markov chain"></category><category term="fun problems"></category></entry><entry><title>Randomly Select an Integer?!</title><link href="http://www.legendu.net/en/blog/integer-probability-measure/" rel="alternate"></link><published>2013-10-29T17:23:24-07:00</published><updated>2013-10-29T17:23:24-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2013-10-29:/en/blog/integer-probability-measure/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/number/numbers.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;I found this "probability" problem when I read a person's blog. &lt;/p&gt;
&lt;p&gt;What's probability that two randomly chosen nature numbers are relatively prime?&lt;/p&gt;
&lt;p&gt;It is claimed that there is a very elegant solution for this problem. 
This problem reminds me another one. 
Some people asked for an example of a 0-probability â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/number/numbers.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;I found this "probability" problem when I read a person's blog. &lt;/p&gt;
&lt;p&gt;What's probability that two randomly chosen nature numbers are relatively prime?&lt;/p&gt;
&lt;p&gt;It is claimed that there is a very elegant solution for this problem. 
This problem reminds me another one. 
Some people asked for an example of a 0-probability event 
that is not impossible on &lt;a href="http://www.legendu.net/en/tag/fun-problems.html"&gt;COS&lt;/a&gt;. 
And a person said "randomly pick an integer from all integers".
While this example sounds like a neat one, 
it is invalid actually. 
The example assumes that there exists a probablity measure on all integers
such that the measure for each integer is that same. 
However, such a probabiliy measure does not exists. 
This is easy to see. 
Suppose the probability measure for each integer is 0, 
then from countable additivity the probability measure for all integers is 0, 
which is contrary to the fact that the probability measure for the whole set is 1. 
Suppose the probability measure for each integer is &lt;span class="math"&gt;\(\delta&amp;gt;0\)&lt;/span&gt;, 
then from countable additivity the probability measure for all integers is &lt;span class="math"&gt;\(\infty\)&lt;/span&gt;,
which is also contrary to the fact that the probability measure for the whole set is 1.
Coming back to the problem mentioned in the title, 
it essentially makes the assumption there there exists a probability measure on
nature numbers such that each the measure on each number is the same. 
From my previous argument we know such a probability measure does not exist, 
thus this problem is nonsense. 
Bummer! What is the ELEGANT solution? &lt;/p&gt;
&lt;p&gt;A reframed (valid) question is as follows.&lt;/p&gt;
&lt;p&gt;Let &lt;span class="math"&gt;\(n\)&lt;/span&gt; be a (large) positive integer. 
What's the probability that 2 randomly chosen integers 
between (inclusive) 1 and &lt;span class="math"&gt;\(n\)&lt;/span&gt; are relatively prime? 
And does the probability has a limit as &lt;span class="math"&gt;\(n\)&lt;/span&gt; goes to infinity?
If so, what's the limiting probability?&lt;/p&gt;
&lt;p&gt;I will think about how to solve this reframed (valid) question when I have time. 
Possibly the ELEGANT solution mentioned before is a solution to this problem.&lt;/p&gt;
&lt;p&gt;PS: Ask the question that randomly pick an number from all integers, what is the probability
that the number is even. 
I bet most people will answer 0.5.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="random"></category><category term="statistics"></category><category term="nature number"></category><category term="probability"></category><category term="relatively prime"></category><category term="fun problems"></category></entry><entry><title>How Many Balls Do We Need?</title><link href="http://www.legendu.net/en/blog/how-many-balls-do-we-need/" rel="alternate"></link><published>2012-07-10T00:00:00-07:00</published><updated>2012-07-10T00:00:00-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2012-07-10:/en/blog/how-many-balls-do-we-need/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/ball-box/ball-in-box.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;If we randomly put balls into &lt;span class="math"&gt;\(m(\ge1)\)&lt;/span&gt; boxes until &lt;span class="math"&gt;\(n(\le m)\)&lt;/span&gt; of them are occupied,
what is the expectation of the number of balls needed?&lt;/p&gt;
&lt;p&gt;See my neat solution &lt;a href="http://dclong.github.io/media/ball-box/balls.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left â€¦&lt;/script&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/ball-box/ball-in-box.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;If we randomly put balls into &lt;span class="math"&gt;\(m(\ge1)\)&lt;/span&gt; boxes until &lt;span class="math"&gt;\(n(\le m)\)&lt;/span&gt; of them are occupied,
what is the expectation of the number of balls needed?&lt;/p&gt;
&lt;p&gt;See my neat solution &lt;a href="http://dclong.github.io/media/ball-box/balls.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="statistics"></category><category term="probability"></category><category term="fun problems"></category></entry><entry><title>Number of Records?</title><link href="http://www.legendu.net/en/blog/number-of-records/" rel="alternate"></link><published>2012-07-10T00:00:00-07:00</published><updated>2012-07-10T00:00:00-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2012-07-10:/en/blog/number-of-records/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/records/break-record.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;Suppose there are &lt;span class="math"&gt;\(n\)&lt;/span&gt; distinct numbers &lt;span class="math"&gt;\(x_1,\ldots, x_n\)&lt;/span&gt;,
 and &lt;span class="math"&gt;\(y_1, \ldots, y_n\)&lt;/span&gt; is a random permutations of them.
 If &lt;span class="math"&gt;\(\exists k\)&lt;/span&gt; such that &lt;span class="math"&gt;\(y_k&amp;lt;y_i, \forall 1\le i&amp;lt;k\)&lt;/span&gt;,
 then we say that &lt;span class="math"&gt;\(y_k\)&lt;/span&gt; is a record 
 (we always count &lt;span class="math"&gt;\(y_1\)&lt;/span&gt; as a record).
 What is the expected â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/records/break-record.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;Suppose there are &lt;span class="math"&gt;\(n\)&lt;/span&gt; distinct numbers &lt;span class="math"&gt;\(x_1,\ldots, x_n\)&lt;/span&gt;,
 and &lt;span class="math"&gt;\(y_1, \ldots, y_n\)&lt;/span&gt; is a random permutations of them.
 If &lt;span class="math"&gt;\(\exists k\)&lt;/span&gt; such that &lt;span class="math"&gt;\(y_k&amp;lt;y_i, \forall 1\le i&amp;lt;k\)&lt;/span&gt;,
 then we say that &lt;span class="math"&gt;\(y_k\)&lt;/span&gt; is a record 
 (we always count &lt;span class="math"&gt;\(y_1\)&lt;/span&gt; as a record).
 What is the expected number of records in &lt;span class="math"&gt;\(y_1, \ldots, y_n\)&lt;/span&gt;?&lt;/p&gt;
&lt;p&gt;See my neat solution &lt;a href="http://dclong.github.io/media/records/records.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="statistics"></category><category term="records"></category><category term="probability"></category><category term="permutation"></category><category term="fun problems"></category></entry><entry><title>How Many Empty Boxes?</title><link href="http://www.legendu.net/en/blog/how-many-empty-boxes/" rel="alternate"></link><published>2012-07-08T00:00:00-07:00</published><updated>2012-07-08T00:00:00-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2012-07-08:/en/blog/how-many-empty-boxes/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/ball-box/empty-box.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;If we randomly put &lt;span class="math"&gt;\(n(\ge1)\)&lt;/span&gt; balls into &lt;span class="math"&gt;\(m(\ge1)\)&lt;/span&gt; boxes, 
what is the expectation of the number of empty boxes?&lt;/p&gt;
&lt;p&gt;See my neat answer &lt;a href="http://dclong.github.io/media/ball-box/empty-box.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em â€¦&lt;/script&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/ball-box/empty-box.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;If we randomly put &lt;span class="math"&gt;\(n(\ge1)\)&lt;/span&gt; balls into &lt;span class="math"&gt;\(m(\ge1)\)&lt;/span&gt; boxes, 
what is the expectation of the number of empty boxes?&lt;/p&gt;
&lt;p&gt;See my neat answer &lt;a href="http://dclong.github.io/media/ball-box/empty-box.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="expectation"></category><category term="ball"></category><category term="box"></category><category term="probability"></category><category term="fun problems"></category><category term="statistic"></category></entry></feed>