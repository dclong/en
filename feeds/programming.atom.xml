<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ben Chuanlong Du's Blog - Programming</title><link href="http://www.legendu.net/en/" rel="alternate"></link><link href="http://www.legendu.net/en/feeds/programming.atom.xml" rel="self"></link><id>http://www.legendu.net/en/</id><updated>2019-10-16T09:56:13-07:00</updated><subtitle>And let it direct your passion with reason.</subtitle><entry><title>Runtime Paths in Python</title><link href="http://www.legendu.net/en/blog/runtime-paths-in-python/" rel="alternate"></link><published>2019-10-16T09:56:13-07:00</published><updated>2019-10-16T09:56:13-07:00</updated><author><name>Benjamin Du</name></author><id>tag:www.legendu.net,2019-10-16:/en/blog/runtime-paths-in-python/</id><summary type="html">&lt;p&gt;&lt;code&gt;__file__&lt;/code&gt; is the path of the Python script.
Note that if you make a sybolic link to a Python script and run the symbolic link, 
then &lt;code&gt;__file__&lt;/code&gt; is the path of the symbolic link.
Of course, you can use &lt;code&gt;os.path.realpath&lt;/code&gt; to get real path of files.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;os.getcwd …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;code&gt;__file__&lt;/code&gt; is the path of the Python script.
Note that if you make a sybolic link to a Python script and run the symbolic link, 
then &lt;code&gt;__file__&lt;/code&gt; is the path of the symbolic link.
Of course, you can use &lt;code&gt;os.path.realpath&lt;/code&gt; to get real path of files.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;os.getcwd()&lt;/code&gt; and &lt;code&gt;'.'&lt;/code&gt; returns/represents the path where the Python script was invoked,
which is often different from &lt;code&gt;__file__&lt;/code&gt;.&lt;/p&gt;</content><category term="programming"></category><category term="Python"></category><category term="runtime paths"></category></entry><entry><title>Configuration Scripts for the Blog Project on Notebooks.Ai</title><link href="http://www.legendu.net/en/blog/configuration-scripts-for-the-blog-project-on-notebooks.ai/" rel="alternate"></link><published>2019-10-16T09:52:11-07:00</published><updated>2019-10-16T09:52:11-07:00</updated><author><name>Benjamin Du</name></author><id>tag:www.legendu.net,2019-10-16:/en/blog/configuration-scripts-for-the-blog-project-on-notebooks.ai/</id><summary type="html">&lt;p&gt;Run the following command to configure the &lt;code&gt;blog&lt;/code&gt; project on &lt;notebooks.ai&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -sSL www.legendu.net/media/notebooks.ai.sh &lt;span class="p"&gt;|&lt;/span&gt; bash
&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Run the following command to configure the &lt;code&gt;blog&lt;/code&gt; project on &lt;notebooks.ai&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -sSL www.legendu.net/media/notebooks.ai.sh &lt;span class="p"&gt;|&lt;/span&gt; bash
&lt;/pre&gt;&lt;/div&gt;</content><category term="programming"></category><category term="notebooks.ai"></category><category term="blog"></category><category term="configuration script"></category></entry><entry><title>String in Python</title><link href="http://www.legendu.net/en/blog/string-in-python/" rel="alternate"></link><published>2019-08-30T22:30:27-07:00</published><updated>2019-08-30T22:30:27-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2019-08-30:/en/blog/string-in-python/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;\&lt;/code&gt; needs to be escaped (i.e., use &lt;code&gt;\\&lt;/code&gt;) in triple quotes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are a few ways to write a long string in Python.
    The first way is of course to have the long string on the the same line,
    which can be ugly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;long_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;This is a very looooooooooooooooooooooooooooooooooooooooooooooooooooooong string.&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;\&lt;/code&gt; needs to be escaped (i.e., use &lt;code&gt;\\&lt;/code&gt;) in triple quotes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are a few ways to write a long string in Python.
    The first way is of course to have the long string on the the same line,
    which can be ugly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;long_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;This is a very looooooooooooooooooooooooooooooooooooooooooooooooooooooong string.&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The second way is to use &lt;code&gt;+&lt;/code&gt; to concatenate multiple string,
which is not recommended.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;long_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;This is a very&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;loooooooooooooooooooooooooooooooooooong string.&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The third way is to use triple quotes.
However,
whites spaces are kept literally in a triple-qutoe string,
which might not be what you want.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;long_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;This is a very&lt;/span&gt;
&lt;span class="s1"&gt;    loooooooooooooooooooooooooooooooooooooong string.&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The fourth way is to use parentheses which avoids the side effect of white spaces.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;long&lt;/span&gt; &lt;span class="n"&gt;_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;This is a very&amp;#39;&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;looooooooooooooooooooooooooooooooooooong string.&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The last way is to use &lt;code&gt;\&lt;/code&gt; to break a string into multiple lines
if you don't like the parentheses way.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;long_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;This is a very&amp;#39;&lt;/span&gt; \
    &lt;span class="s1"&gt;&amp;#39;looooooooooooooooooooooooooooooooooong string.&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Since the &lt;code&gt;str&lt;/code&gt; class is immutable in Python,
    no method of the &lt;code&gt;str&lt;/code&gt; class is in-place.
    Instead,
    all methods of the &lt;code&gt;str&lt;/code&gt; class returns a new copy of string.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The method &lt;code&gt;str.capitalize&lt;/code&gt; capitalizes the first letter of a string.
    The method &lt;code&gt;str.title&lt;/code&gt; capitalizes each word.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The method &lt;code&gt;str.replace&lt;/code&gt; replaces an old string with a new string.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There is no method named &lt;code&gt;contains&lt;/code&gt; in the &lt;code&gt;str&lt;/code&gt; class.
    You can either use the &lt;code&gt;in&lt;/code&gt; keyword (preferred)
    or &lt;code&gt;str.find&lt;/code&gt; to perform substring match.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a b&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# or&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;a b&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="string-prefix"&gt;String Prefix&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;b&lt;/code&gt;, &lt;code&gt;r&lt;/code&gt;, &lt;code&gt;u&lt;/code&gt; and &lt;code&gt;f&lt;/code&gt; are supported prefixes for strings in Python. 
    Notice that prefixes &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;r&lt;/code&gt; can be used together. &lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="f-string"&gt;f-String&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Be careful about security holes in f-String. 
  Since f-String can run any code passed to it, 
  it is open to injection attack. 
  Avoid using f-String when user input involved.&lt;/li&gt;
&lt;/ol&gt;</content><category term="programming"></category><category term="Python"></category><category term="string"></category><category term="str"></category><category term="character"></category></entry><entry><title>Parallel Computing in Different Programming Languages</title><link href="http://www.legendu.net/en/blog/summary-parallel-computing/" rel="alternate"></link><published>2019-04-28T11:50:22-07:00</published><updated>2019-04-28T11:50:22-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2019-04-28:/en/blog/summary-parallel-computing/</id><summary type="html">&lt;p&gt;There many different ways for parallel computing. 
This article focus on multithreading computing.
Generally speaking, commercial softwares have very good support for parallel computing. 
For example, Mathematica, MATLAB and Revolution R all have solid support for parallel computing. 
Mathematica and MATLAB also have good support for GPU computing. &lt;/p&gt;
&lt;h2 id="python"&gt;Python&lt;/h2&gt;
&lt;p&gt;Multithreading …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There many different ways for parallel computing. 
This article focus on multithreading computing.
Generally speaking, commercial softwares have very good support for parallel computing. 
For example, Mathematica, MATLAB and Revolution R all have solid support for parallel computing. 
Mathematica and MATLAB also have good support for GPU computing. &lt;/p&gt;
&lt;h2 id="python"&gt;Python&lt;/h2&gt;
&lt;p&gt;Multithreading does not speed up computation in Python due to GIL. 
An alternative way use multiprocessing (using the &lt;code&gt;multiprocessing&lt;/code&gt; library) in Python.
This is contrarary to most other programming languages which encourages multithreading rather than multiprocessing 
as processes are much heavier than thread and communication among processes are harder than communications among threads.
Despite this, &lt;code&gt;multiprocess.Pool.map&lt;/code&gt; makes parallel computing real easy in Python.&lt;/p&gt;
&lt;h2 id="parallel-computing-in-bash"&gt;&lt;a href="http://www.legendu.net/misc/blog/parallel-computing-in-bash/"&gt;Parallel Computing in Bash&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id="mathematica"&gt;Mathematica&lt;/h2&gt;
&lt;p&gt;In Mathematica,&lt;br&gt;
there are a bunch of functions starting with "Parallel" 
(e.g., &lt;code&gt;ParallelTable&lt;/code&gt;, &lt;code&gt;ParallelSubmit&lt;/code&gt;, etc) for the purpose of parallel computing. 
If I remember correctly, 
one has to distribute a user-defined function to kernels manually before you can use it for parallel computing in Mathmatica 7 and earlier. 
In Mathematica 8+, 
user-defined functions are automatically distributed to kernels 
so that you can use your own function for parallel computing directly, 
which is very convenient. 
Actually, 
Mathematica is the most convenient one to do parallel computing among all programming languages mentioned in this post, 
but at the cost of effciency of parallel computing. 
Mathematica is famous for its intellegency but also nutorious (at least I think so) for running slow. 
It is the most smart but also the slowest programming languages among all programming languages 
that I have ever used (not just these mentioned in this post). 
It is probably safe to say that Mathematica is the slowest programming language. 
The more convenient a language is, the slower it is generally speaking. 
It is hard to get both. 
A way to improve the speed of Mathematica code is 
to compile the code to C code or some other code that is more efficient to run. 
I will not go deeply into this since it is not the main purpose of this post.&lt;/p&gt;
&lt;h2 id="matlab"&gt;MATLAB&lt;/h2&gt;
&lt;p&gt;There are several ways to do parallel computing in MATLAB. 
The one I know (and is probably the easiest way) is to use &lt;code&gt;parfor&lt;/code&gt; instead of &lt;code&gt;for&lt;/code&gt; in loops. 
If there is only 1 thread, 
&lt;code&gt;parfor&lt;/code&gt; works in serial. 
To better use &lt;code&gt;parfor&lt;/code&gt; for parallel computing, 
you have to learn some concept about different kinds of variables, 
e.g., slicing variables, reduced variables, etc.
Understanding these concept helps you write better parallel code, 
and it help debugging if your code does not work. 
To let &lt;code&gt;parfor&lt;/code&gt; use multiple threads, 
you must open the matlabpool manually. 
For example, 
to use the local host for parallel computing, 
you use the following command to initilize a pool with 8 workers 
(I assume the computer has 8 cores). &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;matlabpool&lt;/span&gt; &lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;parfor&lt;/code&gt; in MATLAB works like a charm most of the time. 
Consider the fact that MATLAB code is very fast compared to other scripting languages, 
it is a good choice for heavy numeric computing.&lt;br&gt;
However, 
for some reason I am not sure about (probably bug in MATLAB interpreter), 
sometimes even very simple parallel code does not work. 
If this is happens, 
it is usually not easy to get if fixed. What you try is to change reduced variables to a slicing variable, 
and operate on the slicing variable after parallel computing. 
Another annoying thing I met when doing parallel computing in MATLAB was that 
sometimes the exactly same code did not work on another machine with the same version of MATLAB. 
I was not sure what caused the problem, 
but I found that it was related to functions end with &lt;code&gt;rnd&lt;/code&gt; 
(random number generating functions) I used in the code. 
There are some old version functions starting with &lt;code&gt;rand&lt;/code&gt; for generating random numbers, 
which are more robust and always works well in parallel computing.&lt;/p&gt;
&lt;h2 id="r"&gt;R&lt;/h2&gt;
&lt;p&gt;R (not talking about Revolution R) has many packages for parallel computing.
Actually there are too many and thus make people confused about where to get started. 
Fortunately, the company of Revolution R contributed some packages to CRAN to make parallel computing in R unified. 
It is similar to &lt;code&gt;parfor&lt;/code&gt; in MATLAB. 
You use &lt;code&gt;foreach&lt;/code&gt; together with &lt;code&gt;%dopar%&lt;/code&gt; to do parallel computing. 
To do this, 
you must first register a backend for it. 
The following simple example does parallel computing using package "doMC" as the backend of &lt;code&gt;foreach&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doMC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;registerDoMC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10000&lt;/span&gt;
&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nf"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%dopar%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="m"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;%%&lt;/span&gt; &lt;span class="m"&gt;31&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can use package "snow" as the backend if you have access to a cluster.
In R, 
you do not have to worry about different kind of variables. 
Variables outside the &lt;code&gt;foreach&lt;/code&gt; loop are shared among threads, 
and &lt;code&gt;foreach&lt;/code&gt; returns a list of results corresponding to each iteration. 
Surely access variables outside the &lt;code&gt;foreach&lt;/code&gt; loop
make the parallel compting less efficient. 
A better way is to let &lt;code&gt;foreach&lt;/code&gt; return a list of results and then operate on the list. 
Sometimes, 
when you do parallel computing in R, 
the program does not speedup as you expect. 
This is probably because some functions you used has already been implemented in parallel. 
Notice that &lt;code&gt;foreach&lt;/code&gt; is not just for parallel computing. 
Even if you do serial computing, you can still use &lt;code&gt;foreach&lt;/code&gt; with &lt;code&gt;%dopar%&lt;/code&gt; replaced by &lt;code&gt;%do%&lt;/code&gt;. 
It is usually faster than the &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt;
&lt;h2 id="java-c"&gt;Java &amp;amp; C++&lt;/h2&gt;
&lt;p&gt;Both Java and C/C++ support multithreading directly. 
The concept of multithreading computing in these two languages are similar. 
You have to create multiple threads, 
and let each of them run part of the job.
Java has a better support for multithreading in the sense that its standard library supports thread pool. 
There is still no directly support of thread pool in C++11. 
You have to non-standard libraries for this purpose. 
For scientific computing (e.g. statistical simulations), 
it is usually every easy to partition the work by yourself 
and assign them to different threads so that a thread pool is not essential.
For example, 
if you want to do a simulation of 1000 runs, you can create &lt;code&gt;k&lt;/code&gt; threads, 
assign the first &lt;code&gt;1000/k&lt;/code&gt; runs to the first threads, 
assgin the second &lt;code&gt;1000/k&lt;/code&gt; runs to the second threads, 
and so on and so forth.
To share data between different threads, 
usually you have to lock and unlock shared resources. 
In Java, 
this can be done through &lt;code&gt;ReentrantLock&lt;/code&gt; class or &lt;code&gt;synchronized&lt;/code&gt; methods.
In C/C++ this can be done through &lt;code&gt;mutex&lt;/code&gt;. 
Details about multithreading computing in these two languages is beyond the scope of this post. 
For more information about multithreading in Java, 
you can refer to the book &lt;code&gt;Big Java&lt;/code&gt; which is really easy to follow, 
and "C++ Concurrency in Action" is a good book about multithreading for C++. &lt;/p&gt;
&lt;p&gt;Finally, 
I want to mention that not all computing job is suitable for parallel computing. 
The more comminication threads has to make, 
the more dependent the jobs are, the less efficient the parallel computing is. 
In statistical simulations, 
random numbers are usually generated in serial 
(though there are parallel algorithm for random number generating, the popular RNGs are usually serial). 
If a simulation is mostly about generating random numbers, 
it is probably non-benefitial to do parallel computing.&lt;/p&gt;</content><category term="Mathematica"></category><category term="lock"></category><category term="programming"></category><category term="C/C++"></category><category term="thread"></category><category term="Java"></category><category term="HPC"></category><category term="parallel"></category><category term="R"></category><category term="concurrency"></category><category term="mutex"></category><category term="GPU Computing"></category></entry><entry><title>Read PDF in Ruby</title><link href="http://www.legendu.net/en/blog/ruby-read-pdf/" rel="alternate"></link><published>2019-04-18T17:57:21-07:00</published><updated>2019-04-18T17:57:21-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2019-04-18:/en/blog/ruby-read-pdf/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/ruby/ruby.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;"pdf-reader" is a good Ruby libary for reading pdf document. 
You can install it via RubyGems using the following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You have to load the library before you use it. 
To load it, use the command below. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pdf-reader&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For more information, see the &lt;a href="https://github.com/yob/pdf-reader"&gt;project …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/ruby/ruby.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;"pdf-reader" is a good Ruby libary for reading pdf document. 
You can install it via RubyGems using the following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You have to load the library before you use it. 
To load it, use the command below. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pdf-reader&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For more information, see the &lt;a href="https://github.com/yob/pdf-reader"&gt;project on GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="library"></category><category term="programming"></category><category term="package"></category><category term="PDF"></category><category term="Ruby"></category></entry><entry><title>Select Columns from Structured Text Files</title><link href="http://www.legendu.net/en/blog/select-columns-from-structured-text-files/" rel="alternate"></link><published>2018-01-01T16:15:21-08:00</published><updated>2018-01-01T16:15:21-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2018-01-01:/en/blog/select-columns-from-structured-text-files/</id><summary type="html">&lt;h2 id="python-pandas"&gt;Python pandas&lt;/h2&gt;
&lt;p&gt;My first choice is pandas in Python. 
However, 
below are some tools for quick and dirty solutions.&lt;/p&gt;
&lt;h2 id="q"&gt;&lt;a href="https://github.com/harelba/q"&gt;q&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;q -t -H &lt;span class="s1"&gt;&amp;#39;select c1, c3 from file.txt&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="cut"&gt;cut&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cut -d&lt;span class="se"&gt;\t&lt;/span&gt; -f1,3 file.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="awk"&gt;awk&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;awk -F&lt;span class="s1"&gt;&amp;#39;\t&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{print $1 &amp;quot;\t&amp;quot; $3}&amp;#39;&lt;/span&gt; file.tsv 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note: neither &lt;code&gt;cut …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;h2 id="python-pandas"&gt;Python pandas&lt;/h2&gt;
&lt;p&gt;My first choice is pandas in Python. 
However, 
below are some tools for quick and dirty solutions.&lt;/p&gt;
&lt;h2 id="q"&gt;&lt;a href="https://github.com/harelba/q"&gt;q&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;q -t -H &lt;span class="s1"&gt;&amp;#39;select c1, c3 from file.txt&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="cut"&gt;cut&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cut -d&lt;span class="se"&gt;\t&lt;/span&gt; -f1,3 file.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="awk"&gt;awk&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;awk -F&lt;span class="s1"&gt;&amp;#39;\t&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{print $1 &amp;quot;\t&amp;quot; $3}&amp;#39;&lt;/span&gt; file.tsv 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note: neither &lt;code&gt;cut&lt;/code&gt; nor &lt;code&gt;awk&lt;/code&gt; honors escaped characters.
For working on complicated structured text files, 
pandas in Python is a much better solution.&lt;/p&gt;</content><category term="programming"></category><category term="Python"></category><category term="pandas"></category><category term="SQL"></category><category term="awk"></category><category term="cut"></category><category term="text file"></category><category term="data manipulation"></category><category term="column"></category><category term="field"></category></entry><entry><title>Run JAR Applications</title><link href="http://www.legendu.net/en/blog/run-jar-applications/" rel="alternate"></link><published>2017-10-22T12:17:00-07:00</published><updated>2017-10-22T12:17:00-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2017-10-22:/en/blog/run-jar-applications/</id><summary type="html">&lt;p&gt;If there is only 1 class with a main method
or if there is a Main-Class defined for the JAR,
you can use the following command to run the application.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you there are multiple classes with main methods in the JAR, 
you can execute any …&lt;/p&gt;</summary><content type="html">&lt;p&gt;If there is only 1 class with a main method
or if there is a Main-Class defined for the JAR,
you can use the following command to run the application.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you there are multiple classes with main methods in the JAR, 
you can execute any of them using the commands below. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cp&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mycomp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;myproj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AnotherClassWithMainMethod&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="programming"></category><category term="Java"></category><category term="JAR"></category><category term="main"></category></entry><entry><title>Develop R Packages Using "roxygen2"</title><link href="http://www.legendu.net/en/blog/develop-r-packages-using-roxygen2/" rel="alternate"></link><published>2017-07-27T12:41:29-07:00</published><updated>2017-07-27T12:41:29-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2017-07-27:/en/blog/develop-r-packages-using-roxygen2/</id><summary type="html">&lt;p&gt;You have to install the R package &lt;code&gt;roxygen2&lt;/code&gt; first.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;install.packages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;roxygen2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Roxygenize the package for compiling.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;roxygen2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;roxygenize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path_to_package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The following are some roxygen2 tags that I use frequently for writing R packages.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Some R example code can take a long time to run. 
    To prevent the illustration …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;You have to install the R package &lt;code&gt;roxygen2&lt;/code&gt; first.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;install.packages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;roxygen2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Roxygenize the package for compiling.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;roxygen2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;roxygenize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path_to_package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The following are some roxygen2 tags that I use frequently for writing R packages.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Some R example code can take a long time to run. 
    To prevent the illustration code from running 
    when checking the package, 
    you can surround the example code with &lt;code&gt;\dontrun{}&lt;/code&gt;.
    The following is such an example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; @examples&lt;/span&gt;
&lt;span class="s1"&gt;#&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;dontrun&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; rnorm(100000)&lt;/span&gt;
&lt;span class="s1"&gt;#&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, 
be careful that it is &lt;code&gt;@examples&lt;/code&gt; not &lt;code&gt;@example&lt;/code&gt;. 
If you accidentally use &lt;code&gt;@example&lt;/code&gt;, 
then you will get errors like &lt;code&gt;file cannot be open (or doesn't exist) ...&lt;/code&gt;
when you check the R package. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By default roxygen2 does not export a function. To export a function
    so that package users can use it, add tag &lt;code&gt;@export&lt;/code&gt; before the definition
    of the function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the tag &lt;code&gt;@title&lt;/code&gt; to specify the title of a help document. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the tag &lt;code&gt;@description&lt;/code&gt; to start the description part of a help document.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To import a package, use the tag &lt;code&gt;@import pkg_name&lt;/code&gt;. To import &lt;code&gt;fun1&lt;/code&gt; 
    and &lt;code&gt;fun2&lt;/code&gt; from a package, use the tag &lt;code&gt;@importFrom pkg_name fun1 fun2&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By default roxygen2 creates a Rd document for each exported function
    with the same name as the function name. 
    You can use the tag &lt;code&gt;@rdname&lt;/code&gt; to override the name of the Rd document.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Roxygen parses comments that start with &lt;code&gt;#'&lt;/code&gt;. 
    Comment start with &lt;code&gt;#&lt;/code&gt; but not &lt;code&gt;#'&lt;/code&gt; won't be parsed.
    You can take advantage of this to put comment that do not need to parsed into lines starting with &lt;code&gt;#&lt;/code&gt; but not &lt;code&gt;#'&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="compile-and-install-r-packages"&gt;Compile and Install R Packages&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Compile and install package on Windows.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="n"&gt;INSTALL&lt;/span&gt; &lt;span class="c1"&gt;--build package_dir&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice that &lt;code&gt;INSTALL&lt;/code&gt; must be in upper case.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The following LaTex packages &lt;code&gt;texlive&lt;/code&gt;, &lt;code&gt;texinfo&lt;/code&gt; and &lt;code&gt;texlive-fonts-extra&lt;/code&gt; (on Linux) 
    are need to compile R packages 
    if you want to generate and check PDF manuals. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;wajig&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;texlive&lt;/span&gt; &lt;span class="n"&gt;texinfo&lt;/span&gt; &lt;span class="n"&gt;texlive&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;fonts&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;extra&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you do not want (or have permissions) to install them,
you can compile R packages without generating PDF manuals.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="c1"&gt;--no-manual ...&lt;/span&gt;
&lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="k"&gt;check&lt;/span&gt; &lt;span class="c1"&gt;--no-manual ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For more details on R package build options, 
please refer to the post 
&lt;a href="https://support.rstudio.com/hc/en-us/articles/200486518-Customizing-Package-Build-Options"&gt;Customizing Package Build Options&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="R"></category><category term="package"></category><category term="programming"></category><category term="tags"></category><category term="CRAN"></category><category term="roxygen2"></category><category term="develop"></category></entry><entry><title>Extensions for Java</title><link href="http://www.legendu.net/en/blog/extensions-for-java/" rel="alternate"></link><published>2017-06-11T12:02:00-07:00</published><updated>2017-06-11T12:02:00-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2017-06-11:/en/blog/extensions-for-java/</id><summary type="html">&lt;p&gt;&lt;a href="https://bitbucket.org/dclong/java_learn/src/1d6428249cae93dc7ad6ca61fa93479dcc7390fc/src/study/access?at=master"&gt;Here&lt;/a&gt; 
are some code examples for the following topics.&lt;/p&gt;
&lt;h2 id="java-native-interface"&gt;Java Native Interface&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;You can call native code (typically C, C++ or Fortran) in Java using the Java Native Interface (JNI). 
For the code implemented in native code, 
you must use keyword "native" to tell the compiler that it is implemented …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://bitbucket.org/dclong/java_learn/src/1d6428249cae93dc7ad6ca61fa93479dcc7390fc/src/study/access?at=master"&gt;Here&lt;/a&gt; 
are some code examples for the following topics.&lt;/p&gt;
&lt;h2 id="java-native-interface"&gt;Java Native Interface&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;You can call native code (typically C, C++ or Fortran) in Java using the Java Native Interface (JNI). 
For the code implemented in native code, 
you must use keyword "native" to tell the compiler that it is implemented outside Java. 
Also, 
you should surround the Java code which load the compile native code in &lt;code&gt;static{}&lt;/code&gt; 
(i.e. static initialized). 
This will get executed when Java load the class. 
For more information, please refer to Calling C library Routines from Java.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="java-native-access"&gt;Java Native Access&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Java Native Access is a more convenient way to call native code than the Java Native Interface.
It is based on Java Native Interface.&lt;/li&gt;
&lt;/ol&gt;</content><category term="JNI"></category><category term="JNA"></category><category term="extension"></category><category term="Java"></category><category term="programming"></category></entry><entry><title>Zero-length Vector Issue in R</title><link href="http://www.legendu.net/en/blog/zero-length-vector-issue-in-R/" rel="alternate"></link><published>2017-04-10T19:21:27-07:00</published><updated>2017-04-10T19:21:27-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2017-04-10:/en/blog/zero-length-vector-issue-in-R/</id><summary type="html">&lt;p&gt;The corner case of 0-length vectors is not well considered in R. 
It causes issues in several situations. 
First, &lt;code&gt;1:n&lt;/code&gt; is probably not what you want when &lt;code&gt;n = 0&lt;/code&gt;. 
Second, &lt;code&gt;df$col = 0&lt;/code&gt; throws error when &lt;code&gt;df&lt;/code&gt; is an empty (0 row) data frame.
To avoid these issues, 
it …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The corner case of 0-length vectors is not well considered in R. 
It causes issues in several situations. 
First, &lt;code&gt;1:n&lt;/code&gt; is probably not what you want when &lt;code&gt;n = 0&lt;/code&gt;. 
Second, &lt;code&gt;df$col = 0&lt;/code&gt; throws error when &lt;code&gt;df&lt;/code&gt; is an empty (0 row) data frame.
To avoid these issues, 
it is suggested that you write more robust R code. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# use &lt;/span&gt;
&lt;span class="nf"&gt;seq_len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# instead of &lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# use &lt;/span&gt;
&lt;span class="nf"&gt;for &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="nf"&gt;seq_len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kc"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# instead of &lt;/span&gt;
&lt;span class="nf"&gt;for &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kc"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# use &lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;rep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;nrow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# instead of &lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;             
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Strings function in base R do not behavior well when zero-length vectors are involved. 
For example, 
&lt;code&gt;paste('a', character(0))&lt;/code&gt; returns a character vector of length 1 
rather than length 0. 
Functions in the &lt;code&gt;stringi&lt;/code&gt; packages works well when zero-length vectors are involved.
For example, the code below returns a 0-length vector.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stringi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;+%&lt;/span&gt; &lt;span class="nb"&gt;character&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is suggested that you always use string functions in the &lt;code&gt;stringi&lt;/code&gt; package 
rather than string functions in base R.&lt;/p&gt;</content><category term="programming"></category><category term="CRAN"></category><category term="R"></category><category term="issue"></category><category term="trick"></category><category term="trap"></category><category term="vector"></category><category term="zero-length"></category><category term="0-length"></category></entry><entry><title>Traps in R</title><link href="http://www.legendu.net/en/blog/traps-in-r/" rel="alternate"></link><published>2017-04-09T23:47:21-07:00</published><updated>2017-04-09T23:47:21-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2017-04-09:/en/blog/traps-in-r/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.legendu.net/en/blog/zero-length-vector-issue-in-R/"&gt;Zero-Length Vector Issue in R&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A really tricky problem about is global and local variables. 
You can use any global variable in a user-defined function, 
which is true at least in R with version 2.13 or older. 
For example if you have defined a global variable &lt;code&gt;a&lt;/code&gt;, 
you can …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.legendu.net/en/blog/zero-length-vector-issue-in-R/"&gt;Zero-Length Vector Issue in R&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A really tricky problem about is global and local variables. 
You can use any global variable in a user-defined function, 
which is true at least in R with version 2.13 or older. 
For example if you have defined a global variable &lt;code&gt;a&lt;/code&gt;, 
you can use variable &lt;code&gt;a&lt;/code&gt; directly in user-defined functions. 
However, 
you cannot use &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;-&lt;/code&gt; or &lt;code&gt;-&amp;gt;&lt;/code&gt; to mutate global variables. 
Whenever you use these three operators, 
R thinks that you're either creating a new variable 
(if the variable is not defined before), 
or you're updating the value of an existing variable 
(if the variable already exists). 
For example, 
suppose there's still a global variable &lt;code&gt;a&lt;/code&gt; in the R workspace. 
You can use variable &lt;code&gt;a&lt;/code&gt; directly in user-defined functions, 
but if you use &lt;code&gt;a=2&lt;/code&gt; (or &lt;code&gt;a&amp;lt;-2&lt;/code&gt; or &lt;code&gt;2-&amp;gt;a&lt;/code&gt;) in the user-defined function, 
R won't think that you're updating the value of the global variable, 
instead it things that you're creating a new local variable &lt;code&gt;a&lt;/code&gt;. 
For this reason, 
if a global variable &lt;code&gt;a&lt;/code&gt; exists 
while there's no local variable &lt;code&gt;a&lt;/code&gt; in a user-defined function, 
error message will be shown if you use &lt;code&gt;a[1]=1&lt;/code&gt; (or other equivalent ways)
and try to run the function, 
because by doing this you're telling R 
that you want to update the value of the first element of local variable &lt;code&gt;a&lt;/code&gt; 
but local variable &lt;code&gt;a&lt;/code&gt; doesn't exist. 
If you really want to update the value of (or create) a global variable 
in a user-defined function, 
you should use operator &lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;&amp;lt;-&lt;/code&gt;. 
For example, 
if you want to update the value of global variable &lt;code&gt;a&lt;/code&gt;, 
you can use &lt;code&gt;a&amp;lt;&amp;lt;-2&lt;/code&gt; (or &lt;code&gt;2-&amp;gt;&amp;gt;a&lt;/code&gt;). 
Now you have seen that global variables can screw the execution result 
of your own defined function easily. 
The situation can become even trickier and thus harder to debug, 
if you define a local variable in a branch 
(e.g. a branch of &lt;code&gt;if()...else...&lt;/code&gt; statement) of the code 
while forget to define the same local variable in other branches 
and at the same time a global variable with the same name exists. 
My suggestion is that you first remove all global variables 
in the R workspace if there is any, 
and then run your program. 
In this way,
you can avoid confusion resulting from global variables.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Always be careful when there is an operation based on two vectors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sequence operator (&lt;code&gt;:&lt;/code&gt;) has a higher priority over arithmetic operators (&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;), 
but a lower priority than the power operator (&lt;code&gt;^&lt;/code&gt;) and element operator (&lt;code&gt;[]&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Expression &lt;code&gt;2^1^2&lt;/code&gt; is calculated from right to left in R.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avoid use function &lt;code&gt;median&lt;/code&gt; if you can, 
because it returns two numbers when the vector has an even number of elements, 
which is usually not what statisticians want 
and might result in serious problems in many cases. 
Actually we can always use &lt;code&gt;quantile(x,prob=0.5)&lt;/code&gt; to get the median of vector &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For functions which takes &lt;code&gt;...&lt;/code&gt; as one of its parameters, 
we have to be very careful.
Because this kind of functions accept any number and any kind of parameters. 
So sometime you think that you are passing values to some argument of a function, 
but actually not. 
For example if you use &lt;code&gt;seq(0,100,step=2)&lt;/code&gt; you might be in trouble. 
The right command that works in this situations can be &lt;code&gt;seq(0,100,by=2)&lt;/code&gt;.
Nowadays, 
there are many different programming languages, 
and all of them have their own advantages and disadvantages. 
So we might have learned several different programming languages. 
And we are probably told not to remember all functions by heart, 
instead, we can check the syntax of functions when we have to use them. 
This is an efficient way which is also my way to learn programming languages.
However, 
this might can lead to problems sometimes. 
Because we're lazy, 
we might just guess syntax of functions that we're going to use. 
This is not a big problem in complied languages, 
because anyway the syntax will be checked later 
and what is more usually we have good editors to help us (e.g. eclipse for Java). 
R is a interpreted language, 
so even if there're syntax errors you might can still run it. 
And because of high flexibility of R, 
it is very hard to editor for R to find these tricky mistakes. 
So if we can, 
we should always at least check the arguments of the functions 
we are going to use in R. 
A simple way is just to use function &lt;code&gt;args&lt;/code&gt;. 
If we have used &lt;code&gt;args&lt;/code&gt; to check the arguments of function &lt;code&gt;seq&lt;/code&gt;, 
then the chance for us to make the mistakes mentioned above is very small. 
Also it is recommended to always pass arguments to functions 
using argument names, 
i.e., 
using the form &lt;code&gt;argname1=argvalue1&lt;/code&gt; to pass arguments to functions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To get the length of a vector, 
you can use &lt;code&gt;length&lt;/code&gt;. 
However, 
to get the length of a string, 
you should use &lt;code&gt;nchar&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;round&lt;/code&gt; in use the close even number strategy which might not what you expect, 
so be careful when you use it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In a &lt;code&gt;for&lt;/code&gt; loop, 
the loop vector is immutable while the loop is running. 
This means that R calculates the loop vector only once, 
an for this reason, feel free to ...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is often that one want to build a larger array based on small arrays. 
For example, 
one build a 3-D array by repeating a 2-D matrix. 
You should be careful if the "matrix" you used is obtained by reading data from a file, 
because it's really a data frame often times. 
All elements in an array have the same type, 
while elements in a data frame do not have to share the same type. 
For this reason, 
it is really inefficient to build an array based on a data frame 
(if even all columns of the data frame share the same type). 
If you do this for a large data frame, 
R can choke. 
A good way is to first convert the data frame to a matrix using &lt;code&gt;as.matrix&lt;/code&gt;, 
and then build the array you want based on the matrix.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;R runs commands in &lt;code&gt;Rprofile.site&lt;/code&gt;, 
then loads the save image (if any), 
and then runs &lt;code&gt;.First&lt;/code&gt; (if exists). 
This means that if you want to run something which depends the R image, 
you must put it into the &lt;code&gt;.First&lt;/code&gt; instead of &lt;code&gt;Rprofile.site&lt;/code&gt;. 
However, 
it seems that there is a bug with Rstudio (at least before version 0.94), 
who does not follow the above order when it starts R.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Usually the number of levels of a factor equals the number of distinct elements in the factor, 
however, 
it doesn't have to be.
Except factitious ones, 
the situation that the two quantities are not the same usually happens 
after subsetting a data frame or factor. 
If the number of levels of a factor is not the same 
with the number of its distinct elements, 
you can apply &lt;code&gt;factor&lt;/code&gt; on itself to get a factor with the two quantities identical.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Never use a factor for the index of subsetting, 
because if used it will be coerced to an integer vector 
which is usually not what people expect.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;R allows lazy evaluation to some extent, 
e.g., 
as almost all other languages do, 
boolean expression in R are evaluated using lazy evaluation. 
What is more important is that missing arguments are allowed for R functions 
(i.e. you do not have to pass values to some arguments, 
and everything runs OK as long as missing arguments are not involved in computing), 
and missing arguments can even be further passed to sub-functions 
(Everything runs OK as long as missing arguments are never used in computing). 
Here is an illustration.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exact&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;na.rm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exact&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nf"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="n"&gt;^2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;stats&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;na.rm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;na.rm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;667&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, 
R does not fully support lazy evaluation, 
and you shall not expect code involve advanced lazy evaluation 
(need an example there ...) to work well. 
Part of the reason for not supporting advanced lazy evaluation in R 
is that it invites many problems and can probably result in fetal mistakes.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Because of the way that computers stores double values, 
there are always tiny storing errors associated with double values. 
So if you want to compare whether a double value belongs to a range 
(a point is a closed interval with equal limts), 
you can change the limits (depends on what your want to do) 
of the range slightly to avoid storing errors.&lt;/li&gt;
&lt;/ol&gt;</content><category term="R"></category><category term="global variable"></category><category term="programming"></category><category term="traps"></category><category term="CRAN"></category></entry><entry><title>Tips for Markdown</title><link href="http://www.legendu.net/en/blog/markdown-tips/" rel="alternate"></link><published>2017-04-03T18:54:28-07:00</published><updated>2017-04-03T18:54:28-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2017-04-03:/en/blog/markdown-tips/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/markdown/markdown.gif" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Jekyll interprete contents in two nested curly brackets as a variable 
(white spaces around the vairable are trimmed).
For example, if we have &lt;code&gt;{{ abcd }}&lt;/code&gt; in the markdown code, 
then &lt;code&gt;abcd&lt;/code&gt; is interpreted as a variable.
So you should avoid using two nested braces for other purpose in Markdown code, 
otherwise …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/markdown/markdown.gif" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Jekyll interprete contents in two nested curly brackets as a variable 
(white spaces around the vairable are trimmed).
For example, if we have &lt;code&gt;{{ abcd }}&lt;/code&gt; in the markdown code, 
then &lt;code&gt;abcd&lt;/code&gt; is interpreted as a variable.
So you should avoid using two nested braces for other purpose in Markdown code, 
otherwise, 
Jekyll might fail to build your web pages. 
If you do want to dispaly two nested curly brackets, 
you can either insert a space between the two left curly brackets and the two
right curly brackets. Also you can also put it into a literal block (might be 
changed to raw later). There are also other preserved symbol combinations in Jekyll 
(e.g. { followed by %). Use these for other purpose might result in failure of 
building your web pages. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A block indented 4 spaces is treated as a code block in Markdown. 
However, if this block is after a list item, 
you have to indent 8 spaces for it to be treated as code block. 
Indenting 4 spaces means that it is continued part of the list item. 
The addition 4-space means that it is a code block of the list item.
Even though back tildes (see the following examples) can be use specify a code block,
you'd better use the 8-space indentation as back tildes block does not work correctly in list.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;example of code block&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nature numbers in ordred list only indicate order items. 
The actually order of items is according to the order you list them, 
not the order of prefixed nutuarl numbers. 
The values of natural numbers does not matter in ordered list. 
You can use a same nature number if you want. 
Later items do not have to start with bigger nature numbers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Images of format &lt;code&gt;jpg&lt;/code&gt;, &lt;code&gt;png&lt;/code&gt;, &lt;code&gt;gif&lt;/code&gt;, etc. can be embeded in Markdown,
however, PDF images cannot.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To insert a link in Markdown, 
you can use &lt;code&gt;[link name](url)&lt;/code&gt;. 
If you want the url to show up as it is, 
you can use &lt;code&gt;[url](url)&lt;/code&gt;.
However, 
this is not convenient. 
A better way is to use &lt;code&gt;&amp;lt;url&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="latex"&gt;LaTex&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;$$&lt;/code&gt; or &lt;code&gt;\(\)&lt;/code&gt; (depends on configuration) are used for inline LaTex equations usually.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Latex, you have to use &lt;code&gt;\\&lt;/code&gt; instead of &lt;code&gt;\newline&lt;/code&gt; to indicate a new line in equations. 
In contrast, when you use Latex in Markdown, 
you have to use &lt;code&gt;\newline&lt;/code&gt; instead of &lt;code&gt;\\&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In LaTex, you can supress equation numbers using the star version of equation environments
(e.g., &lt;code&gt;align*&lt;/code&gt;). 
However, when you use LaTex in Markdown,
you'd better use &lt;code&gt;\nonumber&lt;/code&gt; to supress equation numbers manually 
instead of using the star version of equation environments. 
This is because &lt;code&gt;*&lt;/code&gt; has special meaning in Markdown.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="Markdown"></category><category term="Jekyll"></category><category term="programming"></category></entry><entry><title>SQL on Text File</title><link href="http://www.legendu.net/en/blog/sql-on-text-file/" rel="alternate"></link><published>2017-02-18T11:57:33-08:00</published><updated>2017-02-18T11:57:33-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2017-02-18:/en/blog/sql-on-text-file/</id><summary type="html">&lt;p&gt;&lt;a href="http://harelba.github.io/q/"&gt;q&lt;/a&gt; is a great tool 
for working on structured text files 
using SQL syntax in command line.&lt;/p&gt;
&lt;h2 id="installation-on-ubuntu"&gt;Installation on Ubuntu&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wajig install python3-q-text-as-data
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="general-tips"&gt;General Tips&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The semantics of &lt;code&gt;q&lt;/code&gt; is identical to &lt;code&gt;sqlite&lt;/code&gt;. 
    &lt;code&gt;q&lt;/code&gt; preserve the original order of rows if no sorting (order by) is applied.
    You force querying …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://harelba.github.io/q/"&gt;q&lt;/a&gt; is a great tool 
for working on structured text files 
using SQL syntax in command line.&lt;/p&gt;
&lt;h2 id="installation-on-ubuntu"&gt;Installation on Ubuntu&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wajig install python3-q-text-as-data
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="general-tips"&gt;General Tips&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The semantics of &lt;code&gt;q&lt;/code&gt; is identical to &lt;code&gt;sqlite&lt;/code&gt;. 
    &lt;code&gt;q&lt;/code&gt; preserve the original order of rows if no sorting (order by) is applied.
    You force querying by the order of insertion 
    by adding an &lt;code&gt;order by rowid&lt;/code&gt; if needed (similar to sqlite).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Output in quote mode does not work well. 
    Double quotes are not escaped.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Joins do not work on files with different separators. 
    You have to convert them to have the same field separator first
    and then perform joins. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If no header, then use c&lt;span class="math"&gt;\(i\)&lt;/span&gt; to stand for the &lt;span class="math"&gt;\(i^{th}\)&lt;/span&gt; column.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="examples"&gt;Examples&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Randomly select 500 records.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;q&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;select * from text_file order by random() limit 5&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sample with acceptance ratio 0.01.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;q&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;select * from text_file where random() % 100 = 0&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;-&lt;/code&gt; to stand the piped in output. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="n"&gt;text_file&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;select * from - where age &amp;amp;lt; 30&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use q to find Docker images without repository names.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;images&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;select c3 from - where c1 = &amp;quot;&amp;amp;lt;none&amp;amp;gt;&amp;quot;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove all images belong to the eclipse organization with the help of sed and q.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;images&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;sed&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;+/&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tH&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;select [image id] from - where repository like &amp;#39;eclipse/%&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;xargs&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;rmi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="alternative-tools"&gt;Alternative Tools&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/dinedal/textql"&gt;textql&lt;/a&gt; (developed in Go) 
    is a very similar tool to &lt;a href="http://harelba.github.io/q/"&gt;q&lt;/a&gt;.
    It has even simplier syntax than q.
    However, 
    it has several disadvantages compared to q.
    First, it is not as actively maintained as q.
    Second, no easy way to install except in Mac (using Homebrew). 
    You have to install from source by yourself in Linux and Windows.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can import text files into database tables and work on them. 
    SQLite3 is a great choice (of embeded database). 
    As a matter of fact, 
    both q and textql are based on SQLite3.
    You can refer to https://www.sqlite.org/cvstrac/wiki?p=ImportingFiles 
    on how to importing files into SQLite3.
    If you prefer a client-server database, 
    you can either MySQL, etc. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="nb"&gt;VarChar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
    &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="nb"&gt;Decimal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;LOAD&lt;/span&gt; &lt;span class="k"&gt;DATA&lt;/span&gt; &lt;span class="n"&gt;INFILE&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/tmp/data.txt&amp;#39;&lt;/span&gt; 
&lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="programming"></category><category term="SQL"></category><category term="structured text"></category><category term="CSV"></category><category term="TSV"></category></entry><entry><title>Install R Packages Behind Proxy on Windows</title><link href="http://www.legendu.net/en/blog/install-r-packages-on-windows-behind-proxy/" rel="alternate"></link><published>2016-12-10T01:57:25-08:00</published><updated>2016-12-10T01:57:25-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2016-12-10:/en/blog/install-r-packages-on-windows-behind-proxy/</id><summary type="html">&lt;p&gt;There are 3 ways to install R packages behind a proxy on Windows.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Download packages and install them locally.
This is generally speaking not recommended 
as it is a hassle to resolve dependencies.
When the package you want to install has no (or very few) dependencies,
you can use this …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;There are 3 ways to install R packages behind a proxy on Windows.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Download packages and install them locally.
This is generally speaking not recommended 
as it is a hassle to resolve dependencies.
When the package you want to install has no (or very few) dependencies,
you can use this way to install it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;setInternet2(use=True)&lt;/code&gt; and then install packages as usual.
This is the recommended way to install R packages behind a proxy on Windows.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select "Internet2" when you are asked to specify standard or Internet2 
during installation of R.
If you have done this during the installation of R,
you can install packages as usually with no need to run &lt;code&gt;setInternet2(use=True)&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you have a proxy server to use, 
you can first setup proxy environment variables 
and then install R packages.
Proxy environment variables can be set using the following code. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;Sys&lt;/span&gt;.&lt;span class="k"&gt;setenv&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;http_proxy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;proxy_server:port&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;Sys&lt;/span&gt;.&lt;span class="k"&gt;setenv&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;https_proxy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;proxy_server:port&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a more general way and is recommended if you have a proxy serve to use.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that working in a Linux virtual machine on your office laptop with Windows OS
can possibly help you circumvent the proxy issue.&lt;/p&gt;</content><category term="programming"></category><category term="R"></category><category term="Windows"></category><category term="install package"></category><category term="proxy"></category></entry><entry><title>Install Jupyter-Scala for JupyterLab</title><link href="http://www.legendu.net/en/blog/install-jupyter-scala-for-jupyterlab/" rel="alternate"></link><published>2016-12-10T01:52:37-08:00</published><updated>2016-12-10T01:52:37-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2016-12-10:/en/blog/install-jupyter-scala-for-jupyterlab/</id><summary type="html">&lt;p&gt;Note: Apache Toree is a better alternative than Jupyter Scala.
It is suggested that you use Apache Toree instead of Jupyter Scala.&lt;/p&gt;
&lt;p&gt;You can install Jupyter Scala following the steps below.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Make sure Java and Scala are installed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;wajig&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;openjdk&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;jdk&lt;/span&gt; &lt;span class="n"&gt;scala&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download coursier and move it to …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Note: Apache Toree is a better alternative than Jupyter Scala.
It is suggested that you use Apache Toree instead of Jupyter Scala.&lt;/p&gt;
&lt;p&gt;You can install Jupyter Scala following the steps below.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Make sure Java and Scala are installed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;wajig&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;openjdk&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;jdk&lt;/span&gt; &lt;span class="n"&gt;scala&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download coursier and move it to a searchable path. 
I place it in &lt;code&gt;$HOME/bin&lt;/code&gt; which I have included in &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;curl&lt;/span&gt; &lt;span class="nt"&gt;-L&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; &lt;span class="nt"&gt;coursier&lt;/span&gt; &lt;span class="nt"&gt;https&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="nt"&gt;git&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;vgvpD&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;amp&lt;/span&gt;&lt;span class="o"&gt;;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;amp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;chmod&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;x&lt;/span&gt; &lt;span class="nt"&gt;coursier&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clone the jupyter-scala repository.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="nv"&gt;@github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;alexarchambault&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;jupyter&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;scala&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run the following command insider the directory to insall Jupyter Scala.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;jupyter&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;scala&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You might have issues due to no permission to create directories/files under &lt;code&gt;$HOME/.local/share/jupyter&lt;/code&gt;.
If that happens, 
change the permission of the directory and try again.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;chmod&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="mi"&gt;777&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;HOME&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;share&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;jupyter&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;</content><category term="programming"></category><category term="Scala"></category><category term="Jupyter"></category><category term="JupyterLab"></category><category term="jupyter-scala"></category><category term="kernel"></category></entry><entry><title>Functions and Calls in R</title><link href="http://www.legendu.net/en/blog/functions-and-calls-in-r/" rel="alternate"></link><published>2016-12-10T01:23:25-08:00</published><updated>2016-12-10T01:23:25-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2016-12-10:/en/blog/functions-and-calls-in-r/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;"["&lt;/code&gt; is a function in R.
It takes elements from a container (vector, matrix, list, etc.)
For example, suppose &lt;code&gt;lv&lt;/code&gt; is a list of vectors.
The following code takes the first element of each vector in &lt;code&gt;lv&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;lapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;[&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this way,
you do not have to define a function …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;"["&lt;/code&gt; is a function in R.
It takes elements from a container (vector, matrix, list, etc.)
For example, suppose &lt;code&gt;lv&lt;/code&gt; is a list of vectors.
The following code takes the first element of each vector in &lt;code&gt;lv&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;lapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;[&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this way,
you do not have to define a function to get the element of a vector by yourself.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;get_1st_elem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can assign value to an R object by its name (in string) using the function &lt;code&gt;assign&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can get the value (i.e., deep copy not reference) of an R object
(for general expression, use &lt;code&gt;eval&lt;/code&gt; with &lt;code&gt;deparse&lt;/code&gt;)
by its name (string) using the function &lt;code&gt;get&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;as.character&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...)&lt;/span&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Primitive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;as.character&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;as.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;character&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On the contratry,
you can use the function &lt;code&gt;substitute&lt;/code&gt; or &lt;code&gt;quote&lt;/code&gt; to get the name (string) of an object,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;deparse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;substitute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ftree_0_4_0_0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;_100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;ftree_0_4_0_0.5_100&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;character&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;substitute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ftree_0_4_0_0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;_100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;ftree_0_4_0_0.5_100&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;character&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ftree_0_4_0_0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;_100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The function &lt;code&gt;dclong.fs::sym2str&lt;/code&gt; is an interesting one
which tries to be smart to convert an R object to the right string.
Note that &lt;code&gt;get&lt;/code&gt; only works on object names not string containing general expressions.
To evaluate a string containing an R expression,
you have to first parse it using the function &lt;code&gt;parse&lt;/code&gt;
and then evaluate it using the function &lt;code&gt;eval&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;x + 1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are several ways to create function calls without executing it.
The first way is to use &lt;code&gt;call&lt;/code&gt; by passing the name of a function
and corresponding parameters to it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rnorm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;7618801&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2722733&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1521628&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The second way is to create a list containing a function,
and parameters to be passed to the function,
and then set the mode of the list to &lt;code&gt;'call'&lt;/code&gt; or coerce it to a call using &lt;code&gt;as.call&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rnorm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;call&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rnorm&lt;/span&gt;
&lt;span class="k"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rnorm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;call&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rnorm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;842330&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;027134&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;515679&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;346022&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The last way is to use the function &lt;code&gt;parse&lt;/code&gt; to parse expressions (string).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;rnorm(3)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is useful when you want delayed evaluation or flexible calls.
Though you can make a function flexible using dots arguments ("..."),
you can use only one dots arguments,
and all arguments in the dots arguments must be pass to one function.
Using list with mode &lt;code&gt;'call'&lt;/code&gt; and &lt;code&gt;eval&lt;/code&gt;,
you can make a user-defined function accept list as argument,
which contains arguments to be passed to a call in the user-defined function.
In this way,
the list argument containing arguments to be passed to a call is comparable to the dots argument.
The advantage of list argument over the dots argument is that
you can use more than multiple list arguments containing arguments
to be passed to different calls in a user-defined function,
thus it is even more flexible.
Another smart use of call and &lt;code&gt;eval&lt;/code&gt; is to apply a function over a list of argument.
For example,
if you want to convert a list (of vectors/matrices) to a matrix,
you can use the following code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;elements&lt;/span&gt; &lt;span class="n"&gt;being&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;matrices&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="k"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rbind&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
   &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There is another R &lt;code&gt;do.call&lt;/code&gt; which performs the above operations at once,
i.e., it constructs and executes a function call from a name or a function
and a list of arguments to be passed to it.
The following is another example of converting a list (of vectors/matrices) to a matrix.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;.&lt;span class="nv"&gt;call&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;cbind&lt;/span&gt;, &lt;span class="nv"&gt;list&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;
  &lt;span class="nv"&gt;matrix&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;, &lt;span class="mi"&gt;2&lt;/span&gt;, &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;,
  &lt;span class="nv"&gt;matrix&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;, &lt;span class="mi"&gt;2&lt;/span&gt;, &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="ss"&gt;))&lt;/span&gt;
[,&lt;span class="mi"&gt;1&lt;/span&gt;] [,&lt;span class="mi"&gt;2&lt;/span&gt;] [,&lt;span class="mi"&gt;3&lt;/span&gt;] [,&lt;span class="mi"&gt;4&lt;/span&gt;]
[&lt;span class="mi"&gt;1&lt;/span&gt;,]    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;
[&lt;span class="mi"&gt;2&lt;/span&gt;,]    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In &lt;code&gt;data-structures&lt;/code&gt;,
you learned that there is a &lt;code&gt;sapply&lt;/code&gt; which can apply a function over a list.
The difference between &lt;code&gt;do.call&lt;/code&gt; and &lt;code&gt;sapply&lt;/code&gt; is that&lt;br&gt;
&lt;code&gt;do.call&lt;/code&gt; takes the whole list as an argument and returns only one result
while  &lt;code&gt;sapply&lt;/code&gt; takes each element of the list as argument and returns a list of results
(Sometimes, theses results are reformed to a simpler data structure,
e.g. a vector or a matrix.).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To check whether an object is a call, you can use &lt;code&gt;is.call&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can refer to missing arguments in user-defined functions.
R will not complain until these missing arguments are really required.
For example consider the following silly function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;function&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt;, &lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; {
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;gt&lt;/span&gt;&lt;span class="c1"&gt;; 0) {&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;...&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
  }
  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="ss"&gt;))&lt;/span&gt;
}
&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;gt&lt;/span&gt;&lt;span class="c1"&gt;; foo(-1)&lt;/span&gt;
[&lt;span class="mi"&gt;1&lt;/span&gt;] &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;...&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice that &lt;code&gt;foo(-1)&lt;/code&gt; calls &lt;code&gt;foo(x = 1, y = y)&lt;/code&gt;.
You might think that this is not valid because the argument &lt;code&gt;y&lt;/code&gt; is missing,
however,
R does not complain about it because the argument &lt;code&gt;y&lt;/code&gt; is never used.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;try&lt;/code&gt; allows us to handle error-recovery,
which is similar to &lt;code&gt;try-catch-end try&lt;/code&gt; in vb.net.
If you this function,
R does not stop executing code when error is detected,
rather you can decide what to do when error happens.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can use function &lt;code&gt;switch&lt;/code&gt; to write branch statement in R,
however this function is not very friendly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can use command &lt;code&gt;stop&lt;/code&gt; to stop executing a function in R,
however it will print error message at the same time.
And what's more,
no values can be returned.
To avoid printing error messages or to return values when exiting a function,
we can use function &lt;code&gt;return&lt;/code&gt;.
Even if a function do not return anything,
we can pass it as a argument to &lt;code&gt;return&lt;/code&gt;,
and absolutely nothing will be return in this case.
This can be help if we do not want anything to be return in a user-defined function.
Notice that you can use return as a statement (i.e. put it on a single line),
but it has no effect.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use the names of build-in functions in R as parameter in self-defined functions.
To avoid confusion,
we can we use name space such as &lt;code&gt;base::matrix&lt;/code&gt; instead of &lt;code&gt;matrix&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can define overloaded functions and functions with uncertain number of variables (using &lt;code&gt;...&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can define a function inside another function in R.
This can be helpful when we want to define some function that never be used again.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can define sub functions in a function, which is very convenient.
For example,
sometimes you want to call another function inside a function.
However,
the function that you want to call is different every time
and you even do not how to define it before you get intermediate results,
i.e. the function that you want to call does not just differ in the form of arguments.
To achieve this,
you can use the strategy of defining sub functions inside a function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some functions in R require a function as argument.
To pass value to the argument,
you can directly give the define of a function instead of writing a function first
and then pass the name of the defined function to the argument.
This can be very convenient sometime,
e.g. when you use function &lt;code&gt;apply&lt;/code&gt;,
the function that you want to call is not define in R yet very simple,
then you can use the strategy of passing definition to argument.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In R the arguments passed to a function can be changed,
e.g. if x is a argument a function,
then you can assign a new value to x.
Notice that in some other languages,
the arguments passed to a function cannot be changed, e.g. Mathematica.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For most functions in R,
you can just type in their names in R GUI to get their source code;
for functions written in S3,
you can use function &lt;code&gt;getS3method&lt;/code&gt; to get their source code;
for other functions written in C or Fortran,
you have to download the source code of R in order to find the source code of these functions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For a R function which accepts the dots argument (...),
you can pass basically any argument to it including dots itself.
So if you want to pass all stuff in a dots argument to a function,
you do not have to parse it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Usually built-in R functions have many arguments
and because R use partial matches to pass arguments to functions,
you might never get a warning message
if you use some argument that actually does not exist.
If this happens when you use a function directly,
it is possible for you to find this subtle mistake.
However, if you make this kind of mistakes in a user-defined function,
then it can be a very tricky bug.
So it is recommended that you always check the arguments of functions
that you are not very familiar with before you use it.
When you come across some tricky bugs,
you might want to check whether it is resulted from miss-passed argument(s) or not.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;R uses buffer to store the output and then print it when the buffer is full.
In order to print the information immediately you can use function &lt;code&gt;flush.console&lt;/code&gt;
after you use function &lt;code&gt;cat&lt;/code&gt; to print out information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is suggested that you always use &lt;code&gt;{}&lt;/code&gt; when use branches and loops in R.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An R object exists ever since it is defined
until the end of its current evaluation environment.
So unlike C++ and Java in which an object defined in a block is only in effect in that block,
an object in R defined in a block will still be in effect outside the block.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;with&lt;/code&gt; allows us to evaluate expressions in a data environment,
so it's convenient to use it to work with data frames.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use &lt;code&gt;T&lt;/code&gt; to stand for &lt;code&gt;TRUE&lt;/code&gt; and &lt;code&gt;F&lt;/code&gt; stand for &lt;code&gt;FALSE&lt;/code&gt; when you write code in R,
but you'd better use &lt;code&gt;TRUE&lt;/code&gt; and &lt;code&gt;FALSE&lt;/code&gt;
when you write user-defined functions
because &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;F&lt;/code&gt; are actually global variables that are defined as &lt;code&gt;TRUE&lt;/code&gt; and &lt;code&gt;FALSE&lt;/code&gt;
while &lt;code&gt;TRUE&lt;/code&gt; and &lt;code&gt;FALSE&lt;/code&gt; are constant in R.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The function&lt;code&gt;missing&lt;/code&gt; tests whether a value has been specified as an argument for a function,
so it can be used write very robust functions and functions with flexible number of arguments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some functions in R can only be use when R is run in interactive mode.
If you want your code to run flawlessly in any mode,
you can use &lt;code&gt;interactive&lt;/code&gt; to check whether R is run in interactive mode or command mode,
and modify your code correspondingly.
Notice that when compiling an R package (commands such as &lt;code&gt;R CMD build&lt;/code&gt; are used),
R is run in command mode.
As the reason mentioned before,
some of your examples might not run correctly,
which can make your package fail to pass the test.
A simply tricky is to include your code in block &lt;code&gt;if (interactive()) { ... }&lt;/code&gt;,
so that it will not run when the package is compiled
while it runs perfectly when copied and pasted in R GUI.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pmatch&lt;/code&gt; performs partial string matching. If a function takes a
string argument, you can incorporate partial matching technic so
that the users can use partial values for the string argument. This
can make it a better experience for users to use the function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Usually a &lt;code&gt;for&lt;/code&gt; loop is more convenient than a &lt;code&gt;while&lt;/code&gt; loop in all
kinds of programing languages. However, a &lt;code&gt;for&lt;/code&gt; loop in R requires a
vector specifying the loop range. Sometimes it's not very convenient
to construct a general purpose vector for a loop, e.g. if a loop
starts from &lt;code&gt;loopStart&lt;/code&gt; and ends at &lt;code&gt;loopEnd&lt;/code&gt; with a step &lt;code&gt;loopStep&lt;/code&gt;
but &lt;code&gt;loopEnd&lt;/code&gt; is not always greater than &lt;code&gt;loopStart&lt;/code&gt;, then it's
clumsy to use &lt;code&gt;loop&lt;/code&gt;. In this kind of situations, you can use a
&lt;code&gt;while&lt;/code&gt; loop instead.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The vector in a for loop is calculated once and stored.
So it will not take more time if you put an expression
which generate the needed vector in for loop.
What is more,
if you use an existing vector,
the for loop will not be affected even if you change the original vector.
(How about while loop? I think it is the same.
In one word,
the conditions is determined before the loop and cannot be changed in the loop.
It is the same in MATLAB, but different in Java.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;addTaskCallback&lt;/code&gt; registers an R function that is to be called
each time a top-level task is completed.
&lt;code&gt;removeTaskCallback&lt;/code&gt; and &lt;code&gt;taskCallbackManager&lt;/code&gt; are also very useful functions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="R"></category><category term="function"></category><category term="programming"></category><category term="call"></category><category term="CRAN"></category></entry><entry><title>Call Java in R Using Package rJava</title><link href="http://www.legendu.net/en/blog/call-java-in-r/" rel="alternate"></link><published>2016-10-23T22:53:22-07:00</published><updated>2016-10-23T22:53:22-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2016-10-23:/en/blog/call-java-in-r/</id><summary type="html">&lt;p&gt;The package "rJava" offers a convenient way to call Java code from R. 
The following are some tips for using the "rJava" package.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You must first start a Java Virtual Machine 
using &lt;code&gt;.jinit&lt;/code&gt; before calling Java code from R. 
You can specifiy a vector of paths for the function &lt;code&gt;.jinit …&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;The package "rJava" offers a convenient way to call Java code from R. 
The following are some tips for using the "rJava" package.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You must first start a Java Virtual Machine 
using &lt;code&gt;.jinit&lt;/code&gt; before calling Java code from R. 
You can specifiy a vector of paths for the function &lt;code&gt;.jinit&lt;/code&gt;. 
If the Java code relies on some other package or jar files, 
their path must also be added to the search path of the Java
Virtual Machine. 
Notice the the class paths must be full paths rather than relative paths.
If you develop an R package depending on &lt;code&gt;rJava&lt;/code&gt;, 
you can &lt;code&gt;.jpackage&lt;/code&gt; to initializes a Java Virtual Machine (JVM) 
in the function &lt;code&gt;.onLoad&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After creating an Java object, 
you can use &lt;code&gt;$&lt;/code&gt; to invoke its public methods
and access its public fields directly instead of using the function &lt;code&gt;.jcall&lt;/code&gt; or &lt;code&gt;.jfield&lt;/code&gt;. 
This way preserves the flavor of object oriented programming, 
and is much more convenient. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use boolean values, double values, strings directly 
when invoking Java methods in R. 
Because numerical numbers are double numbers be default in R, 
you should either add suffix "L" to a number or use function &lt;code&gt;as.integer&lt;/code&gt; 
to convert it to an integer if you want to pass it as an integer to a Java method. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can call a static method of class using the function &lt;code&gt;.jcall&lt;/code&gt;. 
Just replace the object argument with the name of the class whose 
static method you want to call. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To pass an vector to a Java method, you have to use the function 
&lt;code&gt;.jarray&lt;/code&gt; to convert the vector to a Java array. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The table of JNI:&lt;br&gt;
&lt;code&gt;I&lt;/code&gt;: integer 
&lt;code&gt;D&lt;/code&gt;: double 
&lt;code&gt;J&lt;/code&gt;: long F: float V: void Z: boolean C: char
&lt;code&gt;B&lt;/code&gt;: byte 
&lt;code&gt;L&amp;lt;class\&amp;gt;&lt;/code&gt;: java object of the class &amp;lt;class&gt;, 
e.g.,  &lt;code&gt;Ljava/lang/Object&lt;/code&gt;
&lt;code&gt;[&amp;lt;type\&amp;gt;&lt;/code&gt; array of objects of type &lt;code&gt;&amp;lt;type\&amp;gt;&lt;/code&gt;,
e.g. &lt;code&gt;[D&lt;/code&gt; for an array of doubles&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="programming"></category><category term="Java"></category><category term="array"></category><category term="rJava"></category><category term="R"></category><category term="vector"></category><category term="package"></category></entry><entry><title>Writing R Extensions</title><link href="http://www.legendu.net/en/blog/writing-r-extensions/" rel="alternate"></link><published>2016-10-23T17:13:18-07:00</published><updated>2016-10-23T17:13:18-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2016-10-23:/en/blog/writing-r-extensions/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/r/r.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;The following are some tips for using the old fashioned way (using &lt;code&gt;.C&lt;/code&gt; and &lt;code&gt;.Call&lt;/code&gt;) 
to write R extensions. 
The state-of-art way to extend R via C/C++ is to use the &lt;code&gt;Rcpp&lt;/code&gt; package.
Check &lt;a href="http://dclong.github.io/en/2012/09/rcpp-rocks/"&gt;this post&lt;/a&gt; For tips on using &lt;code&gt;Rcpp&lt;/code&gt; package.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If you want to call C code …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/r/r.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;The following are some tips for using the old fashioned way (using &lt;code&gt;.C&lt;/code&gt; and &lt;code&gt;.Call&lt;/code&gt;) 
to write R extensions. 
The state-of-art way to extend R via C/C++ is to use the &lt;code&gt;Rcpp&lt;/code&gt; package.
Check &lt;a href="http://dclong.github.io/en/2012/09/rcpp-rocks/"&gt;this post&lt;/a&gt; For tips on using &lt;code&gt;Rcpp&lt;/code&gt; package.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If you want to call C code from R, 
the arguments of C functions to be called by &lt;code&gt;.C&lt;/code&gt; must be pointers. 
This means that only simple data sturcture (primitive types and array) 
can be passed between R and C.
By default, 
&lt;code&gt;.C&lt;/code&gt; makes a copy of the arguments to be passed to C functions, 
and thus the corresponding variables/objects in R are unchanged. 
If a large array/vector is to be passed to C, 
you can suppress copying using the option &lt;code&gt;DUP=FALSE&lt;/code&gt; to increase performance.&lt;br&gt;
However, 
the corresponding variables/objects in R will be changed if the C code mutates them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is very annoying to work with pointer in C, 
however, 
you are forced to work with pointer if you want to C functions for calling in R. 
One suggestions is to avoid using pointers in functions except
the call that you directly call from R.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A matrix in R is essentially a vector with "dim" property, 
so when you pass a matrix to a C function from R, 
you actually pass a 1-dimensional array to the C function. 
This is a place inviting errors. 
Because of the way that a 2-D array is saved in C/C++, 
it is more nature to stretch a 2-D array to a 1-D array by rows 
while a matrix in R is stretched to a vector by columns by default. 
So you have be careful that the matrix you passed to C/C++ is 
in the right form that you want. 
If this is a problem, 
tranposing the matrix can be an easy solutions many times.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A good thing about interface with C in R is that the RNG in R can be synced easily. 
To do this, 
you just have to call the C functions that R supplies for generating random numbers, 
and surround them in &lt;code&gt;GetRNGstate();&lt;/code&gt; and  &lt;code&gt;PutRNGstate();&lt;/code&gt;. 
For more details, 
please refer to the R extension.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To call C++ code from R, 
you can write C wrapper functions/interfaces (surrounded by  &lt;code&gt;extern "C"{}&lt;/code&gt;) in your C++ code, 
and then call the C wrapper functions/interaces using the &lt;code&gt;.C&lt;/code&gt; function from R.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When writing a R package which use external code, 
you do not have to compile it manually on different platforms. 
You just need to place the code into the "src" folder, 
and it will be automatically compiled 
(to the right type of library according to which platform you use) 
when you compile your package. 
What's more, 
&lt;code&gt;library.dynam&lt;/code&gt; helps you to automatically load the compiled code on differently platforms, 
i.e. you don't have to check the type of the platform 
and use &lt;code&gt;dyn.load&lt;/code&gt; to load the compiled code accordingly. 
However, 
you must pass the name of the compiled code to &lt;code&gt;library.dynam&lt;/code&gt; without extension.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="R"></category><category term="Rcpp"></category><category term="programming"></category><category term="CRAN"></category></entry><entry><title>An IO Bug in R</title><link href="http://www.legendu.net/en/blog/input-bug-r/" rel="alternate"></link><published>2016-08-15T21:22:47-07:00</published><updated>2016-08-15T21:22:47-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2016-08-15:/en/blog/input-bug-r/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/computer/bug.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;I encountered an input/output bug in R in Linux system. 
The symptom is that input and output are not displayed in the terminal 
and the warning message 
"An unusual circumstance has arisen in the nesting of readline input. 
Please report using bug.report()" is shown. 
I found that though …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/computer/bug.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;I encountered an input/output bug in R in Linux system. 
The symptom is that input and output are not displayed in the terminal 
and the warning message 
"An unusual circumstance has arisen in the nesting of readline input. 
Please report using bug.report()" is shown. 
I found that though input and output are not displayed, you can still 
interact with the underlying R session. 
A safe way is to save the R workspace, quit the R session, open a new 
R session and load in the saved workspace. To save the R workspace,
just type in &lt;code&gt;save.image('ws_name')&lt;/code&gt; in the console, where &lt;code&gt;ws_name&lt;/code&gt; 
is the name of the workspace. Notice that you will not see anything 
happen on the console, so you have to make sure that you do not make 
any mistake typing in the command. To quit the R session after saving 
the workspace, you can type in 'q('no')' in the console. 
Similarly, you won't see anything in the console, so make sure you do not 
make any mistake. Now can open a new R session, and then load in the saved 
workspace. &lt;/p&gt;</content><category term="warning"></category><category term="IO"></category><category term="programming"></category><category term="R"></category><category term="bug"></category></entry><entry><title>A Bug in Mathematica</title><link href="http://www.legendu.net/en/blog/bug-in-mathematica/" rel="alternate"></link><published>2016-08-15T21:22:23-07:00</published><updated>2016-08-15T21:22:23-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2016-08-15:/en/blog/bug-in-mathematica/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/computer/bug.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;Mathematica is a very intelligent and powerful math software. 
I use it in my study and research a lot. 
Mathematica's ability to take derivative and to calculate 
limit is obvious powerful–way much beyond many mathematician's ability. 
Mathematica's ability to calculate integral is also powerful. 
There are many integrals than …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/computer/bug.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;Mathematica is a very intelligent and powerful math software. 
I use it in my study and research a lot. 
Mathematica's ability to take derivative and to calculate 
limit is obvious powerful–way much beyond many mathematician's ability. 
Mathematica's ability to calculate integral is also powerful. 
There are many integrals than I'm not able to solve while Mathmatica can. 
For a long time I totally trusted Mathematica. 
I thought that it is so intelligent an software that whenever 
it's able to give me a result it must right, 
until one day I asked Mathematica to do some integrals.&lt;br&gt;
See whether you can find what's wrong with Mathematica.&lt;/p&gt;
&lt;p&gt;What I learn is not just this bug in Mathmatica. 
What I learned is that software has bugs, no matter how intelligent it is. 
Bugs happens when a software grow large. 
Never fully trust a software. You should always judge the result based on your own knowledge.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Integrate&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Cos[theta&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;Exp&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Cos[theta&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;Sin&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;theta&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;Pi&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;theta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;Pi&lt;/span&gt;&lt;span class="err"&gt;}]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;NIntegrate&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Cos[theta&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;Exp&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Cos[theta&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;Sin&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;theta&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;Pi&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;theta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;Pi&lt;/span&gt;&lt;span class="err"&gt;}]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mf"&gt;0.635862&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Integrate[Cos[theta&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;Exp&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Cos[theta&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;Sin&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;theta&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;Pi&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;theta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;Pi&lt;/span&gt;&lt;span class="err"&gt;}]]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Mathematica"></category><category term="programming"></category><category term="bug"></category></entry><entry><title>How MATLAB Is Different from Other Programming Languages</title><link href="http://www.legendu.net/en/blog/MATLAB-different/" rel="alternate"></link><published>2016-07-13T00:09:40-07:00</published><updated>2016-07-13T00:09:40-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2016-07-13:/en/blog/MATLAB-different/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;MATLAB support command style (like Linux terminal commands).
This means that you do not have to use parentheses when you call some
functions, instead, you can use spaces to separate a function and
its arguments.
And when an argument of a function is string, you
do not have to use …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;MATLAB support command style (like Linux terminal commands).
This means that you do not have to use parentheses when you call some
functions, instead, you can use spaces to separate a function and
its arguments.
And when an argument of a function is string, you
do not have to use single quotation mark when you call the function
using command style. When a function does not take any arguments,
you can call the function by parentheses with nothing in or you can
ignore the parentheses and just use the name function to call it.
For example, to generate a rand number between 0 and 1, you can use
&lt;code&gt;rand()&lt;/code&gt; or you can simply use &lt;code&gt;rand&lt;/code&gt;. This is much more convenient
compared to many other languages. e.g. R
However, the support not as seamless as Ruby (in which you can use 
command style and function style freely). Not all functions in MATLAB have 
command versions, and usually you
cannot use command version of functions in user-defined functions.
(not very sure whether you can use it in m file or not, check it
later.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In most languages (e.g. ,C++, Java, SAS, etc), 
it is required that you end a statement with &lt;code&gt;;&lt;/code&gt;. 
In some other languages (e.g., R), it does not matter much (if write multiple statements on a line in R, &lt;code&gt;;&lt;/code&gt; can be used to separate them). 
In MATLAB, you are not required to put a &lt;code&gt;;&lt;/code&gt; at the end of a statement. 
However, it is recommneded that you use &lt;code&gt;;&lt;/code&gt; at the end of each statement, 
otherwise the result of the statument will be printed out to the console.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The normal MATLAB statements are continued on new line by putting
three dots (&lt;code&gt;...&lt;/code&gt;), which is different from other popular languages.
Many programming languages allows you to start a new line freely, 
e.g. ,C++, Java, etc. R allows one to start a new line if no ambiguity is introduced. 
Three dots (&lt;code&gt;...&lt;/code&gt;) is often used in other languages (e.g., R and C++11) for variadic functions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Though MATLAB support multiple styles of syntax, its
syntax is still more strict than the syntax of R, which make it more
efficient in the cost of convenience.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MATLAB use &lt;span class="math"&gt;\(\sim\)&lt;/span&gt; to stand for logical &lt;code&gt;NOT&lt;/code&gt;, which is different
from most of other languages. Usually a programming language uses &lt;code&gt;NOT&lt;/code&gt;, &lt;code&gt;!&lt;/code&gt;, or &lt;code&gt;$&amp;lt;&amp;gt;$&lt;/code&gt; to stand
for logical &lt;code&gt;NOT&lt;/code&gt;. See a summary on operators in different programming languages 
&lt;a href="http://dclong.github.io/en/2012/06/operators-popular-language/"&gt;in this post&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MATLAB uses &lt;code&gt;disp&lt;/code&gt; to display text of array to the console, which is
different from most other programming languages. 
Most programming languages use functions/routines/methods related
to words &lt;code&gt;print&lt;/code&gt; (printf, print, println, etc) and &lt;code&gt;write&lt;/code&gt; (write, writeln, etc) to print message to the standout put of a file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In other programming languages, you have &lt;code&gt;packages&lt;/code&gt; (e.g. Java,
Mathematica and R), &lt;code&gt;libraries&lt;/code&gt; (e.g. C). In MATLAB, a
similar concept which is called &lt;code&gt;toolbox&lt;/code&gt;, however, it is not exactly 
the same as &lt;code&gt;packages&lt;/code&gt; or &lt;code&gt;libraries&lt;/code&gt; in other languages. 
You can use functions in a toolbox as long as the toolbox is installed.
In R, you have to first load a package in order to use functions in it (or you have to full name of the function).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To use strings in MATLAB, you must use single quotation marks,
which is different from many other languages.
For example, in C/C++ and Java, you have to use double quotation marks; 
in languages which have Linux blood (e.g., R, Python, Bash and so on),
you can use either double or single quotation marks (though there might be slight difference between single and double quotations).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MATLAB is not completely case sensitive. MATLAB is case sensitive
for variable names and built-in functions. For scripts and functions
stored in a MATLAB file with a .m extension, case sensitivity is
preserved on UNIX platforms but not on Windows platforms.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Loops in MATLAB is faster than loops in R.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="C++"></category><category term="programming"></category><category term="Java"></category><category term="SAS"></category><category term="R"></category><category term="MATLAB"></category></entry><entry><title>Sweave</title><link href="http://www.legendu.net/en/blog/sweave/" rel="alternate"></link><published>2016-07-13T00:05:31-07:00</published><updated>2016-07-13T00:05:31-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2016-07-13:/en/blog/sweave/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Do not use sweave unless you are sure that you have run to the same
code again and again on different data sets, and you want the report
to be generate automatically each time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You must start &lt;code&gt;&amp;lt;&amp;lt;...&amp;gt;&amp;gt;&lt;/code&gt; at the beginning a line.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you want to do simulation, you'd better …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Do not use sweave unless you are sure that you have run to the same
code again and again on different data sets, and you want the report
to be generate automatically each time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You must start &lt;code&gt;&amp;lt;&amp;lt;...&amp;gt;&amp;gt;&lt;/code&gt; at the beginning a line.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you want to do simulation, you'd better set a seed for the random
number generator (RNG). In this way, you can reproduce your simulation
and the running result of the R code will always be the same. Sometime,
the result of R code will different every time you run it. For example,
if you want to test the speed of some algorithms, the time needed for
each algorithm will be different each time you run the code even if you
use the computer and use a same seed for RNG (if simulation used). For
this kind of output, you'd better not use Sweave. A better way is to
write the auto-write the result into a tex document, and then include
the file in your main tex file. In this way, you can still redo old work
easily but without worrying out having different outputs every time.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="LaTeX"></category><category term="programming"></category><category term="Sweave"></category></entry><entry><title>Set Line Space in LaTeX</title><link href="http://www.legendu.net/en/blog/set-line-space-in-latex/" rel="alternate"></link><published>2016-07-13T00:05:22-07:00</published><updated>2016-07-13T00:05:22-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2016-07-13:/en/blog/set-line-space-in-latex/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;parskip&lt;/code&gt; command makes a skip between paragraphs. 
The length of skip can be set using the command &lt;code&gt;\setlength&lt;/code&gt;, e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;setlength&lt;/span&gt;&lt;span class="err"&gt;{\&lt;/span&gt;&lt;span class="n"&gt;parskip&lt;/span&gt;&lt;span class="err"&gt;}{&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="n"&gt;pt&lt;/span&gt; &lt;span class="n"&gt;plus&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;pt&lt;/span&gt; &lt;span class="n"&gt;minus&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;pt&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The command &lt;code&gt;\itemsep&lt;/code&gt; sets the space between items in lists, e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;\&lt;span class="nv"&gt;begin&lt;/span&gt;{&lt;span class="nv"&gt;itemize&lt;/span&gt;}
\&lt;span class="nv"&gt;itemsep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;.&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="nv"&gt;cm&lt;/span&gt;
\&lt;span class="nv"&gt;item …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;parskip&lt;/code&gt; command makes a skip between paragraphs. 
The length of skip can be set using the command &lt;code&gt;\setlength&lt;/code&gt;, e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;setlength&lt;/span&gt;&lt;span class="err"&gt;{\&lt;/span&gt;&lt;span class="n"&gt;parskip&lt;/span&gt;&lt;span class="err"&gt;}{&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="n"&gt;pt&lt;/span&gt; &lt;span class="n"&gt;plus&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;pt&lt;/span&gt; &lt;span class="n"&gt;minus&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;pt&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The command &lt;code&gt;\itemsep&lt;/code&gt; sets the space between items in lists, e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;\&lt;span class="nv"&gt;begin&lt;/span&gt;{&lt;span class="nv"&gt;itemize&lt;/span&gt;}
\&lt;span class="nv"&gt;itemsep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;.&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="nv"&gt;cm&lt;/span&gt;
\&lt;span class="nv"&gt;item&lt;/span&gt; 
\&lt;span class="k"&gt;end&lt;/span&gt;{&lt;span class="nv"&gt;itemize&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The command &lt;code&gt;\doublespace&lt;/code&gt; makes lines after this command double spaced. 
This is convenient to produce PDF document for review.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="LaTeX"></category><category term="programming"></category><category term="line"></category><category term="spacing"></category><category term="space"></category></entry><entry><title>LaTeX for Chinese</title><link href="http://www.legendu.net/en/blog/latex-for-chinese/" rel="alternate"></link><published>2016-07-13T00:04:39-07:00</published><updated>2016-07-13T00:04:39-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2016-07-13:/en/blog/latex-for-chinese/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;code&gt;xetex&lt;/code&gt; is the state-of-art way for dealing with Chinese type setting.
You can install &lt;code&gt;xetex&lt;/code&gt; on Debian series of Linux distributions (Debian, Ubuntu, Linux Mint, etc.)
using the following command. &lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wajig install texlive-xetex 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can use command &lt;code&gt;xelatex&lt;/code&gt; to compile. 
The utf-8 format is preferred. &lt;/p&gt;
&lt;p&gt;There are 2 good ways …&lt;/p&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;&lt;code&gt;xetex&lt;/code&gt; is the state-of-art way for dealing with Chinese type setting.
You can install &lt;code&gt;xetex&lt;/code&gt; on Debian series of Linux distributions (Debian, Ubuntu, Linux Mint, etc.)
using the following command. &lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wajig install texlive-xetex 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can use command &lt;code&gt;xelatex&lt;/code&gt; to compile. 
The utf-8 format is preferred. &lt;/p&gt;
&lt;p&gt;There are 2 good ways for writing Chinese doc using LaTeX (TeX Live) in Linux.
You can use either the &lt;code&gt;ctex&lt;/code&gt; or &lt;code&gt;xeCJK&lt;/code&gt; package.
&lt;code&gt;ctex&lt;/code&gt; is based on &lt;code&gt;xeCJK&lt;/code&gt; and is more convenient, 
however &lt;code&gt;xeCJK&lt;/code&gt; is more customizable. 
The following are minimum example using &lt;code&gt;ctex&lt;/code&gt; and &lt;code&gt;xeCJK&lt;/code&gt; respectively.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;\documentclass&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;article&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;ctex&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;
中文 English 
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;\documentclass&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;article&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;xeCJK&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;
中文 English 
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Both template uses the Fandole fonts coming with Tex Live by default (without manually specification of fonts to use). 
With Tex Live 2015 and above, 
the configuration is done automatically and no hassle of manual configuration. 
Both &lt;code&gt;ctex&lt;/code&gt; and &lt;code&gt;xeCJK&lt;/code&gt; need &lt;code&gt;xelatex&lt;/code&gt; (see below) to compile.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;xelatex test.tex
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Required packages (&lt;code&gt;texlive&lt;/code&gt;, &lt;code&gt;xelatex&lt;/code&gt;, &lt;code&gt;ctex&lt;/code&gt;, &lt;code&gt;xeCJK&lt;/code&gt;, etc.) can be installed 
on Debian sereis of Linux (Debian, Ubuntu, Linux Mint, etc.)
using the following command. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wajig install texlive texlive-xetex texlive-lang-cjk
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The following command installs all LaTeX components that I personally use frequently.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wajig install texlive latex-beamer wiki2beamer dvipng texlive-xetex texlive-lang-cjk texstudio
&lt;/pre&gt;&lt;/div&gt;</content><category term="LaTeX"></category><category term="Chinese"></category><category term="programming"></category><category term="Tex Live"></category><category term="XeTex"></category><category term="Linux"></category><category term="fonts"></category><category term="markup"></category></entry><entry><title>LaTeX Commands for Compiling</title><link href="http://www.legendu.net/en/blog/latex-commands/" rel="alternate"></link><published>2016-07-13T00:03:31-07:00</published><updated>2016-07-13T00:03:31-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2016-07-13:/en/blog/latex-commands/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;LaTeX&lt;ul&gt;
&lt;li&gt;If your LaTeX code contains only EPS figures, you can use the &lt;code&gt;latex&lt;/code&gt; command (also OK to use &lt;code&gt;pdflatex&lt;/code&gt;) to compile your code.   &lt;/li&gt;
&lt;li&gt;If you use bibtex, you have to compile your code using commands &lt;code&gt;latex&lt;/code&gt;, &lt;code&gt;bibtex&lt;/code&gt;, &lt;code&gt;latex&lt;/code&gt; and &lt;code&gt;latex&lt;/code&gt; in sequence.&lt;/li&gt;
&lt;li&gt;If you use the &lt;code&gt;psfrag&lt;/code&gt; package to …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;LaTeX&lt;ul&gt;
&lt;li&gt;If your LaTeX code contains only EPS figures, you can use the &lt;code&gt;latex&lt;/code&gt; command (also OK to use &lt;code&gt;pdflatex&lt;/code&gt;) to compile your code.   &lt;/li&gt;
&lt;li&gt;If you use bibtex, you have to compile your code using commands &lt;code&gt;latex&lt;/code&gt;, &lt;code&gt;bibtex&lt;/code&gt;, &lt;code&gt;latex&lt;/code&gt; and &lt;code&gt;latex&lt;/code&gt; in sequence.&lt;/li&gt;
&lt;li&gt;If you use the &lt;code&gt;psfrag&lt;/code&gt; package to edit EPS figures (only work for EPS figures), you have to compile your LaTeX code using commands &lt;code&gt;latex&lt;/code&gt;, &lt;code&gt;dvi2ps&lt;/code&gt; and &lt;code&gt;ps2pdf&lt;/code&gt; in sequence.&lt;/li&gt;
&lt;li&gt;To use the &lt;code&gt;tex4ht&lt;/code&gt; tool to convert LaTeX to other formats, you have to use the &lt;code&gt;latex&lt;/code&gt; command to compile. See &lt;a href=""&gt;this post&lt;/a&gt; for more information.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pdflatex&lt;ul&gt;
&lt;li&gt;If you use non-EPS figures in your LaTeX code, you have to use the &lt;code&gt;pdflatex&lt;/code&gt; command to compile your code.&lt;/li&gt;
&lt;li&gt;If you use bibtex, you have to compile your code using commands &lt;code&gt;pdflatex&lt;/code&gt;, &lt;code&gt;bibtex&lt;/code&gt;, &lt;code&gt;pdflatex&lt;/code&gt; and &lt;code&gt;pdflatex&lt;/code&gt; in sequence.&lt;/li&gt;
&lt;li&gt;Generally speaking the &lt;code&gt;pdflatex&lt;/code&gt; command is preferred to &lt;code&gt;latex&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;xelatex&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For compiling LaTeX code containing CJK characters.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pdfTexify&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A command seen in WinEdt for compiling LaTeX code repeatedly until all issues are resolved. This can be a more convenient alternative to apply commands &lt;code&gt;pdflatex&lt;/code&gt;, &lt;code&gt;bibtex&lt;/code&gt;, &lt;code&gt;pdflatex&lt;/code&gt; and &lt;code&gt;pdflatex&lt;/code&gt; when you use bibtex in your LaTeX code. Surely one can write bash functions to simplify this process in Linux easily.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="compile"></category><category term="LaTeX"></category><category term="programming"></category></entry><entry><title>Graphics in LaTeX</title><link href="http://www.legendu.net/en/blog/graphics-in-latex/" rel="alternate"></link><published>2016-07-13T00:02:34-07:00</published><updated>2016-07-13T00:02:34-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2016-07-13:/en/blog/graphics-in-latex/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Generally PDF figures are preferred for LaTeX code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are many useful commands in Linux for converting between different types of figures, e.g., &lt;code&gt;convert&lt;/code&gt;, &lt;code&gt;pdf2ps&lt;/code&gt;, etc. So it does not matter much which types of figures you produce. You can always convert them into other format when needed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Generally PDF figures are preferred for LaTeX code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are many useful commands in Linux for converting between different types of figures, e.g., &lt;code&gt;convert&lt;/code&gt;, &lt;code&gt;pdf2ps&lt;/code&gt;, etc. So it does not matter much which types of figures you produce. You can always convert them into other format when needed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;psfrag&lt;/code&gt; package is useful for editing EPS figures.
If you use it in your LaTeX code, you have to compile your code using commands &lt;code&gt;latex&lt;/code&gt;, &lt;code&gt;dvi2ps&lt;/code&gt; and &lt;code&gt;ps2pdf&lt;/code&gt; in sequence.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Vector figures (EPS, PDF, etc) can be too big sometimes (e.g., if you do scatter plot). In this case, you'd better use non-vector pictures (e.g., png, jgp, etc).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To include figures in a frame in beamer, you must use the option &lt;code&gt;[fragile]&lt;/code&gt; for that frame. For example
&lt;div class="math"&gt;\begin{frame}[fragile]
\begin{figure}
\includegraphics{graph1}
\caption{captiontext}
\label{figurelabel}
\end{figure}
\end{frame}&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="image"></category><category term="vector"></category><category term="LaTeX"></category><category term="graphics"></category><category term="programming"></category></entry><entry><title>Check Whether an Email Address Is Valid in Java</title><link href="http://www.legendu.net/en/blog/valid-email-address-java/" rel="alternate"></link><published>2016-07-12T23:58:54-07:00</published><updated>2016-07-12T23:58:54-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2016-07-12:/en/blog/valid-email-address-java/</id><summary type="html">&lt;p&gt;See the following code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;test@test.com&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Pattern&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pattern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;compile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.+@.+\\.[a-z]+&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Matcher&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;matcher&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;matchFound&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;matches&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matchFound&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;EMAIL OK&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;EMAIL ERROR&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;See the following code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;test@test.com&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Pattern&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pattern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;compile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.+@.+\\.[a-z]+&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Matcher&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;matcher&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;matchFound&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;matches&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matchFound&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;EMAIL OK&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;EMAIL ERROR&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="pattern"></category><category term="match"></category><category term="Java"></category><category term="programming"></category><category term="email address"></category></entry><entry><title>Comparison of Values Involving NA in R</title><link href="http://www.legendu.net/en/blog/comparing-values-involving-NA-in-R/" rel="alternate"></link><published>2016-07-10T20:33:23-07:00</published><updated>2016-07-10T20:33:23-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2016-07-10:/en/blog/comparing-values-involving-NA-in-R/</id><summary type="html">&lt;p&gt;The best way to compare values containing &lt;code&gt;NA&lt;/code&gt; in R is to define customized comparison functions.
Here is an example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;equals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;na_as_na&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nf"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;na_as_na&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;na_as_na&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;ifelse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
           &lt;span class="nf"&gt;is.na&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
           &lt;span class="nf"&gt;ifelse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;is.na&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x2 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;The best way to compare values containing &lt;code&gt;NA&lt;/code&gt; in R is to define customized comparison functions.
Here is an example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;equals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;na_as_na&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nf"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;na_as_na&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;na_as_na&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;ifelse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
           &lt;span class="nf"&gt;is.na&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
           &lt;span class="nf"&gt;ifelse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;is.na&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
           &lt;span class="nf"&gt;ifelse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;is.na&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kc"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="programming"></category><category term="R"></category><category term="comparison"></category><category term="NA"></category><category term="missing"></category><category term="CRAN"></category></entry><entry><title>Input and Output in R</title><link href="http://www.legendu.net/en/blog/io-in-r/" rel="alternate"></link><published>2016-07-09T18:20:45-07:00</published><updated>2016-07-09T18:20:45-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2016-07-09:/en/blog/io-in-r/</id><summary type="html">&lt;h2 id="readtable-readcsv-readdelim-etc"&gt;read.table, read.csv, read.delim, etc.&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;It is suggested that you use &lt;code&gt;read.csv&lt;/code&gt;/&lt;code&gt;read.delim&lt;/code&gt; and avoid using &lt;code&gt;read.table&lt;/code&gt;.
This is because that the &lt;code&gt;comment.char&lt;/code&gt; is off for &lt;code&gt;read.csv&lt;/code&gt;/&lt;code&gt;read.delim&lt;/code&gt; and on for &lt;code&gt;read.table&lt;/code&gt; by default. 
My experience is that data seldom has …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h2 id="readtable-readcsv-readdelim-etc"&gt;read.table, read.csv, read.delim, etc.&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;It is suggested that you use &lt;code&gt;read.csv&lt;/code&gt;/&lt;code&gt;read.delim&lt;/code&gt; and avoid using &lt;code&gt;read.table&lt;/code&gt;.
This is because that the &lt;code&gt;comment.char&lt;/code&gt; is off for &lt;code&gt;read.csv&lt;/code&gt;/&lt;code&gt;read.delim&lt;/code&gt; and on for &lt;code&gt;read.table&lt;/code&gt; by default. 
My experience is that data seldom has comments in them 
and people are usually not aware that &lt;code&gt;comment.char&lt;/code&gt; is on for &lt;code&gt;read.table&lt;/code&gt; by default. 
When there are "comment chararacters" in data which are not intended to be comment characters,
you screw up if you read data using &lt;code&gt;read.table&lt;/code&gt; and forget to turn off comment using &lt;code&gt;comment.char = ''&lt;/code&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By default, 
lines starting with &lt;code&gt;#&lt;/code&gt; are treated as comment lines 
and thus are ignored when reading data using &lt;code&gt;read.table&lt;/code&gt;, etc.
If a line is not a comment line, 
avoid starting it with &lt;code&gt;#&lt;/code&gt;. 
Or you can specify a different comment character 
(e.g., &lt;code&gt;$&lt;/code&gt; using option &lt;code&gt;comment.char = "$"&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is suggested that you always use &lt;code&gt;stringsAsFactors = FALSE&lt;/code&gt; 
when constructing a data frame (data.frame, as.data.frame, read.table, read.csv, etc.).
Factors causes more troubles than conveniences. 
If you do need factors (for building models),
just manual convert columns to factors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a data row have an extra column/field (e.g., due to missing quotes in CSV format),
R will not throw error but instead treats the data to have a row names column. 
This results in shifted columns in some (shorter) rows. 
You can examining the format of a data file 
using the function &lt;code&gt;count.fields&lt;/code&gt; 
which counts the number of fields in each line.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;read.csv&lt;/code&gt; for standard CSV files while &lt;code&gt;read.csv2&lt;/code&gt; is for European CSV format. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="writetable-writecsv-writedelim-etc"&gt;write.table, write.csv, write.delim, etc.&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;It is suggested that you write data frames into CSV format.
CSV format has a clear definition. 
If you tell people that a file is in CSV format,
they know how to read it. 
But if you tell people that a file is in a general delimited format,
people have to ask about what the delimiter is 
and whether fields are quoted, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The function&lt;code&gt;write.table&lt;/code&gt; writes a data frame or a matrix into a file. 
Note that it can also append data into a file. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nrow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;colnames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;paste0&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;write.table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;out.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x[&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="nf"&gt;write.table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;out.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;append&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col.names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;F&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;By default &lt;code&gt;write.table&lt;/code&gt; output missing values as character NA (&lt;code&gt;na = "NA"&lt;/code&gt;). 
It is suggested that you output missing values as empty strings (na = "") as it is more portable. 
Other programming languages do not recognize character &lt;code&gt;NA's&lt;/code&gt; as missing values. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Always quote fields when you write data into CSV format.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;row.names&lt;/code&gt; have different means in &lt;code&gt;read.table&lt;/code&gt; and &lt;code&gt;write.table&lt;/code&gt;.
&lt;code&gt;row.names&lt;/code&gt; is a logical variable indicating 
whether you want to output row names or not in &lt;code&gt;write.table&lt;/code&gt;,
however, it is not a logical variable indicating whether there is a row names in the data.
It is much more complicated. 
Please refer to the R help doc for detailed explanation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is suggested that you never write row names into files. 
If row names contains useful informtion, 
write row names into file as a column/field.
The reason is that row names causes troubles in IO. 
On one hand,
it is not convenient to read in a file 
with row names into other programming language. 
On another hand,
row names causes side effect in R too.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="ms-excel"&gt;MS Excel&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.thertrader.com/2014/02/11/a-million-ways-to-connect-r-and-excel/"&gt;http://www.thertrader.com/2014/02/11/a-million-ways-to-connect-r-and-excel/&lt;/a&gt;
It is suggested that you avoid using Excel as input/ouput data format. 
CSV is a better alternative.
However, 
if you do have to use Excel as input/output data format,
read the following tips.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;There are lots of ways to read data from and write data into Excel documents. 
For example, 
packages &lt;code&gt;xlsReadWrite&lt;/code&gt;, &lt;code&gt;xlsx&lt;/code&gt;, &lt;code&gt;RODBC&lt;/code&gt; 
(and many more) all offers ways to import data from and export data to Excel documents. 
&lt;code&gt;xlsx&lt;/code&gt; (which offers &lt;code&gt;read.xlsx&lt;/code&gt; and &lt;code&gt;write.xlsx&lt;/code&gt;) is good package for dealing with Excel spreadsheet.
&lt;code&gt;RODBC&lt;/code&gt; is a universal way to deal with all kinds of databases 
(not just Excel spreadsheet). &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is usually very slow to read in (or write to) a large Excel spreadsheet.
It is suggested that you convert large Excel spreadsheets to CSV files first 
and then read in them.
Also, write data into CSV files instead of Excel spreadsheet.
However, 
be careful that the stupid Excel might loss information when converting to CSV format.
Generally speaking, 
this happens when there are very long numbers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Excel might scilently format opened CSV (or imported text) files. 
Generally speaking,
this happens when there are very long numbers in the text file.
Be careful not to introduce undesired changed. 
If you just open a CSV file to view it and do not want change its content, 
then just discard any changes Excel has made. 
If you indeed want to change CSV file in Excel, 
keep your fingers cross. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="binary-data"&gt;Binary Data&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;The function &lt;code&gt;readBin&lt;/code&gt; reads in binary data 
and the function &lt;code&gt;writeBin&lt;/code&gt; writes binary data into files. 
Both of the two functions have limits on the size of data that they can deal at a time. 
For large binary data, 
you have to use &lt;code&gt;readBin/writeBin&lt;/code&gt; multiple times to read/write them from/to files.
&lt;code&gt;readBin&lt;/code&gt; and &lt;code&gt;writeBin&lt;/code&gt; are compatible with &lt;code&gt;fwrite&lt;/code&gt; and &lt;code&gt;fread&lt;/code&gt; in MATLAB. 
&lt;code&gt;fread&lt;/code&gt; and &lt;code&gt;fwrite&lt;/code&gt; are C style functions, ... (to be checked for compatible with c/c++). 
However, &lt;code&gt;readBin&lt;/code&gt; and &lt;code&gt;writeBin&lt;/code&gt; is not compatible with 
Java classes &lt;code&gt;DataOutputStream&lt;/code&gt; and &lt;code&gt;DataInputStream&lt;/code&gt;. 
To read binary data written using &lt;code&gt;DataOutputStream&lt;/code&gt; from Java, 
you can call Java code for reading binary data using &lt;code&gt;rJava&lt;/code&gt; in R; 
to write binary data that is recognized by &lt;code&gt;DataInputStream&lt;/code&gt; in Java, 
you can call Java code for writing binary data using &lt;code&gt;rJava&lt;/code&gt; in R.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="misc"&gt;Misc&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;All most all input/output functions in R support reading data 
from all kinds of source including files, console, clipboard and website.
For example, 
if you have copied a block of data from an Excel document, 
you can read it into R using the following command.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;read.table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;clipboard&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;\t&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is good and quick way to import part of the data from a Excel document into in R. 
You do not have to worry about formula in cells. 
When you read data from Excel, values (instead formulas) are read in.
If the data is on a website, 
you can just pass the URL to &lt;code&gt;read.table&lt;/code&gt; (or &lt;code&gt;read.delim&lt;/code&gt;, &lt;code&gt;read.csv&lt;/code&gt;, etc.) to read it.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;print&lt;/code&gt; prints an R object to the R console 
and &lt;code&gt;cat&lt;/code&gt; can print multiple objects to the R console, clipboard or files. 
There is some difference between the outputs generated by these two functions.
Generally speaking, 
if you want to see the content of an object in R scenario 
(keep special characters as they are), 
you want to use &lt;code&gt;print&lt;/code&gt;; 
if you want to see the content in human readable format
(special characters are translated), 
you want to use function &lt;code&gt;cat&lt;/code&gt;.
I have to mention that &lt;code&gt;cat&lt;/code&gt; doesn't work for all types of R objects 
(e.g. objects of &lt;code&gt;xtable&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The function &lt;code&gt;scan&lt;/code&gt; is extremely powerful and flexible. 
You can skip first &lt;code&gt;k&lt;/code&gt; lines using the option &lt;code&gt;skip = k&lt;/code&gt;.
For example, 
the following command skips the first 5 lines.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;what&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;skip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can skip lines starting with special characters using the option &lt;code&gt;comment.char&lt;/code&gt;.
For example, 
the following command skips lines starting with "#".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;what&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;comment.char&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can decide which special strings are treated as missing values using the option &lt;code&gt;na.string&lt;/code&gt;.
For example,
the following command treats "NA" as missing values.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;what&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;na.string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;NA&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can limit the number of data values/lines to be read in, etc.
Many input functions in R are based on the function &lt;code&gt;scan&lt;/code&gt;, 
for example, &lt;code&gt;read.table&lt;/code&gt;.
These functions inherits the powerfulness and flexibility of &lt;code&gt;scan&lt;/code&gt;. 
&lt;code&gt;scan&lt;/code&gt; is also helpful for interactive programming. 
For example, you can read a string into the variable &lt;code&gt;input&lt;/code&gt; using the following commmand.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;what&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;character&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, &lt;code&gt;scan&lt;/code&gt; is used to read in a vector, 
so the data to be read in &lt;em&gt;at the same time&lt;/em&gt; must be of the same type. &lt;/p&gt;</content><category term="R"></category><category term="IO"></category><category term="programming"></category><category term="CRAN"></category></entry><entry><title>Install the R Package "arrayQualityMetrics"</title><link href="http://www.legendu.net/en/blog/arrayQualityMetrics/" rel="alternate"></link><published>2016-06-11T19:11:28-07:00</published><updated>2016-06-11T19:11:28-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2016-06-11:/en/blog/arrayQualityMetrics/</id><summary type="html">&lt;p&gt;I had to use the R package "arrayQualityMetrics" to check the quality of some gene chips. 
Installing this package in Linux takes a few steps. 
The following is the brief instruction on how to install R package "arayQualityMetrics" in Debian.    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# install the graphics library cairo&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;libcairo2 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I had to use the R package "arrayQualityMetrics" to check the quality of some gene chips. 
Installing this package in Linux takes a few steps. 
The following is the brief instruction on how to install R package "arayQualityMetrics" in Debian.    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# install the graphics library cairo&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;libcairo2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;
&lt;span class="c1"&gt;# install X toolkit intrinsiscs development files&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;libxt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;
&lt;span class="c1"&gt;# install development files for the Gnome XML library&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;libxml2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;
&lt;span class="c1"&gt;# if you have installed BiocInstaller &lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BiocInstaller&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;biocLite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;arrayQualityMetrics&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# if you haven&amp;#39;t installed R package BiocInstaller&lt;/span&gt;
&lt;span class="nf"&gt;source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://bioconductor.org/biocLite.R&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;biocLite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;arrayQualityMetrics&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Installing R package "arrayQualityMetrics" takes a while, so be patient. &lt;/p&gt;</content><category term="research"></category><category term="programming"></category><category term="biostatistics"></category><category term="package"></category><category term="arrayQualityMetrics"></category><category term="R"></category><category term="CRAN"></category></entry><entry><title>Understand Execuation of SQL Statements</title><link href="http://www.legendu.net/en/blog/understand-execuation-of-sql-statements/" rel="alternate"></link><published>2016-06-10T11:25:18-07:00</published><updated>2016-06-10T11:25:18-07:00</updated><author><name>Benjamin Du</name></author><id>tag:www.legendu.net,2016-06-10:/en/blog/understand-execuation-of-sql-statements/</id><summary type="html">&lt;p&gt;A SQL statement selects rows and columns from a big (rectangular) table. 
You put columns that you want to select after &lt;code&gt;select&lt;/code&gt; 
and rows you want to select after &lt;code&gt;from&lt;/code&gt;.
A SQL statement is executed as follows.
First, 
the (inner|left|right|full) &lt;code&gt;join (on)&lt;/code&gt; is executed if any (see …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A SQL statement selects rows and columns from a big (rectangular) table. 
You put columns that you want to select after &lt;code&gt;select&lt;/code&gt; 
and rows you want to select after &lt;code&gt;from&lt;/code&gt;.
A SQL statement is executed as follows.
First, 
the (inner|left|right|full) &lt;code&gt;join (on)&lt;/code&gt; is executed if any (see more explanation later).
Second, 
the &lt;code&gt;where&lt;/code&gt; condition is executed. Conditions before grouping (aggregation) must go into the &lt;code&gt;where&lt;/code&gt; clause.
Third, 
&lt;code&gt;group by (having)&lt;/code&gt; is executed. 
Conditions after grouping (aggregation) must go into the &lt;code&gt;having&lt;/code&gt; clause.
Fourth, 
the &lt;code&gt;sort by&lt;/code&gt; statement is executed if any.
Last, columns (specified in the &lt;code&gt;from&lt;/code&gt; clause) are selected.&lt;/p&gt;
&lt;p&gt;An &lt;code&gt;inner join&lt;/code&gt; first creates a cross join of tables in the &lt;code&gt;join&lt;/code&gt; clause 
(i.e., a Cartesian product of rows from tables in the &lt;code&gt;join&lt;/code&gt; clause), 
then it selects rows satisfying the &lt;code&gt;on&lt;/code&gt; condition from the cross join result. 
A &lt;code&gt;left/right/full join&lt;/code&gt; consists of 2 sub steps. 
First, an &lt;code&gt;inner join (on)&lt;/code&gt; is performed. 
Second, unmatched rows in the left/right/both table(s) are appended into the resulting table of &lt;code&gt;inner join (on)&lt;/code&gt;. 
This means that all rows in the left/right/both table(s) will be in the resulting table
if there is no &lt;code&gt;where&lt;/code&gt; or &lt;code&gt;having&lt;/code&gt; condition in the query.
Notice that unmatched rows in the left/right/both table(s) uses &lt;code&gt;NULL&lt;/code&gt; values for columns in the other table,
which is different from the Cartesian product (which uses values of the matched row). 
After joining, 
the &lt;code&gt;where&lt;/code&gt; clause is executed. 
This means that the &lt;code&gt;where&lt;/code&gt; condition is executed after the &lt;code&gt;on&lt;/code&gt; condition in &lt;code&gt;join&lt;/code&gt;. 
For an &lt;code&gt;inner join&lt;/code&gt;, 
the &lt;code&gt;where&lt;/code&gt; condition can be put in the &lt;code&gt;on&lt;/code&gt; condition 
using &lt;code&gt;and&lt;/code&gt; because no extras (unmatched rows) are appended after the &lt;code&gt;on&lt;/code&gt; condition is executed. 
However, for a &lt;code&gt;left/right/full join&lt;/code&gt; (extra unmatched rows are appended after &lt;code&gt;on&lt;/code&gt; condition is executed) 
the &lt;code&gt;where&lt;/code&gt; condition cannot be combined with the &lt;code&gt;on&lt;/code&gt; condition (using &lt;code&gt;and&lt;/code&gt;), generally speaking. 
For example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; 
    &lt;span class="n"&gt;A&lt;/span&gt;
&lt;span class="k"&gt;inner&lt;/span&gt; &lt;span class="k"&gt;join&lt;/span&gt; 
    &lt;span class="n"&gt;B&lt;/span&gt;
&lt;span class="k"&gt;on&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="k"&gt;where&lt;/span&gt; 
    &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;returns the same result as &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; 
    &lt;span class="n"&gt;A&lt;/span&gt;
&lt;span class="k"&gt;inner&lt;/span&gt; &lt;span class="k"&gt;join&lt;/span&gt; 
    &lt;span class="n"&gt;B&lt;/span&gt;
&lt;span class="k"&gt;on&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; 
    &lt;span class="n"&gt;A&lt;/span&gt;
&lt;span class="k"&gt;left&lt;/span&gt; &lt;span class="k"&gt;join&lt;/span&gt; 
    &lt;span class="n"&gt;B&lt;/span&gt;
&lt;span class="k"&gt;on&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="k"&gt;where&lt;/span&gt; 
    &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;returns different result from&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; 
    &lt;span class="n"&gt;A&lt;/span&gt;
&lt;span class="k"&gt;left&lt;/span&gt; &lt;span class="k"&gt;join&lt;/span&gt; 
    &lt;span class="n"&gt;B&lt;/span&gt;
&lt;span class="k"&gt;on&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="k"&gt;where&lt;/span&gt; 
    &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;generally speaking. 
For good practice, you'd better separate the &lt;code&gt;where&lt;/code&gt; and &lt;code&gt;on&lt;/code&gt; conditions.&lt;/p&gt;
&lt;p&gt;Let's see some real examples to better understand the execution of SQL code.
Suppose we have 2 tables A and B (see below) both of which contain only 1 integer column named &lt;code&gt;id&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="right"&gt;id&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="right"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="right"&gt;id&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="right"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The following presents some join queries and corresponding results.
Note that question marks (&lt;code&gt;?&lt;/code&gt;) stand for null values in the following results.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;A inner join B&lt;/span&gt;
&lt;span class="cm"&gt;Only matched rows are kept, which is easy to understand.&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="k"&gt;select&lt;/span&gt; 
    &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt;
&lt;span class="k"&gt;inner&lt;/span&gt; &lt;span class="k"&gt;join&lt;/span&gt;
    &lt;span class="n"&gt;B&lt;/span&gt;
&lt;span class="k"&gt;on&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;&lt;/th&gt;
&lt;th align="center"&gt;A.id&lt;/th&gt;
&lt;th align="center"&gt;B.id&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;6&lt;/td&gt;
&lt;td align="center"&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td align="center"&gt;10&lt;/td&gt;
&lt;td align="center"&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;td align="center"&gt;12&lt;/td&gt;
&lt;td align="center"&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;5&lt;/td&gt;
&lt;td align="center"&gt;9&lt;/td&gt;
&lt;td align="center"&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;6&lt;/td&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;7&lt;/td&gt;
&lt;td align="center"&gt;5&lt;/td&gt;
&lt;td align="center"&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;8&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;9&lt;/td&gt;
&lt;td align="center"&gt;15&lt;/td&gt;
&lt;td align="center"&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;10&lt;/td&gt;
&lt;td align="center"&gt;8&lt;/td&gt;
&lt;td align="center"&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;11&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;12&lt;/td&gt;
&lt;td align="center"&gt;7&lt;/td&gt;
&lt;td align="center"&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;A left join B&lt;/span&gt;
&lt;span class="cm"&gt;Unmatched rows in A are kept but B.id is null for these unmatched rows.&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="k"&gt;select&lt;/span&gt; 
    &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt;
&lt;span class="k"&gt;left&lt;/span&gt; &lt;span class="k"&gt;join&lt;/span&gt;
    &lt;span class="n"&gt;B&lt;/span&gt;
&lt;span class="k"&gt;on&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice &lt;code&gt;B.id&lt;/code&gt; is set to null for rows in table A that do not have matching rows in table B.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;&lt;/th&gt;
&lt;th align="center"&gt;A.id&lt;/th&gt;
&lt;th align="center"&gt;B.id&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;11&lt;/td&gt;
&lt;td align="center"&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;6&lt;/td&gt;
&lt;td align="center"&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td align="center"&gt;13&lt;/td&gt;
&lt;td align="center"&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;5&lt;/td&gt;
&lt;td align="center"&gt;10&lt;/td&gt;
&lt;td align="center"&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;6&lt;/td&gt;
&lt;td align="center"&gt;12&lt;/td&gt;
&lt;td align="center"&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;7&lt;/td&gt;
&lt;td align="center"&gt;9&lt;/td&gt;
&lt;td align="center"&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;8&lt;/td&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;9&lt;/td&gt;
&lt;td align="center"&gt;5&lt;/td&gt;
&lt;td align="center"&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;10&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;11&lt;/td&gt;
&lt;td align="center"&gt;15&lt;/td&gt;
&lt;td align="center"&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;12&lt;/td&gt;
&lt;td align="center"&gt;14&lt;/td&gt;
&lt;td align="center"&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;13&lt;/td&gt;
&lt;td align="center"&gt;8&lt;/td&gt;
&lt;td align="center"&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;14&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;15&lt;/td&gt;
&lt;td align="center"&gt;7&lt;/td&gt;
&lt;td align="center"&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; 
    &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt;
&lt;span class="k"&gt;left&lt;/span&gt; &lt;span class="k"&gt;join&lt;/span&gt;
    &lt;span class="n"&gt;B&lt;/span&gt;
&lt;span class="k"&gt;on&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="k"&gt;and&lt;/span&gt; 
   &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; 
&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;&lt;/th&gt;
&lt;th align="center"&gt;A.id&lt;/th&gt;
&lt;th align="center"&gt;B.id&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;11&lt;/td&gt;
&lt;td align="center"&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;6&lt;/td&gt;
&lt;td align="center"&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td align="center"&gt;13&lt;/td&gt;
&lt;td align="center"&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td align="center"&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;5&lt;/td&gt;
&lt;td align="center"&gt;10&lt;/td&gt;
&lt;td align="center"&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;6&lt;/td&gt;
&lt;td align="center"&gt;12&lt;/td&gt;
&lt;td align="center"&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;7&lt;/td&gt;
&lt;td align="center"&gt;9&lt;/td&gt;
&lt;td align="center"&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;8&lt;/td&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;td align="center"&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;9&lt;/td&gt;
&lt;td align="center"&gt;5&lt;/td&gt;
&lt;td align="center"&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;10&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;11&lt;/td&gt;
&lt;td align="center"&gt;15&lt;/td&gt;
&lt;td align="center"&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;12&lt;/td&gt;
&lt;td align="center"&gt;14&lt;/td&gt;
&lt;td align="center"&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;13&lt;/td&gt;
&lt;td align="center"&gt;8&lt;/td&gt;
&lt;td align="center"&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;14&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;15&lt;/td&gt;
&lt;td align="center"&gt;7&lt;/td&gt;
&lt;td align="center"&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;Use where to further select records after inner join.&lt;/span&gt;
&lt;span class="cm"&gt;Together with the query above, &lt;/span&gt;
&lt;span class="cm"&gt;it shows the different between `on condition1 and condition2` and `on condition1 where condition2`.&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="k"&gt;select&lt;/span&gt; 
    &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt;
&lt;span class="k"&gt;left&lt;/span&gt; &lt;span class="k"&gt;join&lt;/span&gt;
    &lt;span class="n"&gt;B&lt;/span&gt;
&lt;span class="k"&gt;on&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="k"&gt;where&lt;/span&gt; 
   &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; 
&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;&lt;/th&gt;
&lt;th align="center"&gt;id&lt;/th&gt;
&lt;th align="center"&gt;id&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;11&lt;/td&gt;
&lt;td align="center"&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;13&lt;/td&gt;
&lt;td align="center"&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td align="center"&gt;12&lt;/td&gt;
&lt;td align="center"&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;td align="center"&gt;15&lt;/td&gt;
&lt;td align="center"&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;5&lt;/td&gt;
&lt;td align="center"&gt;14&lt;/td&gt;
&lt;td align="center"&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;Use where to further select records. &lt;/span&gt;
&lt;span class="cm"&gt;Notice that rows with B.id being `null` are dropped &lt;/span&gt;
&lt;span class="cm"&gt;because they are not eligible for condition `B.id &amp;gt;10`.&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="k"&gt;select&lt;/span&gt; 
    &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt;
&lt;span class="k"&gt;left&lt;/span&gt; &lt;span class="k"&gt;join&lt;/span&gt;
    &lt;span class="n"&gt;B&lt;/span&gt;
&lt;span class="k"&gt;on&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="k"&gt;where&lt;/span&gt; 
   &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; 
&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;&lt;/th&gt;
&lt;th align="center"&gt;A.id&lt;/th&gt;
&lt;th align="center"&gt;B.id&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;12&lt;/td&gt;
&lt;td align="center"&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;15&lt;/td&gt;
&lt;td align="center"&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;https://social.msdn.microsoft.com/Forums/getfile/208801&lt;/p&gt;</content><category term="programming"></category><category term="SQL"></category><category term="join on"></category><category term="having"></category><category term="where"></category><category term="group by"></category><category term="null value"></category></entry><entry><title>Useful Packages and Commands for LaTex</title><link href="http://www.legendu.net/en/blog/useful-packages-for-latex/" rel="alternate"></link><published>2016-05-29T11:37:43-07:00</published><updated>2016-05-29T11:37:43-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2016-05-29:/en/blog/useful-packages-for-latex/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/latex/latex.gif" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;h2 id="math-packages"&gt;Math Packages&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;\usepackage{amssymb} &lt;ul&gt;
&lt;li&gt;popular math fonts&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;\usepackage{dsfont} &lt;ul&gt;
&lt;li&gt;&lt;code&gt;\mathds&lt;/code&gt; font&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;\usepackage{bm} % bold math symbols&lt;ul&gt;
&lt;li&gt;bold math symbols&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;\usepackage{amsmath} &lt;ul&gt;
&lt;li&gt;math formulas.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;\usepackage{amsthm} &lt;ul&gt;
&lt;li&gt;theorem environments&lt;/li&gt;
&lt;li&gt;proof enviroment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="list-packages"&gt;List Packages&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;\usepackage{enumerate} &lt;ul&gt;
&lt;li&gt;universal list&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="graphics-packages"&gt;Graphics Packages&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;\usepackage{ifpdf} &lt;ul&gt;
&lt;li&gt;allow including figures without extensions and select the right type of …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/latex/latex.gif" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;h2 id="math-packages"&gt;Math Packages&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;\usepackage{amssymb} &lt;ul&gt;
&lt;li&gt;popular math fonts&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;\usepackage{dsfont} &lt;ul&gt;
&lt;li&gt;&lt;code&gt;\mathds&lt;/code&gt; font&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;\usepackage{bm} % bold math symbols&lt;ul&gt;
&lt;li&gt;bold math symbols&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;\usepackage{amsmath} &lt;ul&gt;
&lt;li&gt;math formulas.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;\usepackage{amsthm} &lt;ul&gt;
&lt;li&gt;theorem environments&lt;/li&gt;
&lt;li&gt;proof enviroment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="list-packages"&gt;List Packages&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;\usepackage{enumerate} &lt;ul&gt;
&lt;li&gt;universal list&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="graphics-packages"&gt;Graphics Packages&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;\usepackage{ifpdf} &lt;ul&gt;
&lt;li&gt;allow including figures without extensions and select the right type of figures according to the compiler used&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;\usepackage{graphicx} &lt;ul&gt;
&lt;li&gt;for including pictures&lt;/li&gt;
&lt;li&gt;the graphics driver is selected automatically if none is specified (via arguments of the package) &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;\usepackage{psfrag} &lt;ul&gt;
&lt;li&gt;for editing eps figures in Latex (e.g., replacing text)&lt;/li&gt;
&lt;li&gt;need to compile using command &lt;code&gt;latex&lt;/code&gt;, &lt;code&gt;dvips&lt;/code&gt; and &lt;code&gt;ps2pdf&lt;/code&gt; in sequence&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;\usepackage{epsfig} &lt;ul&gt;
&lt;li&gt;for including eps figures&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="bibliography"&gt;Bibliography&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;\usepackage{natbib} &lt;ul&gt;
&lt;li&gt;for citing refernce&lt;/li&gt;
&lt;li&gt;compatible with bibtex&lt;/li&gt;
&lt;li&gt;compile using &lt;code&gt;pdflatex/latex&lt;/code&gt;, &lt;code&gt;bibtex&lt;/code&gt;, &lt;code&gt;pdflatex/latex&lt;/code&gt;, &lt;code&gt;pdflatex/latex&lt;/code&gt;, &lt;code&gt;pdflatex/latex&lt;/code&gt; in sequence&lt;/li&gt;
&lt;li&gt;some Latex IDE (e.g., WinEdt) has a single button/command (PDFTexify) for simplifying the compiling process&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="color"&gt;Color&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;\usepackage[usenames,dvipsnames]{color} &lt;ul&gt;
&lt;li&gt;using color by name&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="mutiple-files"&gt;Mutiple Files&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;You can use command &lt;code&gt;\input&lt;/code&gt; or &lt;code&gt;\include&lt;/code&gt; to include Latex source files. 
Generally speaking, 
&lt;code&gt;\input&lt;/code&gt; is preferred over &lt;code&gt;\include&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;\usepackage{subfiles}
For more information, please refer to &lt;a href="http://en.wikibooks.org/wiki/LaTeX/General_Guidelines"&gt;wiki book&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="chinese-packages"&gt;Chinese Packages&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;\usepackage{xeCJK} &lt;ul&gt;
&lt;li&gt;no need if use ctexart, ctexbook and so on&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;\usepackage{fontspec}&lt;ul&gt;
&lt;li&gt;choose font theme &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;\setCJKmainfont{Adobe Song Std} &lt;ul&gt;
&lt;li&gt;use adobe fonts as the main font&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="color"></category><category term="programming"></category><category term="list"></category><category term="Latex"></category><category term="package"></category><category term="bibliography"></category><category term="enumerate"></category><category term="formula"></category><category term="math"></category><category term="graphics"></category></entry><entry><title>Missing Values in SAS</title><link href="http://www.legendu.net/en/blog/missing-values-in-sas/" rel="alternate"></link><published>2015-08-28T17:02:54-07:00</published><updated>2015-08-28T17:02:54-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-08-28:/en/blog/missing-values-in-sas/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;SAS uses a dot (&lt;code&gt;.&lt;/code&gt;) to stand for a numeric missing value 
    and any number (can be 0 which correspond to the blank string &lt;code&gt;""&lt;/code&gt;) 
    of white spaces (e.g., &lt;code&gt;"  "&lt;/code&gt;) for character missing value. 
    (This also means that you cannot save pure white spaces in SAS.) 
    However, 
    when you enter values after …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;SAS uses a dot (&lt;code&gt;.&lt;/code&gt;) to stand for a numeric missing value 
    and any number (can be 0 which correspond to the blank string &lt;code&gt;""&lt;/code&gt;) 
    of white spaces (e.g., &lt;code&gt;"  "&lt;/code&gt;) for character missing value. 
    (This also means that you cannot save pure white spaces in SAS.) 
    However, 
    when you enter values after &lt;code&gt;datalines&lt;/code&gt; in the data step,
    you always use dots (not a blank/space) to stand for missing values 
    (no matter a variable is numeric or character). 
    You can use &lt;code&gt;where v is null&lt;/code&gt; or &lt;code&gt;where v is missing&lt;/code&gt; 
    to check whether the variable &lt;code&gt;v&lt;/code&gt; is null/missing.
    Here &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;missing&lt;/code&gt; have the same meaning. 
    However, 
    both of &lt;code&gt;is null&lt;/code&gt; and &lt;code&gt;is missing&lt;/code&gt; can only be used 
    in the &lt;code&gt;where&lt;/code&gt; clause (in any procedure) and the &lt;code&gt;on&lt;/code&gt; clause (in the SQL procedure).
    In other logical comparisons (e.g., if), 
    you have to use &lt;code&gt;v = .&lt;/code&gt; or &lt;code&gt;v = " "&lt;/code&gt; 
    according to whether &lt;code&gt;v&lt;/code&gt; is a numeric variable or a character variable.
    In Teradata SQL, 
    &lt;code&gt;null&lt;/code&gt; means missing value and you can use &lt;code&gt;null&lt;/code&gt; (and only &lt;code&gt;null&lt;/code&gt;) 
    for both numeric and character variables and in any logical comparisons. 
    When SAS displays missing values, 
    a numerical missing value is displayed as a dot 
    and a character missing value is displayed as a blank/space.
    When Teradata SQL Assistant displays query results, 
    &lt;code&gt;null&lt;/code&gt; values are indicated by &lt;code&gt;?&lt;/code&gt;.
    It is suggested that you always &lt;code&gt;is null&lt;/code&gt; 
    instead of &lt;code&gt;is missing&lt;/code&gt; or &lt;code&gt;v = .&lt;/code&gt; or &lt;code&gt;v = " "&lt;/code&gt; in &lt;code&gt;where&lt;/code&gt; clauses in SAS. 
    This makes your SAS SQL code more portable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the IML procedure (seems also true for data step?) missing values 
    and white space (no matter how many) all have length 1,
    which is ridiculous.
    You have to be very careful when you work with string in &lt;code&gt;proc iml&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SAS treats the numeric missing value (&lt;code&gt;.&lt;/code&gt;) as the smallest numerical value.
    When you check whether a numeric value is negative, 
    you have to first get rid of missing values. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Most functions (e.g., &lt;code&gt;sum&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, etc.) in SAS ignores missing values
    instead of propagate missing values. 
    This is a little bit crazy as propagating missing values sounds more reasonable.
    You'd better filtering out missing values (if any) before you do calculations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;input("", 8.)&lt;/code&gt; returns &lt;code&gt;.&lt;/code&gt; (numeric missing value) 
    while &lt;code&gt;put(., 3.)&lt;/code&gt; returns &lt;code&gt;"."&lt;/code&gt; instead of &lt;code&gt;""&lt;/code&gt; (character missing value).
    The inconsistent is annoying.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="questions"&gt;Questions&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Numeric missing value (&lt;code&gt;.&lt;/code&gt;) affects functions such as &lt;code&gt;lag&lt;/code&gt; and &lt;code&gt;dif&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the missing(.) function is strange, check it, and I think it should replaced by &lt;code&gt;x is missing&lt;/code&gt; or &lt;code&gt;x is null&lt;/code&gt; ...&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="programming"></category><category term="SAS"></category><category term="missing values"></category><category term="null"></category><category term="white space"></category></entry><entry><title>Transpose Data in SAS</title><link href="http://www.legendu.net/en/blog/transpose-data-in-sas/" rel="alternate"></link><published>2015-08-26T22:09:17-07:00</published><updated>2015-08-26T22:09:17-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-08-26:/en/blog/transpose-data-in-sas/</id><summary type="html">&lt;p&gt;You can use the transpose procedure to tranpose a fat/thin data to a thin/fat data in SAS.
For example, 
suppose we have a data set s1 in SAS.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;data &lt;/span&gt;s1; 
    &lt;span class="k"&gt;input&lt;/span&gt; famid faminc96 faminc97 faminc98 spend96 spend97 spend98 ; 
&lt;span class="k"&gt;    datalines; &lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;1 40000 40500 41000 38000 39000 40000 &lt;/span&gt;
&lt;span class="x"&gt;2 45000 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;You can use the transpose procedure to tranpose a fat/thin data to a thin/fat data in SAS.
For example, 
suppose we have a data set s1 in SAS.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;data &lt;/span&gt;s1; 
    &lt;span class="k"&gt;input&lt;/span&gt; famid faminc96 faminc97 faminc98 spend96 spend97 spend98 ; 
&lt;span class="k"&gt;    datalines; &lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;1 40000 40500 41000 38000 39000 40000 &lt;/span&gt;
&lt;span class="x"&gt;2 45000 45400 45800 42000 43000 44000 &lt;/span&gt;
&lt;span class="x"&gt;3 75000 76000 77000 70000 71000 72000 &lt;/span&gt;
&lt;span class="x"&gt;; &lt;/span&gt;
&lt;span class="kr"&gt;run;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can transpose the fat data set to a thin one using the transpose procedure.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;proc transpose &lt;/span&gt;data=s1 &lt;span class="k"&gt;out&lt;/span&gt;=s2 (&lt;span class="k"&gt;rename&lt;/span&gt;=(&lt;span class="kc"&gt;_name_&lt;/span&gt;=year)) prefix=&lt;span class="k"&gt;x&lt;/span&gt;;
    &lt;span class="k"&gt;by&lt;/span&gt; famid;
    var faminc96-faminc98&lt;span class="kr"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;run;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This gives you the following data set.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;famid&lt;/th&gt;
&lt;th align="center"&gt;year&lt;/th&gt;
&lt;th align="center"&gt;x1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;faminc96&lt;/td&gt;
&lt;td align="center"&gt;40000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;faminc97&lt;/td&gt;
&lt;td align="center"&gt;40500&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;faminc98&lt;/td&gt;
&lt;td align="center"&gt;41000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;faminc96&lt;/td&gt;
&lt;td align="center"&gt;45000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;faminc97&lt;/td&gt;
&lt;td align="center"&gt;45400&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;faminc98&lt;/td&gt;
&lt;td align="center"&gt;45800&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td align="center"&gt;faminc96&lt;/td&gt;
&lt;td align="center"&gt;75000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td align="center"&gt;faminc97&lt;/td&gt;
&lt;td align="center"&gt;76000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td align="center"&gt;faminc98&lt;/td&gt;
&lt;td align="center"&gt;77000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;You can transpose this thin data back to a fat one. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;proc transpose &lt;/span&gt;data=s2 &lt;span class="k"&gt;out&lt;/span&gt;=s3 (&lt;span class="k"&gt;drop&lt;/span&gt;=&lt;span class="kc"&gt;_name_&lt;/span&gt;);
    &lt;span class="k"&gt;by&lt;/span&gt; famid ;
    id year&lt;span class="kr"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;run;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The following are a few tips.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;id&lt;/code&gt; statement specifies one or more variables in the input data set 
whose formatted values name the transposed variables in the output data set.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;var&lt;/code&gt; statement specified variables in the input data set to be transposed. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;by&lt;/code&gt; statement defines groups and the transpose will be done in each &lt;code&gt;by&lt;/code&gt; group.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="programming"></category><category term="SAS"></category><category term="data manipulation"></category><category term="transpose"></category></entry><entry><title>Write R Code that Runs Faster</title><link href="http://www.legendu.net/en/blog/fast-computing-r/" rel="alternate"></link><published>2015-08-26T22:08:17-07:00</published><updated>2015-08-26T22:08:17-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-08-26:/en/blog/fast-computing-r/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/r/run-fast.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;R is a popular statistical software which is famous for enormous amout of
packages. The syntax of R is very flexible with make it convenient at the cost
of performance. R is indeed slow compared to many other scripting languages, but
there are a few tricks which can make your …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/r/run-fast.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;R is a popular statistical software which is famous for enormous amout of
packages. The syntax of R is very flexible with make it convenient at the cost
of performance. R is indeed slow compared to many other scripting languages, but
there are a few tricks which can make your R code run faster.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use vector and matrix operation if possible. Theses &lt;code&gt;*apply&lt;/code&gt; functions
are very helpful for this purpose.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avoid changing the type and size of object in R. Though we use R object
as if they are typeless, they have type actually. Changing the type and size
of a R object forces R to reallocate a memory space which is of course
ineffecient. I have seen so many people writing R code like &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;NULL&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;condition&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;    
&lt;span class="nv"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;,&lt;span class="nv"&gt;fun&lt;/span&gt;&lt;span class="ss"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rbind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you know the length of &lt;code&gt;s&lt;/code&gt; ahead, it is better to allocate &lt;code&gt;s&lt;/code&gt; as a
vector/list and access its elements in the loop instead of changing its
size. R coerces between different types of object implicitly whenever necessary.
For example, if you have a data frame with columns of the same type, 
you can do many matrix operations on it because R coerces the data frame to 
a matrix when needed. This is very inefficient especially when you have a large 
data frame. A better way is first convert the data frame to a matrix,
and then operate on the matrix. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;foreach(i=1:n) %dopar% {}&lt;/code&gt; to do parallel computing if applicable
(you check my another post on parallel computing). Even if a &lt;code&gt;for&lt;/code&gt; loop is
not parallelizeable, &lt;code&gt;foreach(i=1:n) %do% {}&lt;/code&gt; is a better alternative. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use native code (e.g., Fortran, C/C++) for computationally intensive job if applicable. 
Though native code can increase the performance, there is overheading to invoke native code. 
It is less benefitial to invoke native code many times to do a smart part of job each time. 
You have to use command &lt;code&gt;R CMD SHLIB file_to_compile&lt;/code&gt; to compile native code, 
and use the function &lt;code&gt;dyn.load&lt;/code&gt; to load the shared library object. 
A more convenient way is to use R package "Rcpp" if you are confident about writing C++ code. 
However, you have to pay extra attention when you interact between R and other programming language. 
For example, passing arrays betwwen R and other languages can be tricky. 
For more information about this, refer to &lt;a href="http://dclong.github.io/en/2012/05/r-interface-other-languages/"&gt;this post&lt;/a&gt;.    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Split big data object (e.g., big data frame or matrix) to smaller ones,
and operate on these smaller objects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avoid creating too many objects in the each working environment. Not having
enough memeory can not only make your code run slower but also make it fail
to run if have to allocate big vectors. One way to do this is to writing
small functions and run your functions instead of running everything
directly in a working environment. Small functions make sure that objects
can be garbage collected quickly when they are no longer needed. If you leave them in
the working environment, they will never release memory seized. Partition
big work into smaller functions also helps reducing bugs. Aftering creating
and remove big data objects, you can also call the function &lt;code&gt;gc&lt;/code&gt; manually to
collect garbage. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;double(n)&lt;/code&gt; to create a vector of length &lt;code&gt;n&lt;/code&gt; instead of using code
&lt;code&gt;rep(0,n)&lt;/code&gt;, and similar for others.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use matrix instead of data frame wheneve possible. Actually data frame
cause problem in many cases. Only use data frame when necessary.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to be continued ...&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="DLL"></category><category term="programming"></category><category term="HPC"></category><category term="high performance computing"></category><category term="parallel"></category><category term="R"></category><category term="memory"></category><category term="GC"></category><category term="speedup"></category><category term="fast"></category><category term="CRAN"></category></entry><entry><title>Working with Class in C++</title><link href="http://www.legendu.net/en/blog/working-with-class-in-cpp/" rel="alternate"></link><published>2015-08-05T10:56:31-07:00</published><updated>2015-08-05T10:56:31-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-08-05:/en/blog/working-with-class-in-cpp/</id><summary type="html">&lt;p&gt;Illustrative examples for the following discussions can be found 
&lt;a href="https://github.com/dclong/cearn/tree/master/class"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;It is suggested that you also provide a default constructor 
if you ever provide a user-defined constructor when writing a C++ class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you want to allow deleting a derived class from a pointer of the base class,
you have …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Illustrative examples for the following discussions can be found 
&lt;a href="https://github.com/dclong/cearn/tree/master/class"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;It is suggested that you also provide a default constructor 
if you ever provide a user-defined constructor when writing a C++ class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you want to allow deleting a derived class from a pointer of the base class,
you have to make the destructor of the base class &lt;code&gt;public&lt;/code&gt; and &lt;code&gt;virtual&lt;/code&gt; 
even if it does nothing. 
If you want to prevent deleting a derived class from a pointer of the base class, 
make the descturctor of the base class &lt;code&gt;protected&lt;/code&gt; and &lt;code&gt;virtual&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you derive a class from a base class, 
the destructor of the base class is called automatically 
so that you do not have to call it manually.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a derived class &lt;code&gt;D&lt;/code&gt; has a method with the name &lt;code&gt;fun&lt;/code&gt;, 
then all non-virtual methods with the name &lt;code&gt;fun&lt;/code&gt; (no matter what signature they have) in its 
base class &lt;code&gt;B&lt;/code&gt; are &lt;code&gt;hidden&lt;/code&gt; by the method &lt;code&gt;fun&lt;/code&gt; in &lt;code&gt;D&lt;/code&gt;.
Suppose &lt;code&gt;d&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are instances of the class &lt;code&gt;D&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; respectively,
and you invoke the method &lt;code&gt;fun&lt;/code&gt; throught these two instances, 
then everything works OK (in the sense that the &lt;code&gt;right&lt;/code&gt; method is invoked).
However, this is different from &lt;code&gt;overridding&lt;/code&gt;.
The problem is that &lt;code&gt;hidden&lt;/code&gt; does not support polymorphism. 
If you have a pointer of the base class &lt;code&gt;B&lt;/code&gt; pointing to an instance of the 
derived class &lt;code&gt;D&lt;/code&gt;, and you invoke the method via the pointer, 
then &lt;code&gt;fun&lt;/code&gt; of the base class &lt;code&gt;B&lt;/code&gt; will be called. 
To support polymophism, you have to &lt;code&gt;override&lt;/code&gt; the method &lt;code&gt;fun&lt;/code&gt; in the base class &lt;code&gt;B&lt;/code&gt;.
To do this, you have to mark &lt;code&gt;fun&lt;/code&gt; as virtual in the base class. 
To help the compiler (and also make your code more readable), 
you can use &lt;code&gt;override&lt;/code&gt; after the signature of method explicitly.
&lt;a href="https://github.com/dclong/cearn/tree/master/class/inheritance"&gt;Here&lt;/a&gt; is 
an example illustrating problems discussed above. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Overriding method must have the same return type as the overrided method.
(not sure whether this is required in Java)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you write your own version constructor for a class, 
you'd better also provide the copy/move constructor and assignment operator. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You'd better not use lvalue references in a class that point to an object outside the class.
A better way is to pass the object by lvalue reference to methods that need it.
If you ever decide to use a lvalue reference in a class that point to an object outside the class, 
you must initialize it in the initialization list of a constructor. 
This is because when you initialize a lvalue reference, 
you must point it to a valide object. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generally speaking, member variables should not be declared as public,
unless they are &lt;code&gt;static constant&lt;/code&gt;. 
Also you should not declare member variables as &lt;code&gt;protected&lt;/code&gt; unless 
you are sure that the derived classes want to access these member variables directly. 
If you define a proteced member &lt;code&gt;m&lt;/code&gt; in a base class &lt;code&gt;B&lt;/code&gt;, 
a derived class &lt;code&gt;D&lt;/code&gt; can access and modify (if &lt;code&gt;m&lt;/code&gt; is a data member) &lt;code&gt;m&lt;/code&gt; in its own class or throught its own instances
but not throught other arbitrary object.
For example, if &lt;code&gt;b&lt;/code&gt; is an object of the base class &lt;code&gt;B&lt;/code&gt;, 
you cannot access or modify &lt;code&gt;b.m&lt;/code&gt; directly in the definition of the derived class &lt;code&gt;D&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is suggested that you provide a &lt;code&gt;to_string&lt;/code&gt; method, 
rather than overridding the &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; operator. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You'd better not use overloading and default parameters at the same time. 
Because this might make compiler fail to find the right version of function/method to call. 
Generally speaking, overloading is more powerful and thus prefereed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inheritance works with template class, 
i.e., you can derive class from template classes. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;swap&lt;/code&gt; method can make the implementation of copy and move structor unified and thus more conveneint. 
It is suggested that you make the &lt;code&gt;swap&lt;/code&gt; function &lt;code&gt;public&lt;/code&gt; (at least &lt;code&gt;protected&lt;/code&gt;) if you provide one.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a class have many variables to be initialized, 
you can think of intializing non-critical variables in the definition 
of the class and provide public method to access and modify them. 
This make it easier to implement constructors. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Always mark a method as &lt;code&gt;const&lt;/code&gt; if it does not change the state of the object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is suggested that you intialize member variables in the constructor initializeing list 
(after &lt;code&gt;:&lt;/code&gt; before &lt;code&gt;{&lt;/code&gt;).
Surely you can achieve the same by assigning values to member variables in the body of constructors, 
but in this way these member variables are first initialized to default values and then assigned values,
which is not as efficient.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="virtuality"&gt;Virtuality&lt;/h2&gt;
&lt;p&gt;The following are some guidelines for virtuality from Herb Sutter.
The original article can be found &lt;a href="http://www.gotw.ca/publications/mill18.htm"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Prefer to make interfaces nonvirtual, using Template Method.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prefer to make virtual functions private.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Only if derived classes need to invoke the base implementation of a virtual function, make the virtual function protected.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A base class destructor should be either public and virtual, or protected and nonvirtual.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A few points to add:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A virtual method can be overridden by a derived class even if it is private.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A class without a public destructor cannot be used by itself. 
It servers as a base class only. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="C++"></category><category term="destructor"></category><category term="programming"></category><category term="inheritance"></category><category term="override"></category><category term="class"></category><category term="hidding"></category><category term="constructor"></category></entry><entry><title>Compile MATLAB Code</title><link href="http://www.legendu.net/en/blog/compile-matlab-code/" rel="alternate"></link><published>2015-06-07T23:48:09-07:00</published><updated>2015-06-07T23:48:09-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-06-07:/en/blog/compile-matlab-code/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;MATLAB code can be compile to C/C++ code or stand alone applications. 
Usually you can run the stand-alone application in Windows system directly, 
but for Linux system it is a little headachy. 
The stand-alone application usually takes less than 50% of the time 
that the original MATLAB code takes …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;MATLAB code can be compile to C/C++ code or stand alone applications. 
Usually you can run the stand-alone application in Windows system directly, 
but for Linux system it is a little headachy. 
The stand-alone application usually takes less than 50% of the time 
that the original MATLAB code takes to run.
This depend on different situations. 
It can happen that the stand-alone application runs slower than the original MATLAB code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To compile MATLAB code to c code, 
you can use &lt;code&gt;mcc -mc mainfn sub1fn sub2fn&lt;/code&gt;, 
and to produce an stand alone executable file from c files,
you can use &lt;code&gt;mbuild mainfun sub1fn sub2fn&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To compile MATLAB code to c++ code 
and to create a corresponding stand-alone executable file 
you can use &lt;code&gt;mcc -p mainfn sub1fn sub2fn&lt;/code&gt;. 
To compile MATLAB code that contains Handle Graphics functions into C++ 
and to create a corresponding stand-alone executable file, 
you can use &lt;code&gt;mcc -B sglcppp mainfn sub1fn sub2fn&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To compile MATLAB code to c and to create corresponding stand-alone executable file, 
you can use &lt;code&gt;mcc -m mainfn sub1fn sub2fn&lt;/code&gt;. 
To compile MATLAB code that contains Handle Graphics functions into c 
and to crate a corresponding stan-alone executable file, 
you can use &lt;code&gt;mcc -B sgl mainfn sub1fn sub2fn&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you use parallel computing, 
you will not be able to run the compiled application (at least before version 2010b) 
unless you have MATLAB Distributed Computing Server (MDCS) available on a computer cluster. 
If you have access to a MDCS, 
there is little necessary for you to compile your MATLAB parallel code to a stand-alone application, 
so just do not bother to compile your MATLAB parallel code.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="compile"></category><category term="compiler"></category><category term="programming"></category><category term="MATLAB"></category></entry><entry><title>Import/Export Data to/from SAS</title><link href="http://www.legendu.net/en/blog/import-export-data-sas/" rel="alternate"></link><published>2015-05-30T14:20:50-07:00</published><updated>2015-05-30T14:20:50-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-05-30:/en/blog/import-export-data-sas/</id><summary type="html">&lt;h2 id="import-data-to-sas"&gt;Import Data to SAS&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;IMPORT&lt;/code&gt; procedure is based on the &lt;code&gt;DATA&lt;/code&gt; step.
When you run an &lt;code&gt;IMPORT&lt;/code&gt; procedure, 
the unlying data step code is printed into the log.
Sometimes the &lt;code&gt;IMPORT&lt;/code&gt; procedure does a little bit extra work 
to automatically decide the most possible format you want (especially when …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h2 id="import-data-to-sas"&gt;Import Data to SAS&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;IMPORT&lt;/code&gt; procedure is based on the &lt;code&gt;DATA&lt;/code&gt; step.
When you run an &lt;code&gt;IMPORT&lt;/code&gt; procedure, 
the unlying data step code is printed into the log.
Sometimes the &lt;code&gt;IMPORT&lt;/code&gt; procedure does a little bit extra work 
to automatically decide the most possible format you want (especially when you have date related data).
If it is not what you want, 
you can copy and paste the &lt;code&gt;DATA&lt;/code&gt; step code 
generated in the log and modify it where necessary.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You'd better use SAS valid names for sheet names and column names in each sheet. 
This saves you trouble when importing data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can also use the data step to read a text/CSV file,
however, 
the &lt;code&gt;IMPORT&lt;/code&gt; procedure is preferred over the data step for reading files
as you can read in variable names from the file instead of specifying them manually 
(as you would do in a data step).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is suggested that you use CSV files whenever possible
as it is easier to modify a text file than a binary file (especially on a Linux server).
Also, you have better control over a CSV file compared to, e.g., an Excel file 
when using &lt;code&gt;proc import&lt;/code&gt;.
You should avoid using other general format text file 
as it might take you or others extra effort to figure out the exact format of the file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A common problem with the &lt;code&gt;IMPORT&lt;/code&gt; procedure is that 
if you work on SAS server and import an Excel or CSV file created on Windows, 
the last column will always be character.
This is due to different termination of line used on Linux and Windows. 
I always upload data files using rsync/scp via command line, 
and never encounter the problem when importing an Excel file.
I do observe the problem on CSV (and other text files). 
A solution is to simply convert the CSV (or text) files&lt;br&gt;
from Windows format to Linux format using the command &lt;code&gt;dos2unix&lt;/code&gt;.
Or you can manually import the CSV/Excel file into SAS using "File -&amp;gt; Import Data".
Another "dirty" solution is to append a "junk" column as the last column in the CSV (or text) file. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A trick problem that might happen when you import data using &lt;code&gt;proc import&lt;/code&gt; 
is that text might get truncated if it is too long.
A way to resolve the issue is to add the option &lt;code&gt;guessingRows=n;&lt;/code&gt;,
where &lt;code&gt;n&lt;/code&gt; is a large enough number (e.g., the number of rows in the data set).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The following SAS code reads in the sheet named "Hist_Macro" 
from the Excel file "data.xlsx"
using the &lt;code&gt;IMPORT&lt;/code&gt; procedure.
The option replace overwrites the data set macro if it already exists.
Notice that you have to end the &lt;code&gt;IMPORT&lt;/code&gt; statement (semicolon after replace) 
before you use other statement (sheet, getNames, etc.).
The getNames statement controls whether the first row in the range is read in as column names.
If Yes, the first row in the range is read in as column name, vice versa.
The default is to read in the first row (of a sheet/range) as column names.
The dataRow statement controls from which row the data is read in.
The default is to read in data from the first row of a sheet.
This option is overwritten if the range statement is used.
The statement &lt;code&gt;guessingRows=100&lt;/code&gt; asks the &lt;code&gt;IMPORT&lt;/code&gt; procedure 
to scans the first 100 rows in the input file 
to determine the appropriate data type and length of columns.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;proc import &lt;/span&gt;&lt;span class="k"&gt;out&lt;/span&gt;=macro
    datafile=&lt;span class="s"&gt;&amp;quot;~/projects/data.xlsx&amp;quot;&lt;/span&gt; 
    dbms=xlsx 
    &lt;span class="k"&gt;replace&lt;/span&gt;
    ; 
    sheet=&lt;span class="s"&gt;&amp;quot;Hist_Macro&amp;quot;&lt;/span&gt;;
    getNames=Y;
    dataRow=&lt;span class="m"&gt;5&lt;/span&gt;;
    guessingRows=&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="kr"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;run;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The following SAS code reads in data from the range A35:B40 
of the sheet "Hist_Macro" of the Excel file "data.xlsx". &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;proc import &lt;/span&gt;&lt;span class="k"&gt;out&lt;/span&gt;=s1
    dataFile=&lt;span class="s"&gt;&amp;quot;~/projects/data.xlsx&amp;quot;&lt;/span&gt; 
    dbms=xlsx
    &lt;span class="k"&gt;replace&lt;/span&gt;
    ;
    range=&lt;span class="s"&gt;&amp;quot;Hist_Macro$A35:B40&amp;quot;&lt;/span&gt;;
    getNames=N&lt;span class="kr"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;run;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can also use the IMPORT procedure to read a CSV file 
(A CSV file is a text file with data fields seprated by commas).
or a general text file. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;proc import &lt;/span&gt;&lt;span class="k"&gt;out&lt;/span&gt;=shoes
    dataFile=&lt;span class="s"&gt;&amp;quot;~/test.csv&amp;quot;&lt;/span&gt;
    dbms=csv
    &lt;span class="k"&gt;replace&lt;/span&gt;
    ;
    getNames=no;
    dataRow=&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="kr"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;run;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;proc import &lt;/span&gt;&lt;span class="k"&gt;out&lt;/span&gt;=class
    dataFile=&lt;span class="s"&gt;&amp;#39;~/tab.txt&amp;#39;&lt;/span&gt;
    dbms=dlm
    &lt;span class="k"&gt;replace&lt;/span&gt;
    ;
    &lt;span class="k"&gt;delimiter&lt;/span&gt;=&lt;span class="s"&gt;&amp;#39;09&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;x&lt;/span&gt;;
    getNames=Y;
    dataRow=&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="kr"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;run;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="export-data-from-sas"&gt;Export Data from SAS&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;When SAS export data to csv, missing values are left as blank.
SAS automatically decide whether quoting is needed.
When there is ambiguition (e.g., a string contains comma), 
then SAS automatically quote data when exporting to CSV. &lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;proc export &lt;/span&gt;data=dataset (&lt;span class="k"&gt;where&lt;/span&gt;=(conditions))
    outfile=&lt;span class="s"&gt;&amp;quot;file_path&amp;quot;&lt;/span&gt;
    dbms= csv
    &lt;span class="k"&gt;replace&lt;/span&gt;&lt;span class="kr"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;run;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="programming"></category><category term="SAS"></category><category term="import"></category><category term="procedure"></category><category term="Excel"></category></entry><entry><title>Date Utilities in SAS</title><link href="http://www.legendu.net/en/blog/date%20utilities%20in%20sas/" rel="alternate"></link><published>2015-05-17T18:49:20-07:00</published><updated>2015-05-17T18:49:20-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-05-17:/en/blog/date utilities in sas/</id><summary type="html">&lt;h3 id="convert-a-date-to-a-string-of-the-format-yyyymmdd"&gt;Convert a Date to a String of the Format "YYYYMMDD"&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="n"&gt;_null_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;23Aug2014&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;yymmddn8&lt;/span&gt;&lt;span class="p"&gt;.);&lt;/span&gt;
    &lt;span class="n"&gt;put&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;date9&lt;/span&gt;&lt;span class="p"&gt;.;&lt;/span&gt;
&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="n"&gt;_null_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;putn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;23Aug2014&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;yymmddn8.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;put&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;date9&lt;/span&gt;&lt;span class="p"&gt;.;&lt;/span&gt;
&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Both of the 2 data steps print "20140823".
The following is a comprehensive list of expressions 
(that …&lt;/p&gt;</summary><content type="html">&lt;h3 id="convert-a-date-to-a-string-of-the-format-yyyymmdd"&gt;Convert a Date to a String of the Format "YYYYMMDD"&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="n"&gt;_null_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;23Aug2014&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;yymmddn8&lt;/span&gt;&lt;span class="p"&gt;.);&lt;/span&gt;
    &lt;span class="n"&gt;put&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;date9&lt;/span&gt;&lt;span class="p"&gt;.;&lt;/span&gt;
&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="n"&gt;_null_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;putn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;23Aug2014&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;yymmddn8.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;put&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;date9&lt;/span&gt;&lt;span class="p"&gt;.;&lt;/span&gt;
&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Both of the 2 data steps print "20140823".
The following is a comprehensive list of expressions 
(that can be used in data steps and procedures)
to convert dates into strings with given formats. 
Let &lt;code&gt;d&lt;/code&gt; be a numeric variable with the value 19958 
(which represent Aug 23, 2014 in SAS).&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;Expression 1&lt;/th&gt;
&lt;th align="center"&gt;Expression 2&lt;/th&gt;
&lt;th align="center"&gt;Return Value&lt;/th&gt;
&lt;th align="center"&gt;Return Type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;put(d, date9.)&lt;/td&gt;
&lt;td align="center"&gt;putn(d, "date9.")&lt;/td&gt;
&lt;td align="center"&gt;23Aug2014&lt;/td&gt;
&lt;td align="center"&gt;Character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;put(d, date7.)&lt;/td&gt;
&lt;td align="center"&gt;putn(d, "date7.")&lt;/td&gt;
&lt;td align="center"&gt;23Aug14&lt;/td&gt;
&lt;td align="center"&gt;Character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;put(d, yymmdd10.)&lt;/td&gt;
&lt;td align="center"&gt;putn(d, "yymmdd10.")&lt;/td&gt;
&lt;td align="center"&gt;2014/08/23&lt;/td&gt;
&lt;td align="center"&gt;Character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;put(d, mmddyy10.)&lt;/td&gt;
&lt;td align="center"&gt;putn(d, "mmddyy10.")&lt;/td&gt;
&lt;td align="center"&gt;08/23/2014&lt;/td&gt;
&lt;td align="center"&gt;Character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;put(d, ddmmyy10.)&lt;/td&gt;
&lt;td align="center"&gt;putn(d, "ddmmyy10.")&lt;/td&gt;
&lt;td align="center"&gt;23/08/2014&lt;/td&gt;
&lt;td align="center"&gt;Character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;put(d, yymmdd8.)&lt;/td&gt;
&lt;td align="center"&gt;putn(d, "yymmdd8.")&lt;/td&gt;
&lt;td align="center"&gt;14/08/23&lt;/td&gt;
&lt;td align="center"&gt;Character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;put(d, yymmddn8.)&lt;/td&gt;
&lt;td align="center"&gt;putn(d, "yymmddn8.")&lt;/td&gt;
&lt;td align="center"&gt;20140823&lt;/td&gt;
&lt;td align="center"&gt;Character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;put(d, mmddyy8.)&lt;/td&gt;
&lt;td align="center"&gt;putn(d, "mmddyy8.")&lt;/td&gt;
&lt;td align="center"&gt;08/23/14&lt;/td&gt;
&lt;td align="center"&gt;Character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;put(d, mmddyyn8.)&lt;/td&gt;
&lt;td align="center"&gt;putn(d, "mmddyyn8.")&lt;/td&gt;
&lt;td align="center"&gt;08232014&lt;/td&gt;
&lt;td align="center"&gt;Character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;put(d, ddmmyy8.)&lt;/td&gt;
&lt;td align="center"&gt;putn(d, "ddmmyy8.")&lt;/td&gt;
&lt;td align="center"&gt;23/08/14&lt;/td&gt;
&lt;td align="center"&gt;Character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;put(d, ddmmyyn8.)&lt;/td&gt;
&lt;td align="center"&gt;putn(d, "ddmmyyn8.")&lt;/td&gt;
&lt;td align="center"&gt;23082014&lt;/td&gt;
&lt;td align="center"&gt;Character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;put(d, yymmdd6.)&lt;/td&gt;
&lt;td align="center"&gt;putn(d, "yymmdd6.")&lt;/td&gt;
&lt;td align="center"&gt;140823&lt;/td&gt;
&lt;td align="center"&gt;Character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;put(d, yymmddn6.)&lt;/td&gt;
&lt;td align="center"&gt;putn(d, "yymmddn6.")&lt;/td&gt;
&lt;td align="center"&gt;140823&lt;/td&gt;
&lt;td align="center"&gt;Character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;put(d, mmddyy6.)&lt;/td&gt;
&lt;td align="center"&gt;putn(d, "mmddyy6.")&lt;/td&gt;
&lt;td align="center"&gt;082314&lt;/td&gt;
&lt;td align="center"&gt;Character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;put(d, mmddyyn6.)&lt;/td&gt;
&lt;td align="center"&gt;putn(d, "mmddyyn6.")&lt;/td&gt;
&lt;td align="center"&gt;082314&lt;/td&gt;
&lt;td align="center"&gt;Character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;put(d, ddmmyy6.)&lt;/td&gt;
&lt;td align="center"&gt;putn(d, "ddmmyy6.")&lt;/td&gt;
&lt;td align="center"&gt;230814&lt;/td&gt;
&lt;td align="center"&gt;Character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;put(d, ddmmyyn6.)&lt;/td&gt;
&lt;td align="center"&gt;putn(d, "ddmmyyn6.")&lt;/td&gt;
&lt;td align="center"&gt;230814&lt;/td&gt;
&lt;td align="center"&gt;Character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;put(d, yymm.)&lt;/td&gt;
&lt;td align="center"&gt;putn(d, "yymm.")&lt;/td&gt;
&lt;td align="center"&gt;2014M08&lt;/td&gt;
&lt;td align="center"&gt;Character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;put(d, yymmn.)&lt;/td&gt;
&lt;td align="center"&gt;putn(d, "yymmn.")&lt;/td&gt;
&lt;td align="center"&gt;201408&lt;/td&gt;
&lt;td align="center"&gt;Character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;put(d, mmyy.)&lt;/td&gt;
&lt;td align="center"&gt;putn(d, "mmyy.")&lt;/td&gt;
&lt;td align="center"&gt;08M2014&lt;/td&gt;
&lt;td align="center"&gt;Character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;put(d, mmyyn.)&lt;/td&gt;
&lt;td align="center"&gt;putn(d, "mmyyn.")&lt;/td&gt;
&lt;td align="center"&gt;092014&lt;/td&gt;
&lt;td align="center"&gt;Character&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;A convenient way is to wrap these formats 
into functions with (better) meaningful names in the fcmp procedure for use.&lt;/p&gt;
&lt;h3 id="convert-a-string-of-the-format-yyyymmdd-to-a-date"&gt;Convert a string of the format "YYYYMMDD" to a Date&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="n"&gt;_null_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;20140823&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;yymmdd8&lt;/span&gt;&lt;span class="p"&gt;.);&lt;/span&gt;
    &lt;span class="n"&gt;put&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;date9&lt;/span&gt;&lt;span class="p"&gt;.;&lt;/span&gt;
&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="n"&gt;_null_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inputn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;20140823&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;yymmdd8.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;put&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;date9&lt;/span&gt;&lt;span class="p"&gt;.;&lt;/span&gt;
&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Both of the 2 data steps print "23AUG2014",
which menas that the string has been converted to a date successfully.
The following is a comprehensive list of expressions
(that can be used in data steps and procedures)
to convert strings with valid formats into dates.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;Expression 1&lt;/th&gt;
&lt;th align="center"&gt;Expression 2&lt;/th&gt;
&lt;th align="center"&gt;Return Value&lt;/th&gt;
&lt;th align="center"&gt;Return Type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;input("23Aug2014", date9.)&lt;/td&gt;
&lt;td align="center"&gt;inputn("23Aug2014", "date9.")&lt;/td&gt;
&lt;td align="center"&gt;19958&lt;/td&gt;
&lt;td align="center"&gt;Numeric&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;input("23Aug14", date7.)&lt;/td&gt;
&lt;td align="center"&gt;inputn("23Aug14", "date7.")&lt;/td&gt;
&lt;td align="center"&gt;19958&lt;/td&gt;
&lt;td align="center"&gt;Numeric&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;input("2014/08/23", yymmdd10.)&lt;/td&gt;
&lt;td align="center"&gt;inputn("2014/08/23", "yymmdd10.")&lt;/td&gt;
&lt;td align="center"&gt;19958&lt;/td&gt;
&lt;td align="center"&gt;Numeric&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;input("08/23/2014", mmddyy10.)&lt;/td&gt;
&lt;td align="center"&gt;inputn("08/23/2014", "mmddyy10.")&lt;/td&gt;
&lt;td align="center"&gt;19958&lt;/td&gt;
&lt;td align="center"&gt;Numeric&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;input("23/08/2014", ddmmyy10.)&lt;/td&gt;
&lt;td align="center"&gt;inputn("23/08/2014", "ddmmyy10.")&lt;/td&gt;
&lt;td align="center"&gt;19958&lt;/td&gt;
&lt;td align="center"&gt;Numeric&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;input("20140823", yymmdd8.)&lt;/td&gt;
&lt;td align="center"&gt;inputn("20140823", "yymmdd8.")&lt;/td&gt;
&lt;td align="center"&gt;19958&lt;/td&gt;
&lt;td align="center"&gt;Numeric&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;input("14/08/23", yymmdd8.)&lt;/td&gt;
&lt;td align="center"&gt;inputn("14/08/23", "yymmdd8.")&lt;/td&gt;
&lt;td align="center"&gt;19958&lt;/td&gt;
&lt;td align="center"&gt;Numeric&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;input("08/23/14", mmddyy8.)&lt;/td&gt;
&lt;td align="center"&gt;inputn("08/23/14", "mmddyy8.")&lt;/td&gt;
&lt;td align="center"&gt;19958&lt;/td&gt;
&lt;td align="center"&gt;Numeric&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;input("23/08/14", ddmmyy8.)&lt;/td&gt;
&lt;td align="center"&gt;inputn("23/08/14", "ddmmyy8.")&lt;/td&gt;
&lt;td align="center"&gt;19958&lt;/td&gt;
&lt;td align="center"&gt;Numeric&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;input("140823", yymmdd6.)&lt;/td&gt;
&lt;td align="center"&gt;inputn("140823", "yymmdd6.")&lt;/td&gt;
&lt;td align="center"&gt;19958&lt;/td&gt;
&lt;td align="center"&gt;Numeric&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;input("082314", mmddyy6.)&lt;/td&gt;
&lt;td align="center"&gt;inputn("082314", "mmddyy6.")&lt;/td&gt;
&lt;td align="center"&gt;19958&lt;/td&gt;
&lt;td align="center"&gt;Numeric&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;input("230814", ddmmyy6.)&lt;/td&gt;
&lt;td align="center"&gt;inputn("230814", "ddmmyy6.")&lt;/td&gt;
&lt;td align="center"&gt;19958&lt;/td&gt;
&lt;td align="center"&gt;Numeric&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Notice that several interesting things I'd like to point out here.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;For converting a string to date, 
all numeric informats 
(yymmddn8., mmddyyn8., ddmmyyn8., yymmddn6., mmddyyn6., ddmmyyn6., yymmn. and mmyyn.)
and incomplete informats (yymm. and mmyy.) are invalid.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Both "20140823" and "14/08/23" use the informat &lt;code&gt;yymmdd8.&lt;/code&gt;
when converting to dates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The informat names must NOT be quoted if you use the function &lt;code&gt;input&lt;/code&gt;,
while they must be quoted if you use the function &lt;code&gt;inputn&lt;/code&gt; or &lt;code&gt;inputc&lt;/code&gt;.
The underlying difference is that &lt;code&gt;input&lt;/code&gt; takes a compile-time informat,
so there is no need to quote the informat and it is fixed.
The function &lt;code&gt;inputn/inputc&lt;/code&gt; takes a run-time informat,
so you must quote the informat and it can be changed based on different contexts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The function &lt;code&gt;inputn&lt;/code&gt; converts a character value to a numeric one;
takes numeric informat
the function &lt;code&gt;inputc&lt;/code&gt; converts a character value to a character value;
takes character informat
the function &lt;code&gt;input&lt;/code&gt; converts a character value to a character/numeric one.
character/numeric informat&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SAS implicitly convert between numeric and character values ...&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="create-a-date-from-year-month-and-day"&gt;Create a Date From Year, Month and Day&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="n"&gt;_null_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mdy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;put&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;date9&lt;/span&gt;&lt;span class="p"&gt;.;&lt;/span&gt;
&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="extract-year-month-or-day-from-a-date"&gt;Extract Year, Month or Day from a Date&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="n"&gt;_null_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mdy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;year&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;month&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;day&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;put&lt;/span&gt; &lt;span class="nb"&gt;date&lt;/span&gt; &lt;span class="n"&gt;date9&lt;/span&gt;&lt;span class="p"&gt;.;&lt;/span&gt;
    &lt;span class="n"&gt;put&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;put&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;put&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice that all the 3 functions &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt; and &lt;code&gt;day&lt;/code&gt; return numeric values.&lt;/p&gt;
&lt;h3 id="arithmatic-operations-on-date"&gt;Arithmatic Operations on Date&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;last day of the month in a given date&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    d = &lt;span class="nb"&gt;intnx(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;month&amp;#39;&lt;/span&gt;, d, &lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="convert-between-data-and-datetime"&gt;convert between data and datetime&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;data &lt;/span&gt;&lt;span class="kc"&gt;_null_&lt;/span&gt;;
    d = &lt;span class="s"&gt;&amp;#39;29FEB1984&amp;#39;&lt;/span&gt;d;&lt;span class="k"&gt;&lt;/span&gt;
&lt;span class="k"&gt;    put &lt;/span&gt;&lt;span class="err"&gt;d date.;&lt;/span&gt;
    &lt;span class="c"&gt;/* convert date to DateTime */&lt;/span&gt;
    dt = &lt;span class="nb"&gt;dhms(&lt;/span&gt;d,&lt;span class="m"&gt;0&lt;/span&gt;,&lt;span class="m"&gt;0&lt;/span&gt;,&lt;span class="m"&gt;0&lt;/span&gt;);&lt;span class="k"&gt;&lt;/span&gt;
&lt;span class="k"&gt;    put &lt;/span&gt;&lt;span class="err"&gt;dt datetime.;&lt;/span&gt;
    &lt;span class="c"&gt;/* extract date from DateTime */&lt;/span&gt;
    d = &lt;span class="nb"&gt;datepart(&lt;/span&gt;dt);&lt;span class="k"&gt;&lt;/span&gt;
&lt;span class="k"&gt;    put &lt;/span&gt;&lt;span class="err"&gt;d date.;&lt;/span&gt;
&lt;span class="kr"&gt;run;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="programming"></category><category term="SAS"></category><category term="date"></category></entry><entry><title>Generating YYYYMM Formatted Dates Using Python</title><link href="http://www.legendu.net/en/blog/generating-yyyymm-formatted-dates-using-python/" rel="alternate"></link><published>2015-05-17T17:05:55-07:00</published><updated>2015-05-17T17:05:55-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-05-17:/en/blog/generating-yyyymm-formatted-dates-using-python/</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;monthdelta&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;md&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;dt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;quarter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;#end def&lt;/span&gt;

&lt;span class="n"&gt;d0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;dates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;d0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;monthdelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;yyyymms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dates&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;yymms …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;monthdelta&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;md&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;dt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;quarter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;#end def&lt;/span&gt;

&lt;span class="n"&gt;d0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;dates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;d0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;monthdelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;yyyymms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dates&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;yymms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dates&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;yyyymms&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;yymms&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The between ... and clause is also convenient to work with YYYYMM numbers
I saw people use &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;where&lt;/span&gt; m &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;&amp;amp;months.&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to check ..
while a much more convenient way is to use &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;where&lt;/span&gt; m between &lt;span class="m"&gt;200201&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="m"&gt;201212&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;if you are sure &lt;code&gt;m&lt;/code&gt; contains only YYYYMM formated numbers.&lt;/p&gt;</content><category term="programming"></category><category term="Python"></category><category term="credit risk"></category><category term="risk capital"></category><category term="stress testing"></category><category term="YYYYMM"></category><category term="YYYYQQ"></category></entry><entry><title>Keep Matrix Structure when Extract a Row/Column from a Matrix</title><link href="http://www.legendu.net/en/blog/keep-matrix-structure-r/" rel="alternate"></link><published>2015-05-14T22:04:52-07:00</published><updated>2015-05-14T22:04:52-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-05-14:/en/blog/keep-matrix-structure-r/</id><summary type="html">&lt;p&gt;I talked in the post &lt;a href=""&gt;Abuse of Vector in R&lt;/a&gt; that 
it is often the case that we want keep the matrix sturcture when 
extracting a row/column from a matrix,
i.e., we often want to return a matrix with 1 row/column when extracting 
a row/column from …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I talked in the post &lt;a href=""&gt;Abuse of Vector in R&lt;/a&gt; that 
it is often the case that we want keep the matrix sturcture when 
extracting a row/column from a matrix,
i.e., we often want to return a matrix with 1 row/column when extracting 
a row/column from a matrix. 
By default R returns a vector when you extract a row/column from a matrix.
To override this behavior, you can specify the option &lt;code&gt;drop=FALSE&lt;/code&gt; when 
extracting submatrix from matrix. A illustrative example is given below. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;nrow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="k"&gt;drop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;   &lt;span class="mi"&gt;13&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On the contrary, if you want to keep the sturcture of a matrix with multiple
rows and columns but convert a matrix with 1 row/column to a vector in R, 
you can the function &lt;code&gt;drop&lt;/code&gt;. See the following example. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;   &lt;span class="mi"&gt;13&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;   &lt;span class="mi"&gt;14&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt;   &lt;span class="mi"&gt;11&lt;/span&gt;   &lt;span class="mi"&gt;15&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;   &lt;span class="mi"&gt;12&lt;/span&gt;   &lt;span class="mi"&gt;16&lt;/span&gt;
&lt;span class="k"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;  &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="programming"></category><category term="data structure"></category><category term="algebra"></category><category term="matrix"></category><category term="R"></category><category term="vector"></category><category term="CRAN"></category></entry><entry><title>Easy Made Mistakes when Writing R code</title><link href="http://www.legendu.net/en/blog/mistakes-r/" rel="alternate"></link><published>2015-05-14T22:04:09-07:00</published><updated>2015-05-14T22:04:09-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-05-14:/en/blog/mistakes-r/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/r/mistake.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;Being flexible is a two-side sword to R. 
While it make it convenient and productive to use R,
it is also very easy to make mistakes when writing R code. 
The following is list of mistakes that happens all the time.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Miss passed arguments&lt;br&gt;
This is often due the to …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/r/mistake.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;Being flexible is a two-side sword to R. 
While it make it convenient and productive to use R,
it is also very easy to make mistakes when writing R code. 
The following is list of mistakes that happens all the time.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Miss passed arguments&lt;br&gt;
This is often due the to "dots" argument (...). 
For example, I used to use VB a lot, so when I 
use the function &lt;code&gt;seq&lt;/code&gt;, I wrote code like this&lt;/p&gt;
&lt;p&gt;seq(1,10,step=2)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Another example is &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You thought you write &lt;code&gt;data&lt;/code&gt; into the file &lt;code&gt;file_name&lt;/code&gt;,
however you just print &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;file_name&lt;/code&gt; to the
console. The annoying things about dots argument is that
it accept any kind of arguments. So whatever you pass to
a function accepting a dots argument, no warning or error 
about argument passing will be shown. The dots argument
opens the Pandor's box. &lt;!---'--&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Global variables&lt;br&gt;
While you can assign values to global variables using &lt;code&gt;=&lt;/code&gt;,
&lt;code&gt;&amp;lt;-&lt;/code&gt; and &lt;code&gt;-&amp;gt;&lt;/code&gt; inside a user-defined function, the change (of the global
variable) is only in effect in the duration of the function. 
When the function ends, the change is no longer in effect. 
In another words, the global variable remains unchanged 
outside the function. To make the change in effect outside the 
function, you must use &lt;code&gt;&amp;lt;&amp;lt;-&lt;/code&gt; and &lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt; to assign values to the
global variable. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Priority of operators
The colon (:) operator precede over arithmatic operators 
such as +, -, *, / and so on. However, [] precede over the 
colon operator. When you write code &lt;code&gt;1:n-1&lt;/code&gt;, you thought
you get a vector from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;n-1&lt;/code&gt; while you actually get
a vector from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;n-1&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Miss used functions
The function &lt;code&gt;length&lt;/code&gt; is used for querying length of 
vectors not the length of characters. For the later purpose,
use the function &lt;code&gt;nchar&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &amp;amp;&amp;amp; or || on vectors&lt;br&gt;
For vector operation, you should use &amp;amp; and |.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use vectors or missing value as conditions&lt;br&gt;
For if and while statement, the condition must be a non-missing
scaler (a vector of length 1).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;*apply&lt;/code&gt; functions to operate on rows of data frames.
A row of data frame is still a data frame (with 1 row). R is 
evil in the sence that it coerce data type wheneve necessary 
without noticing users. ...&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="vector"></category><category term="operator"></category><category term="mistake"></category><category term="programming"></category><category term="R"></category><category term="CRAN"></category></entry><entry><title>Filesystem in MATLAB</title><link href="http://www.legendu.net/en/blog/filesystem-in-matlab/" rel="alternate"></link><published>2015-05-14T22:02:00-07:00</published><updated>2015-05-14T22:02:00-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-05-14:/en/blog/filesystem-in-matlab/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;path&lt;/code&gt; can be used to either display or modify the search path of MATLAB. 
Its functionality in MATLAB is similar to the functionality of environment variable &lt;code&gt;PATH&lt;/code&gt; 
for DOS shell in Windows systems, 
and the use of them is also similar. 
&lt;code&gt;addpath&lt;/code&gt; can be used to add new folders …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;path&lt;/code&gt; can be used to either display or modify the search path of MATLAB. 
Its functionality in MATLAB is similar to the functionality of environment variable &lt;code&gt;PATH&lt;/code&gt; 
for DOS shell in Windows systems, 
and the use of them is also similar. 
&lt;code&gt;addpath&lt;/code&gt; can be used to add new folders to the search path. 
It is a more friendly and convenient way to modify the search path than &lt;code&gt;path&lt;/code&gt;. 
To add a folder and all its subfolders to the search path, 
you can use &lt;code&gt;addpath&lt;/code&gt; together with &lt;code&gt;genpath&lt;/code&gt; 
which can generate path strings for a folder and all its subfolders. 
To remove an existing path from the search path, 
you can use &lt;code&gt;rmpath&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;what&lt;/code&gt; can list the path for the current folder, 
and also files and folders relevant to MATLAB.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;dlmread&lt;/code&gt; is helpful to read delimited files (e.g. Excel files), 
and &lt;code&gt;dlmwrite&lt;/code&gt; is helpful to write delimited files. 
However,
be careful with &lt;code&gt;dlmwrite&lt;/code&gt; when you want to write high accuracy data into a file, 
because by default &lt;code&gt;dlmwrite&lt;/code&gt; keeps only a few digits.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To read data from or write data into a file, 
you must first use function &lt;code&gt;fopen&lt;/code&gt; to open it to get a file pointer, 
and then you can use all different kinds of ways to read from 
(e.g. &lt;code&gt;fread&lt;/code&gt;, &lt;code&gt;dlmread&lt;/code&gt;, &lt;code&gt;fscanf&lt;/code&gt; and &lt;code&gt;textread&lt;/code&gt;) 
or write into a file (e.g.  &lt;code&gt;fwrite&lt;/code&gt;, &lt;code&gt;dlmwrite&lt;/code&gt;, &lt;code&gt;fprintf&lt;/code&gt;). 
If you want to access a file randomly, 
you can use &lt;code&gt;fseek&lt;/code&gt; to move the file point to a specific position. 
Never forget to close the file pointer using function &lt;code&gt;fclose&lt;/code&gt; after you have done reading or writing. 
Usually it is much faster to read from or write into a binary file 
than to read from or write into a text file, 
and typically a binary file is smaller than a text file that contains the same data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are serveral ways to test the speed of code in MATLAB. 
The first way is to use the &lt;code&gt;Profile&lt;/code&gt; button under &lt;code&gt;Desktop&lt;/code&gt; menu. 
It is also the recommended way if you work in MATLAB IDE
as it tells you which part of your code is the bottle neck of performance.
The second way is to surround the code that you want to test with &lt;code&gt;tic&lt;/code&gt; and &lt;code&gt;toc&lt;/code&gt;.
For example, &lt;code&gt;tic; f(); toc&lt;/code&gt; measures the time of running the code &lt;code&gt;f();&lt;/code&gt;. 
The third way is to record the time manually using the function &lt;code&gt;now&lt;/code&gt; 
and then use the function &lt;code&gt;etime&lt;/code&gt; to calculate the elapsed time. 
The last ways is similar to the third way, 
but you record the cpu time using function &lt;code&gt;cputime&lt;/code&gt; instead of the system time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pwd&lt;/code&gt; can print out the current work directory of MATLAB, 
which is similar to the &lt;code&gt;pwd&lt;/code&gt; command in Linux shell.
Though it is mutable, 
you'd better not change it. 
Because even if you change it, 
the current working directory will not change. 
To change the current working directory to a new one, 
you can use function &lt;code&gt;cd&lt;/code&gt;. 
Whenever the working directory is changed, 
&lt;code&gt;pwd&lt;/code&gt; be change to the current working directory. 
Note that the current working directory is always in the search path of MATLAB.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use &lt;code&gt;save&lt;/code&gt; to save MATLAB workspace 
or selected variables into a file 
and &lt;code&gt;load&lt;/code&gt; to load data from a MAT file to MATLAB workspace. 
To display variables in the workspace, 
you can use &lt;code&gt;whos&lt;/code&gt;; 
to remove some variables from the workspace, 
you can use &lt;code&gt;clear&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To display files and sub-folders of a folder, 
you can use &lt;code&gt;ls&lt;/code&gt; or &lt;code&gt;dir&lt;/code&gt;, 
which is same to Linux terminal command.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use &lt;code&gt;exit&lt;/code&gt; or &lt;code&gt;quit&lt;/code&gt; to terminate current session of MATLAB,
but you'd better save the MATLAB workspace first if necessary. 
If you want MATLAB to do some tasks before quitting, 
you can put put the corresponding code into file &lt;code&gt;finish.m&lt;/code&gt; 
and place the file into the search path of MATLAB or into the current folder.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To remove files or graphics objects, 
you can use &lt;code&gt;delete&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;fileattrib&lt;/code&gt; can get and set attributes of files and folders in MATLAB.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="filesystem"></category><category term="programming"></category><category term="MATLAB"></category><category term="file system"></category></entry><entry><title>Skills for R</title><link href="http://www.legendu.net/en/blog/skills-for-r/" rel="alternate"></link><published>2015-05-14T21:59:32-07:00</published><updated>2015-05-14T21:59:32-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-05-14:/en/blog/skills-for-r/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Unlike C/C++, Java and SAS, 
you do not have semicolon to indicate the end of a command, 
but you can do this if you like. 
It is helpful if you have to write multiple commands on a line.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;R support command/terminal mode, 
and if you open R in …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Unlike C/C++, Java and SAS, 
you do not have semicolon to indicate the end of a command, 
but you can do this if you like. 
It is helpful if you have to write multiple commands on a line.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;R support command/terminal mode, 
and if you open R in a command/terminal window, 
the working directory of R will be the working directory of the command/terminal window. 
For some GUI for R, 
you can only use a single application, 
e.g. you cannot open two Rstudio at the same time. 
But sometimes, 
you might want to open more than one R applications in different directories. 
To do this, 
you can use the command/terminal mode.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you do not know how use a function, 
you can always type a question mark 
before the function name to open the help document of the function. 
For example, 
if you do not know how to use &lt;code&gt;sum&lt;/code&gt;, 
you can type in &lt;code&gt;?sum&lt;/code&gt; in R console to open the help document for &lt;code&gt;sum&lt;/code&gt;.
Sometimes, 
you might just want see what arguments a function have,
instead of opening the help document. 
In this case, 
you can use &lt;code&gt;args&lt;/code&gt; which display the declaration of a function. 
It is quite often that you want to use a function in R, 
but you cannot remember the name of the function. 
If you still know part of the function name, 
you can type in &lt;code&gt;??partial_name&lt;/code&gt; in R console, 
then R will try to match it with all possible functions using regular expression.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sometimes, 
you might want to hide an object 
(i.e. do not display the object when using the command &lt;code&gt;ls()&lt;/code&gt;) in the R workspace, 
for example if you write a package
which relies on some global variables or some functions that should never by renamed. 
To do this, 
you can give a name to the object starting with a dot. 
For example there are some functions such as &lt;code&gt;.jinit&lt;/code&gt;, &lt;code&gt;.jcall&lt;/code&gt; and so on in R &lt;code&gt;rJava&lt;/code&gt;, 
but you cannot see them by use &lt;code&gt;ls()&lt;/code&gt;. 
If you do want to display all objects including these that start with a dot in R workspace, 
you can use &lt;code&gt;ls(all.names=TRUE)&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By default, 
numerical variables in R are double values 
even you even they do not have decimal digits. 
To use data type of integer, 
you can put an &lt;code&gt;L&lt;/code&gt; after integers. 
For example to assign a integer 5 to a variable &lt;code&gt;aInt&lt;/code&gt;, 
you can use &lt;code&gt;aInt = 5L&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;comment&lt;/code&gt; can be use to set or query &lt;code&gt;comment&lt;/code&gt; of an object in R.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;with&lt;/code&gt; allows you evaluate an expression 
inside a data environment (usually a data frame), 
so you do not have to attach the data into R workspace 
(Attaching data into R workspace might mark other variables with the same names, 
so it is encouraged to do so.). 
within transform &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;class&lt;/code&gt; gets/sets the class of a R object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;attributes&lt;/code&gt; and &lt;code&gt;attr&lt;/code&gt; can get and set attributes of objects, 
e.g.  it can list names of objects. 
The difference between them is that &lt;code&gt;attributes&lt;/code&gt; can set the attributes of a null object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;str&lt;/code&gt; shows the structure of an arbitrary R object. 
For example, 
if you have a large data frame &lt;code&gt;df&lt;/code&gt; you can use &lt;code&gt;str(df)&lt;/code&gt; to show its structure, 
so that you know what columes (type of data and names) it has.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;ESC&lt;/code&gt; hot key halts current unfinished command, 
which is helpful when you make typo in a command 
(especially when you miss a single/double quotation mark).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Rprof&lt;/code&gt; enables profiling an R is execution, 
which helps you write efficient R code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you want to run some code 
without writing any intermediate result into the workspace, 
you can put the code into &lt;code&gt;local&lt;/code&gt; surrounded by curly braces. 
However, 
you must use &lt;code&gt;-\&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;-&lt;/code&gt; instead of &lt;code&gt;=&lt;/code&gt; in the code. 
Note that you can use semicolon to separate different commands.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;exists&lt;/code&gt; checks whether a R object with a given name has been defined. 
For example,&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;aNon_Exist_Object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;[1]&lt;/span&gt; &lt;span class="kc"&gt;FALSE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;missing&lt;/code&gt; checks whether an argument of a function has been passed a value or not. 
It can only be used inside a function to help check availability of arguments.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You can use &lt;code&gt;shell("shutdown/s")&lt;/code&gt; (in Windows) 
to shutdown the computer after R has finished computing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When write a user-defined function, 
you'd better return a comprehensive result 
which contains not only the final outcomes 
but also other information such as parameters used in the computation.
This gives you the ability to work on a project in the long term,
especially when the names of variables do not give you much information 
about parameters used in computation 
(typical they do not because otherwise they will be long).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="R"></category><category term="skills"></category><category term="programming"></category><category term="CRAN"></category></entry><entry><title>Input and Output in C++</title><link href="http://www.legendu.net/en/blog/input-and-output-in-cpp/" rel="alternate"></link><published>2015-03-24T22:22:41-07:00</published><updated>2015-03-24T22:22:41-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-03-24:/en/blog/input-and-output-in-cpp/</id><summary type="html">&lt;p&gt;Check the &lt;code&gt;io&lt;/code&gt; directory on the page &lt;a href="https://bitbucket.org/dclong/cpp-learn/src"&gt;https://bitbucket.org/dclong/cpp-learn/src&lt;/a&gt;
for some illustrative examples for the following discussions. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You can format output of numbers using functions 
&lt;code&gt;std::setpresicion&lt;/code&gt; and &lt;code&gt;std::setw&lt;/code&gt; in the &lt;imanip&gt; header.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you read data from a file into an array or write data …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Check the &lt;code&gt;io&lt;/code&gt; directory on the page &lt;a href="https://bitbucket.org/dclong/cpp-learn/src"&gt;https://bitbucket.org/dclong/cpp-learn/src&lt;/a&gt;
for some illustrative examples for the following discussions. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You can format output of numbers using functions 
&lt;code&gt;std::setpresicion&lt;/code&gt; and &lt;code&gt;std::setw&lt;/code&gt; in the &lt;imanip&gt; header.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you read data from a file into an array or write data from an array to a file,
you can just use the address of the array.
However, 
if a vector (e.g., vector &lt;code&gt;x&lt;/code&gt;) is used instead of an array,
you have to use the address of the underlying data in the vector &lt;code&gt;x&lt;/code&gt; which is &lt;code&gt;&amp;amp;x[0]&lt;/code&gt;. 
Also, 
when you read/write data into/from a vector, 
you have use the size of the vector &lt;code&gt;x&lt;/code&gt; multiplied by the memory used by each element 
to calculate the total number of bytes, 
i.e. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or if &lt;code&gt;x&lt;/code&gt; is a vector of double values you can use &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You cannot use &lt;code&gt;sizeof(x)&lt;/code&gt;, 
because it is the size of the vector itself 
(without counting the underlying array) and is always the same (12 bytes). &lt;/p&gt;</content><category term="C/C++"></category><category term="IO"></category><category term="C++"></category><category term="programming"></category></entry><entry><title>Common Mistakes in C++ Code and Ways to Debug</title><link href="http://www.legendu.net/en/blog/cpp-common-mistakes-and-debug/" rel="alternate"></link><published>2015-03-13T10:53:45-07:00</published><updated>2015-03-13T10:53:45-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-03-13:/en/blog/cpp-common-mistakes-and-debug/</id><summary type="html">&lt;h2 id="debugging"&gt;Debugging&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;gdb is a excellent command tool for debugging C/C++ code. &lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="syntax-mistakes"&gt;Syntax Mistakes&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Missing "}". 
When this happens, 
you usually get lots of error message when you compile your code. 
And these error messages are often hard to understand and seems not related to your code. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Missing template arguments. 
This …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h2 id="debugging"&gt;Debugging&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;gdb is a excellent command tool for debugging C/C++ code. &lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="syntax-mistakes"&gt;Syntax Mistakes&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Missing "}". 
When this happens, 
you usually get lots of error message when you compile your code. 
And these error messages are often hard to understand and seems not related to your code. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Missing template arguments. 
This is relative easy to debug. 
The compiler will usually give clear enough error message. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using member types of template types without the &lt;code&gt;typename&lt;/code&gt; prefix. 
For example, 
instead of &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;class&lt;/span&gt; &lt;span class="nt"&gt;InputIt&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;class&lt;/span&gt; &lt;span class="nt"&gt;set&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;InputIt&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;value_type&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;gt&lt;/span&gt;&lt;span class="o"&gt;;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;gt&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;void&lt;/span&gt; &lt;span class="nt"&gt;f&lt;/span&gt;&lt;span class="o"&gt;(...)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;it should be &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;class&lt;/span&gt; &lt;span class="nt"&gt;InputIt&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;class&lt;/span&gt; &lt;span class="nt"&gt;set&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;typename&lt;/span&gt; &lt;span class="nt"&gt;InputIt&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;value_type&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;gt&lt;/span&gt;&lt;span class="o"&gt;;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;gt&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;void&lt;/span&gt; &lt;span class="nt"&gt;f&lt;/span&gt;&lt;span class="o"&gt;(...)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The g++ compiler is usually smart enough to detect a missing &lt;code&gt;typename&lt;/code&gt; and give you the right instruction
on how to fix the code. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Accessing members in a template base class without using &lt;code&gt;this&lt;/code&gt; pointer.
The compiler will tell you that these members are not found. &lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="logical-mistakes"&gt;Logical Mistakes&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Abuse of &lt;code&gt;auto&lt;/code&gt;. 
Tough &lt;code&gt;auto&lt;/code&gt; it a lot more convenient to work with template code, 
it is dangerous if an expression corresponds to several different types. 
For example, 
if you use &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;then &lt;code&gt;x&lt;/code&gt; is of type &lt;code&gt;const char *&lt;/code&gt; not &lt;code&gt;std::string&lt;/code&gt;. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Passing invalid iterators to functions/methods that operate on containers.
This usually result in segmentation fault. 
For example, 
if you use the &lt;code&gt;erase&lt;/code&gt; method of a vector &lt;code&gt;x&lt;/code&gt; (of length 10) to erase a range of elements from it,
the second iterator must be no "smaller" than the first iterator.
The code &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;erase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;will result in an error message of segmentation fault when you compile it.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Forgeting to return a value for a non-void function/method. 
This usually results in segmentation fault.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="compile-option-mistakes"&gt;Compile Option Mistakes&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Forgetting the &lt;code&gt;-lpthread&lt;/code&gt; option when compile code which uses the &lt;code&gt;&amp;lt;thread&amp;gt;&lt;/code&gt; header.
The compiler usually gives the following error message.&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;terminate&lt;/span&gt; &lt;span class="k"&gt;called&lt;/span&gt; &lt;span class="k"&gt;after&lt;/span&gt; &lt;span class="n"&gt;throwing&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;std::system_error&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;what&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  &lt;span class="k"&gt;Unknown&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="mi"&gt;4294967295&lt;/span&gt;
&lt;span class="n"&gt;Aborted&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;</content><category term="debug"></category><category term="C++"></category><category term="mistake"></category><category term="programming"></category><category term="trap"></category><category term="bug"></category><category term="error"></category></entry><entry><title>Differences Between Vector and ArrayList in Java</title><link href="http://www.legendu.net/en/blog/vector-arraylist-difference-java/" rel="alternate"></link><published>2015-03-13T10:50:05-07:00</published><updated>2015-03-13T10:50:05-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-03-13:/en/blog/vector-arraylist-difference-java/</id><summary type="html">&lt;p&gt;A good summay is &lt;a href="http://javarevisited.blogspot.com/2011/09/difference-vector-vs-arraylist-in-java.html"&gt;here&lt;/a&gt;.&lt;/p&gt;</summary><content type="html">&lt;p&gt;A good summay is &lt;a href="http://javarevisited.blogspot.com/2011/09/difference-vector-vs-arraylist-in-java.html"&gt;here&lt;/a&gt;.&lt;/p&gt;</content><category term="synchronization"></category><category term="thread"></category><category term="Java"></category><category term="programming"></category><category term="vector"></category><category term="ArrayList"></category><category term="data structure"></category></entry><entry><title>Insert Rows Missing as Missing Records in SAS</title><link href="http://www.legendu.net/en/blog/set%20missing%20rows%20as%20missing%20data%20in%20sas/" rel="alternate"></link><published>2015-03-13T00:59:10-07:00</published><updated>2015-03-13T00:59:10-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-03-13:/en/blog/set missing rows as missing data in sas/</id><summary type="html">&lt;p&gt;I recent come across a problem.
I have a table &lt;code&gt;A&lt;/code&gt; in SAS with columns &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt;.
The table almost exhaust the Cartesian product of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; but has some rows missing.
I need to create macro variables with the Cartesian product of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; as …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recent come across a problem.
I have a table &lt;code&gt;A&lt;/code&gt; in SAS with columns &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt;.
The table almost exhaust the Cartesian product of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; but has some rows missing.
I need to create macro variables with the Cartesian product of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; as names 
and &lt;code&gt;z&lt;/code&gt; as corresponding values.
If a combination of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; is missing from the table, 
then set it as missing value.
I came up with 2 approaches to this problem.
The first way is to create macro variables based on table &lt;code&gt;A&lt;/code&gt;,
and then loop through the Cartesian product of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; 
to check whether a macro variable exists or not (with the help of &lt;code&gt;%symexists&lt;/code&gt;).
If a macro variable does not exists,
then create it with missing value.
The second approach is to complete table &lt;code&gt;A&lt;/code&gt; with missing rows (with the help of left/right join in SQL)
and then create macro variables based on it.
The first approach is a little bit tedious
and took the second approach. 
Here I demonstrate in detail how I did it.&lt;/p&gt;
&lt;p&gt;To make illustration convenient,
suppose &lt;code&gt;A&lt;/code&gt; is as below,&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;x&lt;/th&gt;
&lt;th align="center"&gt;y&lt;/th&gt;
&lt;th align="center"&gt;z&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;a&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;0.33&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;a&lt;/td&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td align="center"&gt;0.91&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;b&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;1.38&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;b&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;8.7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;b&lt;/td&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td align="center"&gt;5.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;c&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;5.78&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;c&lt;/td&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td align="center"&gt;8.6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;and 
&lt;code&gt;x = (a, b, c)&lt;/code&gt; 
and 
&lt;code&gt;y = (1, 2, 3)&lt;/code&gt;
.
First, 
we need to create a table of the Cartesian product of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.
Please refer to &lt;a href=""&gt;this post&lt;/a&gt; about how to do it. 
Now suppose we have the Cartesian product of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; in the table &lt;code&gt;cart&lt;/code&gt;,
we can complete missing rows with &lt;code&gt;z&lt;/code&gt; set as missing value using the following SQL code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;proc&lt;/span&gt; &lt;span class="k"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;select&lt;/span&gt;
        &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;
    &lt;span class="k"&gt;from&lt;/span&gt; 
        &lt;span class="n"&gt;A&lt;/span&gt;
    &lt;span class="k"&gt;right&lt;/span&gt; &lt;span class="k"&gt;join&lt;/span&gt;
        &lt;span class="n"&gt;cart&lt;/span&gt;
    &lt;span class="k"&gt;on&lt;/span&gt;
        &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="k"&gt;and&lt;/span&gt; 
        &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
    &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="programming"></category><category term="SAS"></category><category term="missing"></category></entry><entry><title>How to Submit R Packages to CRAN</title><link href="http://www.legendu.net/en/blog/submit-r-package-cran/" rel="alternate"></link><published>2015-03-03T10:16:02-08:00</published><updated>2015-03-03T10:16:02-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-03-03:/en/blog/submit-r-package-cran/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/r/r.png" height="200" width="240" align="right"/&gt;
Submit using &lt;a href="http://xmpalantir.wu.ac.at/cransubmit/"&gt;web form&lt;/a&gt; or using ftp following the steps below.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Upload the .tar.gz file using &lt;strong&gt;anonymous&lt;/strong&gt; as log-in name 
and your &lt;strong&gt;e-mail address&lt;/strong&gt; as password 
to &lt;a href="ftp://CRAN.R-project.org/incoming/"&gt;ftp://CRAN.R-project.org/incoming/&lt;/a&gt;. 
"ftp" is prefereed to "sftp". &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Send a message to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#67;&amp;#82;&amp;#65;&amp;#78;&amp;#64;&amp;#82;&amp;#45;&amp;#112;&amp;#114;&amp;#111;&amp;#106;&amp;#101;&amp;#99;&amp;#116;&amp;#46;&amp;#111;&amp;#114;&amp;#103;"&gt;&amp;#67;&amp;#82;&amp;#65;&amp;#78;&amp;#64;&amp;#82;&amp;#45;&amp;#112;&amp;#114;&amp;#111;&amp;#106;&amp;#101;&amp;#99;&amp;#116;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a&gt; about it. 
The email …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/r/r.png" height="200" width="240" align="right"/&gt;
Submit using &lt;a href="http://xmpalantir.wu.ac.at/cransubmit/"&gt;web form&lt;/a&gt; or using ftp following the steps below.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Upload the .tar.gz file using &lt;strong&gt;anonymous&lt;/strong&gt; as log-in name 
and your &lt;strong&gt;e-mail address&lt;/strong&gt; as password 
to &lt;a href="ftp://CRAN.R-project.org/incoming/"&gt;ftp://CRAN.R-project.org/incoming/&lt;/a&gt;. 
"ftp" is prefereed to "sftp". &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Send a message to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#67;&amp;#82;&amp;#65;&amp;#78;&amp;#64;&amp;#82;&amp;#45;&amp;#112;&amp;#114;&amp;#111;&amp;#106;&amp;#101;&amp;#99;&amp;#116;&amp;#46;&amp;#111;&amp;#114;&amp;#103;"&gt;&amp;#67;&amp;#82;&amp;#65;&amp;#78;&amp;#64;&amp;#82;&amp;#45;&amp;#112;&amp;#114;&amp;#111;&amp;#106;&amp;#101;&amp;#99;&amp;#116;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a&gt; about it. 
The email should contain the package name and version in the subject line. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="R"></category><category term="ftp"></category><category term="sftp"></category><category term="programming"></category><category term="submit"></category><category term="package"></category><category term="CRAN"></category></entry><entry><title>An Input Bug in Ruby</title><link href="http://www.legendu.net/en/blog/input-bug-ruby/" rel="alternate"></link><published>2015-03-03T10:14:11-08:00</published><updated>2015-03-03T10:14:11-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-03-03:/en/blog/input-bug-ruby/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/computer/bug.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;If you run a ruby program though Bash 
and the ruby program read multiple inputs from the console, 
all inputs will be the same as the first argument. 
I'm not very sure how to solve this problem.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/computer/bug.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;If you run a ruby program though Bash 
and the ruby program read multiple inputs from the console, 
all inputs will be the same as the first argument. 
I'm not very sure how to solve this problem.&lt;/p&gt;</content><category term="programming"></category><category term="Bash"></category><category term="Ruby"></category><category term="bug"></category><category term="terminal"></category><category term="IO"></category></entry><entry><title>MATLAB for Visualization</title><link href="http://www.legendu.net/en/blog/graphics-in-MATLAB/" rel="alternate"></link><published>2015-03-03T10:08:36-08:00</published><updated>2015-03-03T10:08:36-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-03-03:/en/blog/graphics-in-MATLAB/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To display a new graph on on top of an old one, 
you can use command &lt;code&gt;hold on&lt;/code&gt;. 
In this way, 
you can create multiple plots in a same window. 
Though &lt;code&gt;plot&lt;/code&gt; can already do multiple plot, command &lt;code&gt;hold on&lt;/code&gt; 
can be very useful when you want to add some …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To display a new graph on on top of an old one, 
you can use command &lt;code&gt;hold on&lt;/code&gt;. 
In this way, 
you can create multiple plots in a same window. 
Though &lt;code&gt;plot&lt;/code&gt; can already do multiple plot, command &lt;code&gt;hold on&lt;/code&gt; 
can be very useful when you want to add some new points 
or curves to an existing graph (e.g. a histogram).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;subplot&lt;/code&gt; displays multiple plots in the same window,
which is similar to settings &lt;code&gt;par(mfrow=c(2,2))&lt;/code&gt; or &lt;code&gt;par(mfcol=c(2,3))&lt;/code&gt; in R.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;hist&lt;/code&gt; and &lt;code&gt;histc&lt;/code&gt; produces histograms.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;staris&lt;/code&gt; produces step graph.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;plot&lt;/code&gt; plots &lt;code&gt;2-D&lt;/code&gt; graph 
while function &lt;code&gt;surf&lt;/code&gt; plots &lt;code&gt;3-D&lt;/code&gt; graphs. 
Function &lt;code&gt;surf&lt;/code&gt; is usually used in conjugate with function &lt;code&gt;meshgrid&lt;/code&gt; 
which can create a matrix of points over which the surface is to be plotted. 
You can also use &lt;code&gt;ndgrid&lt;/code&gt; instead of &lt;code&gt;meshgrid&lt;/code&gt; to generate a matrix of points.
However, 
&lt;code&gt;ndgrid&lt;/code&gt; is usually higher dimensions and the usage is a little different from &lt;code&gt;meshgrid&lt;/code&gt;, 
so you have to be careful if you wan to use it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After plotting figures using &lt;code&gt;plot&lt;/code&gt;, 
you can use &lt;code&gt;title&lt;/code&gt; to add titles for the figures, 
&lt;code&gt;axis&lt;/code&gt; to set configurations for the axies,
and &lt;code&gt;xlabel&lt;/code&gt; and &lt;code&gt;ylabel&lt;/code&gt; to set labels for the x and y axes. 
You can also use &lt;code&gt;set&lt;/code&gt; to set all configurations for the plots. 
To do this, 
you have to first get the handle of the elements in the plots that you want to modify, 
and then apply &lt;code&gt;set&lt;/code&gt; on it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;inpolygon&lt;/code&gt; can check whether given points are inside a polygon or not.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;spy&lt;/code&gt; visualizes sparse matrices.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;image&lt;/code&gt; can not only display images but also make mosaic plot
(sometimes called heat plot or level plot) of a matrices. 
For example, to show the mosaic plot of matrix &lt;code&gt;x&lt;/code&gt;, 
you can use &lt;code&gt;image(x,'CDataMap','CDataMapping','scaled')&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="image"></category><category term="visualization"></category><category term="programming"></category><category term="plot"></category><category term="graphics"></category><category term="MATLAB"></category></entry><entry><title>Passing Arrays Between R and Other Programming Languages</title><link href="http://www.legendu.net/en/blog/r-interface-other-languages/" rel="alternate"></link><published>2015-03-02T13:10:12-08:00</published><updated>2015-03-02T13:10:12-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-03-02:/en/blog/r-interface-other-languages/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/r/r.png" height="200" width="240" align="right"/&gt;
A matrix or an array in R is essentially a vector with dimension attribute. 
For this reason, no matter you pass a vector, matrix or an array
to an external call, you essentially pass a 1 dimensional array to the call. 
As a coinsequence, 
it's usually not conveneint to pass …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/r/r.png" height="200" width="240" align="right"/&gt;
A matrix or an array in R is essentially a vector with dimension attribute. 
For this reason, no matter you pass a vector, matrix or an array
to an external call, you essentially pass a 1 dimensional array to the call. 
As a coinsequence, 
it's usually not conveneint to pass 2 dimensional arrays between R and other programming languages. 
To pass arrays from R to an external call, 
always use 1 dimensional array.
If the 1-d array you pass to an external call stores data of a 2-d array, 
you have to pass extra arguments about the
dimension information to the external call.&lt;/p&gt;
&lt;p&gt;In C, an array name is an address. 
There's no way to figure out the length of the array from its address, 
so you have to pass information about the length of array to a C function if you want to call it from R. 
An array is an object in Java, and you can access its length attribute, so you don't have to pass
information about the length to a Java method if you want to call it in R.
Because of the way that R calls C functions, there's simple no way to return a
2-d array from a C function to R. However, since an 2-d array in Java is an
object, you can return it to R. Applying function &lt;code&gt;.jevalArray&lt;/code&gt; on the 2-d array
object, you get a vector of addresses. Applying function &lt;code&gt;.jevalArray&lt;/code&gt; on these
addresses again (most conveniently with the help of function &lt;code&gt;sapply&lt;/code&gt; or
&lt;code&gt;lapply&lt;/code&gt;), you get values of the 2-d array. For example, suppose &lt;code&gt;x&lt;/code&gt; is an 2-d
array object returned from a Java method to R, you can use the following code to
get its content.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jevalArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,.&lt;/span&gt;&lt;span class="n"&gt;jevalArray&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If a C function returns an array of unkown length, there is no directly way to
return it to R. There are two ways to solve this problem. First, if you know the
maximum length of the array to be returned, you can pass an array with this
length from R to C to accept the returned result. Second, you can write data
from C into a file and then read the data into R. &lt;/p&gt;
&lt;p&gt;From these aspect, interfacing with Java in R is more convenient than
interfacing with C in R. However, R offers APIs written in C for generating
random numbers and manipulating states of random number generators. Another
thing is that you probably have to debug and modify C code and Java code when
you call them in R. For C, you have to unload and reload dynamic libraries; for
Java, you have to restart the JVM. For some reason I'm not sure about (probably
because of other loaded libraries requiring rJava package), restarting the JVM
may not work. These are advantages and disadvantages of interfacing with C and
Java in R. You can choose the most convenient one for you work. &lt;/p&gt;</content><category term="array"></category><category term="R"></category><category term="C/C++"></category><category term="programming"></category><category term="Java"></category></entry><entry><title>String in Java</title><link href="http://www.legendu.net/en/blog/string-in-java/" rel="alternate"></link><published>2015-02-20T10:58:20-08:00</published><updated>2015-02-20T10:58:20-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-02-20:/en/blog/string-in-java/</id><summary type="html">&lt;h2 id="string"&gt;String&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;String is a immutable class in Java. 
Extensive operations on strings (e.g., &lt;code&gt;+&lt;/code&gt; in a big loop) is usually very slow before Java 7
(the &lt;code&gt;+&lt;/code&gt; operator is optimized by the compiler automatically starting from Java 7).
To avoid this problem (in older versions of Java), 
you can use the …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h2 id="string"&gt;String&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;String is a immutable class in Java. 
Extensive operations on strings (e.g., &lt;code&gt;+&lt;/code&gt; in a big loop) is usually very slow before Java 7
(the &lt;code&gt;+&lt;/code&gt; operator is optimized by the compiler automatically starting from Java 7).
To avoid this problem (in older versions of Java), 
you can use the &lt;code&gt;StringBuilder&lt;/code&gt; class instead to improve performance. 
The &lt;code&gt;StringBuilder&lt;/code&gt; class is mutable. 
When you make operations on a &lt;code&gt;StringBuilder&lt;/code&gt; object, 
the original object is mutated (unlike the &lt;code&gt;String&lt;/code&gt; class)
and returns the (mutated) original object.
Except improvement of performance, 
the &lt;code&gt;StringBuilder&lt;/code&gt; class also offer many other useful methods 
for string operations that are not included in the &lt;code&gt;String&lt;/code&gt; class. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you want to read or write large text (e.g. more than 100M), 
you can use &lt;code&gt;BufferedRead&lt;/code&gt; and &lt;code&gt;BufferedWriter&lt;/code&gt; to improve performance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There is no built-in sort method for String. 
To sort characters in a string,
you can first convert the string into a char array,
sort the char array and convert back.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You want to the equals method to compare string most of time 
unless you know for sure that comparing references is the right way.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="Java"></category><category term="programming"></category><category term="string"></category><category term="character"></category></entry><entry><title>Exceptions in Java</title><link href="http://www.legendu.net/en/blog/exceptions-in-java/" rel="alternate"></link><published>2015-02-20T10:57:53-08:00</published><updated>2015-02-20T10:57:53-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-02-20:/en/blog/exceptions-in-java/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;You can suppress warnings of unchecked exceptions by using &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SuppressWarnings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;unchecked&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;but generally speaking, 
you cannot suppress warnings of checked exceptions.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You can use more than one &lt;code&gt;catch&lt;/code&gt; blocks if necessary
but you can only catch one exception in a catch block before Java 7.
Starting from Java 7, 
you …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;You can suppress warnings of unchecked exceptions by using &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SuppressWarnings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;unchecked&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;but generally speaking, 
you cannot suppress warnings of checked exceptions.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You can use more than one &lt;code&gt;catch&lt;/code&gt; blocks if necessary
but you can only catch one exception in a catch block before Java 7.
Starting from Java 7, 
you can catch multiple exceptions in a catch block.
For example,
The old style Java code&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="n"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FirstException&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
     &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="n"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="n"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SecondException&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
     &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="n"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;becomes&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="n"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FirstException&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;SecondException&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
     &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in Java 7.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To guarantee that some code will be run eventually,
you have to put it into a &lt;code&gt;finally&lt;/code&gt; block before Java 7.
Starting from Java 7, 
filesystem resources are managed automatically 
so that you do not have to release them manually in a &lt;code&gt;finally&lt;/code&gt; block.
For example,
old style Java code&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;BufferedReader&lt;/span&gt; &lt;span class="nv"&gt;br&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;new&lt;/span&gt; &lt;span class="nv"&gt;BufferedReader&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;new&lt;/span&gt; &lt;span class="nv"&gt;FileReader&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="ss"&gt;))&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;try&lt;/span&gt; {
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;br&lt;/span&gt;.&lt;span class="nv"&gt;readLine&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
} &lt;span class="nv"&gt;finally&lt;/span&gt; {
   &lt;span class="nv"&gt;br&lt;/span&gt;.&lt;span class="nv"&gt;close&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;becomes&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;try&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;BufferedReader&lt;/span&gt; &lt;span class="nv"&gt;br&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;new&lt;/span&gt; &lt;span class="nv"&gt;BufferedReader&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;new&lt;/span&gt; &lt;span class="nv"&gt;FileReader&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="ss"&gt;))&lt;/span&gt; {
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;br&lt;/span&gt;.&lt;span class="nv"&gt;readLine&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in Java 7.&lt;/p&gt;</content><category term="exception"></category><category term="programming"></category><category term="Java"></category></entry><entry><title>High Performance Computing in Java</title><link href="http://www.legendu.net/en/blog/high-performance-computing-in-java/" rel="alternate"></link><published>2015-02-20T10:52:13-08:00</published><updated>2015-02-20T10:52:13-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-02-20:/en/blog/high-performance-computing-in-java/</id><summary type="html">&lt;h2 id="efficient-computing"&gt;Efficient Computing&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Avoid resizing arrays and ArrayLists if the alternative does not cost
too much memory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avoid creating unnecessary objects if possible.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="parallel-computing"&gt;Parallel Computing&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;After you open a pool, the threads in the pool might still exist and
run outside the scope (the method in which the pool is created …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h2 id="efficient-computing"&gt;Efficient Computing&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Avoid resizing arrays and ArrayLists if the alternative does not cost
too much memory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avoid creating unnecessary objects if possible.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="parallel-computing"&gt;Parallel Computing&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;After you open a pool, the threads in the pool might still exist and
run outside the scope (the method in which the pool is created). To
ensure that the pool is destroyed before the end of its scope
(before the program leaves the method in which the pool is created),
you must wait for termination of pool manually. Notice that some
other packages in java or some other languages might have
implemented thread pool differently, but generaly speaking, what
java does is the nature way. Depends on what you want to do, you
must decide whether to manually wait for termination of the pool
carefully.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Not all parallel code runs faster than serial code while parallel
code is almost surely much hard to develop, so you have to think
about your problem and decide whether it is worth writing parallel
code to solve your problem. Usually the process of generating random
numbers cannot be parallelized, so if the process of generating
random numbers is the bottleneck, it is no use to do parallel
computing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remember to use defensive copy for constructors and methods of
classes that implement &lt;code&gt;Runnable&lt;/code&gt;, except for these variables
through which threads communicate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Runtime&lt;/code&gt; in Java can help to find the number of processors that a
computer have. Notice that every Java application has a single
instance of class Runtime that allows the application to interface
with the environment in which the application is running. The
current runtime can be obtained from the &lt;code&gt;getRuntime&lt;/code&gt; method.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Never use more threads than the number of processor of the machine
on which the Java application will be run on. With the help of
&lt;code&gt;Runtime&lt;/code&gt; we can write universal code for parallel computing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You should always synchronize shared objects among different threads
because of delay effect in parallel computing. If we can make
different threads independent, we'd do it because this not only make
the code easy and run faster.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You should use thread pool to avoid the cost of creating new thread
if there are many different parts in parallel computing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="programming"></category><category term="thread"></category><category term="Java"></category><category term="HPC"></category><category term="parallel"></category><category term="concurrency"></category><category term="high performance computing"></category></entry><entry><title>Tricky Problems in MATLAB</title><link href="http://www.legendu.net/en/blog/tricky-problems-in-MATLAB/" rel="alternate"></link><published>2015-02-20T10:41:22-08:00</published><updated>2015-02-20T10:41:22-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-02-20:/en/blog/tricky-problems-in-MATLAB/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Sometimes you might find that you can use some built-in function in
MATLAB at first, but later you cannot use it any. If so, you should
probably check whether you are doing parallel computing in MATLAB.
Parallel computing in MATLAB can cause some problem. What you can do
is to …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Sometimes you might find that you can use some built-in function in
MATLAB at first, but later you cannot use it any. If so, you should
probably check whether you are doing parallel computing in MATLAB.
Parallel computing in MATLAB can cause some problem. What you can do
is to use other functions that MATLAB accept in parallel computing
to replace these which result in problems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dlmwrite&lt;/code&gt; is convenient to write vector and matrix data to a file,
but it might lose accuracy especially when you do not specify the
accuracy attribute. So do not use &lt;code&gt;dlmwrite&lt;/code&gt; to write data into text
files when you works with high accuracy data, instead, you can use
binary data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;+&lt;/code&gt; has priority over &lt;code&gt;:&lt;/code&gt; in MATLAB which is different from R.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When MATLAB starts, it set the random number generator to the
default one and set the seed to be the default seed. So if you run a
simulation, reboot MATLAB and run the same simulation, you will get
the same results.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Since most arithmetic objects in MATLAB are matrices, arithmetic
operations in MATLAB are basically matric operations. So &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;,
&lt;code&gt;\*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt; are matrix addition operator, matrix subtraction
operator, matrix multiplication operator and matrix division
operator respectively. 
Notice that &lt;code&gt;/&lt;/code&gt; is also called right matrix division operator. Suppose
&lt;code&gt;B/A=X&lt;/code&gt;, it means that &lt;code&gt;XA=B&lt;/code&gt;. There is also another matrix division
operator &lt;span class="math"&gt;\(\backslash\)&lt;/span&gt;. Suppose &lt;span class="math"&gt;\(B\backslash A=X\)&lt;/span&gt;, it means that
&lt;code&gt;AX=B&lt;/code&gt;.
If you want to perform element wise
operation rather than matrix operations, you have to put
an extra dot (i.e. &lt;code&gt;.&lt;/code&gt;) before the corresponding matrix
operators.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="trick"></category><category term="trap"></category><category term="programming"></category><category term="MATLAB"></category></entry><entry><title>String in MATLAB</title><link href="http://www.legendu.net/en/blog/string-in-MATLAB/" rel="alternate"></link><published>2015-02-20T10:40:42-08:00</published><updated>2015-02-20T10:40:42-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-02-20:/en/blog/string-in-MATLAB/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To display special characters (e.g. &lt;code&gt;\n&lt;/code&gt;, &lt;code&gt;\t&lt;/code&gt; and so on),
you have to use &lt;code&gt;sprintf&lt;/code&gt; to format it first. 
&lt;code&gt;fprintf&lt;/code&gt; does the job of formatting and printing together.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unlike R, 
numbers in MATLAB will not be silently converted to strings when needed.
You must use the function &lt;code&gt;num2str&lt;/code&gt; to …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To display special characters (e.g. &lt;code&gt;\n&lt;/code&gt;, &lt;code&gt;\t&lt;/code&gt; and so on),
you have to use &lt;code&gt;sprintf&lt;/code&gt; to format it first. 
&lt;code&gt;fprintf&lt;/code&gt; does the job of formatting and printing together.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unlike R, 
numbers in MATLAB will not be silently converted to strings when needed.
You must use the function &lt;code&gt;num2str&lt;/code&gt; to convert numbers to strings manually.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="string"></category><category term="programming"></category><category term="MATLAB"></category></entry><entry><title>Performance Tips for C++</title><link href="http://www.legendu.net/en/blog/performance-tips-for-cpp/" rel="alternate"></link><published>2015-02-20T10:36:42-08:00</published><updated>2015-02-20T10:36:42-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-02-20:/en/blog/performance-tips-for-cpp/</id><summary type="html">&lt;h2 id="performance"&gt;Performance&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If there is some block of useless code, 
the compile is smart enough to ignore it and thus speed up the program.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the option &lt;code&gt;-O2&lt;/code&gt; to generate optimized code when you are ready to publish your code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Define variables only when needed to avoid the overhead of creating …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h2 id="performance"&gt;Performance&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If there is some block of useless code, 
the compile is smart enough to ignore it and thus speed up the program.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the option &lt;code&gt;-O2&lt;/code&gt; to generate optimized code when you are ready to publish your code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Define variables only when needed to avoid the overhead of creating and deleting temporary variables.
It is suggested that you put variables into the smallest possible enclosing brace. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When shuffling data, it is better to shuffle in place 
if objects/data to be shuffled are not expensive to copy 
(e.g., when data are double or integers).
Otherwise, it is better to shuffle indexes/iterators of the container.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is STRONGLY suggested that you specify the size/capacity of a vector 
if you know it. 
Even if you do not know the exactly size of a vector, 
it is often a good idea to initialize the vector with an rough estimate of its final size. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="tips"></category><category term="performance"></category><category term="C++"></category><category term="programming"></category></entry><entry><title>Lambda Function in C++11</title><link href="http://www.legendu.net/en/blog/lambda-function-in-cpp11/" rel="alternate"></link><published>2015-02-20T10:35:46-08:00</published><updated>2015-02-20T10:35:46-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-02-20:/en/blog/lambda-function-in-cpp11/</id><summary type="html">&lt;h2 id="lambda-function"&gt;Lambda Function&lt;/h2&gt;
&lt;p&gt;Check [here[(https://github.com/dclong/cearn/tree/master/lambda) 
for illustrative examples for the following discussions. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;When capture variables, 
you can define new variables in the &lt;code&gt;[]&lt;/code&gt; of a lambda expression.
For example, 
if a lambda function need the sum of two double variable &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, 
you …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h2 id="lambda-function"&gt;Lambda Function&lt;/h2&gt;
&lt;p&gt;Check [here[(https://github.com/dclong/cearn/tree/master/lambda) 
for illustrative examples for the following discussions. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;When capture variables, 
you can define new variables in the &lt;code&gt;[]&lt;/code&gt; of a lambda expression.
For example, 
if a lambda function need the sum of two double variable &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, 
you can use &lt;code&gt;[s=x+y]&lt;/code&gt; to capture the sum of 
these two variables (by value) instead of capture both of them. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Currently the &lt;code&gt;const&lt;/code&gt; keyword is not in the grammer for captures, 
so that if you cannot capture an object by const reference directly. 
A way to walk around this is to first make a const reference of that object, 
and then capture the const reference by reference.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When an object is captured by value, 
it cannot be mutated by the lambda function. 
If you want the lambda function to be able to mutate the capture value, 
you should use the keyword &lt;code&gt;mutable&lt;/code&gt;, e.g., &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="n"&gt;mutable&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To capture a member variable &lt;code&gt;data&lt;/code&gt; in a class, 
you have to capture &lt;code&gt;this&lt;/code&gt; pointer,
i.e., 
you have to use either &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(...)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;or &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="p"&gt;](...)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice that the ways are different.
In the way, 
when you use &lt;code&gt;data&lt;/code&gt;, 
it is actually &lt;code&gt;this-&amp;gt;data&lt;/code&gt;.
This means that &lt;code&gt;data&lt;/code&gt; is alwasy accessed via &lt;code&gt;this&lt;/code&gt; pointer,
so you can consider it as capture by reference. 
The second way is capture by value. 
Surely you make it capture by reference by adding &lt;code&gt;&amp;amp;&lt;/code&gt; before &lt;code&gt;d&lt;/code&gt;. 
This is the preferred over the first way of capturing &lt;code&gt;this&lt;/code&gt; 
if you just want to capture &lt;code&gt;data&lt;/code&gt; not other member variables. &lt;/p&gt;</content><category term="C++"></category><category term="lambda"></category><category term="programming"></category></entry><entry><title>Containers and Iterators in C++</title><link href="http://www.legendu.net/en/blog/containers-and-iterators-in-cpp/" rel="alternate"></link><published>2015-02-20T10:34:29-08:00</published><updated>2015-02-20T10:34:29-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-02-20:/en/blog/containers-and-iterators-in-cpp/</id><summary type="html">&lt;h2 id="containers"&gt;Containers&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Prefer &lt;code&gt;std::deque&lt;/code&gt; to &lt;code&gt;std::vector&lt;/code&gt; when the size of the container is unknow. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Suppose set &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; are two set with the same type
and set &lt;code&gt;C&lt;/code&gt; is another set with the same value type but a different comparison function,
then it is still valid to insert …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h2 id="containers"&gt;Containers&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Prefer &lt;code&gt;std::deque&lt;/code&gt; to &lt;code&gt;std::vector&lt;/code&gt; when the size of the container is unknow. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Suppose set &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; are two set with the same type
and set &lt;code&gt;C&lt;/code&gt; is another set with the same value type but a different comparison function,
then it is still valid to insert results of set operations 
(union, difference, intersection, symmetric difference and so on)
on A and B into set &lt;code&gt;C&lt;/code&gt;.
It is just that values in C are sorted according to 
the comparison function of &lt;code&gt;C&lt;/code&gt; not comparison function of &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is known to all that a set is sorted (according to its comparison function). 
You cannot sort the set in place using &lt;code&gt;std::sort&lt;/code&gt; with another comparison function.
To sort elements in the set with another comparison function, 
you have to create a new container (e.g. a vector), copy the elements over and sort them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use &lt;code&gt;std::set::count&lt;/code&gt; to check whether a set contains a value or not.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Removing an element from a set/list/map only 
affects reference to the remove element not references to other elements.
However, 
removing an element from a vector affects references to elements after the removed elements. 
A good way to works with vector is to operate on it backwards. 
That is iterating a vector backwards, 
removing elements from a vector backwards, etc. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;std::map&lt;/code&gt; is similar to &lt;code&gt;std::set&lt;/code&gt; from many aspect. 
For example, 
&lt;code&gt;std::map&lt;/code&gt; contains values with unique and sorted keys while &lt;code&gt;std::set&lt;/code&gt; contains unique and sorted keys.;
both &lt;code&gt;std::map&lt;/code&gt; and &lt;code&gt;std::set&lt;/code&gt; have a &lt;code&gt;count&lt;/code&gt; method which helps to check whether a &lt;code&gt;map/set&lt;/code&gt; contains a key or not;
both &lt;code&gt;std::map&lt;/code&gt; and &lt;code&gt;std::set&lt;/code&gt; have a &lt;code&gt;find&lt;/code&gt; method which helps to find the position of a key in a &lt;code&gt;map/set&lt;/code&gt;.
Actually, 
a &lt;code&gt;std::set&lt;/code&gt; can be considered as a special case of &lt;code&gt;std::map&lt;/code&gt; where the value is of no interest. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;std::map::at&lt;/code&gt; method is preferred over the &lt;code&gt;std::map::operator[]&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Associative containers such as &lt;code&gt;std::map&lt;/code&gt; and &lt;code&gt;std::set&lt;/code&gt; have methods related binary search 
(e.g., &lt;code&gt;count&lt;/code&gt; and &lt;code&gt;find&lt;/code&gt;) 
while sequence containers such as &lt;code&gt;std::vector&lt;/code&gt; and &lt;code&gt;std::list&lt;/code&gt; do not have these methods. 
If a sequence container is sorted (e.g., use &lt;code&gt;std::sort&lt;/code&gt;), 
you can apply functions &lt;code&gt;std::count&lt;/code&gt; and &lt;code&gt;std::find&lt;/code&gt; on it. 
Sequence containers have methods which can access and modify elements at the front and back of the containers 
(e.g., &lt;code&gt;std::front&lt;/code&gt;, &lt;code&gt;std::pop_front&lt;/code&gt;, &lt;code&gt;std::back&lt;/code&gt;, &lt;code&gt;std::pop_back&lt;/code&gt;) 
while associative containers do not have such methods. 
To access the first and last element of an associative container, 
you have to use iterators. 
For example, 
to get the last element of a set &lt;code&gt;x&lt;/code&gt;, 
you can use &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rbegin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="iterator"&gt;Iterator&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The difference between points/iterator is of type std::ptrdiff_t,
which is essentially a "signed" integer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The result of &lt;code&gt;std::reverse_iterator::base&lt;/code&gt; decreased 
by 1 is the corresponding (non-reversed) iterator. 
For example, 
if you want to erase the last element from a set &lt;code&gt;s&lt;/code&gt;, 
you can use &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;erase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="c1"&gt;--(s.rbegin().base()));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;</content><category term="C++"></category><category term="programming"></category><category term="list"></category><category term="set"></category><category term="map"></category><category term="iterator"></category><category term="container"></category><category term="C/C++"></category><category term="vector"></category></entry><entry><title>Tips for the IML Procedure in SAS</title><link href="http://www.legendu.net/en/blog/sas-iml-procedure/" rel="alternate"></link><published>2015-02-19T15:30:52-08:00</published><updated>2015-02-19T15:30:52-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-02-19:/en/blog/sas-iml-procedure/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/sas/sas.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;End an &lt;code&gt;IML&lt;/code&gt; procedure with &lt;code&gt;quit;&lt;/code&gt;.
You should never use &lt;code&gt;run;&lt;/code&gt; to end an IML procedure
because it is used for calling user-defined functions in IML procedures.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Until SAS 9.3,
the &lt;code&gt;IML&lt;/code&gt; procedure does not support overloading functions or recursive functions. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can define functions in the &lt;code&gt;IML&lt;/code&gt; procedure …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/sas/sas.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;End an &lt;code&gt;IML&lt;/code&gt; procedure with &lt;code&gt;quit;&lt;/code&gt;.
You should never use &lt;code&gt;run;&lt;/code&gt; to end an IML procedure
because it is used for calling user-defined functions in IML procedures.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Until SAS 9.3,
the &lt;code&gt;IML&lt;/code&gt; procedure does not support overloading functions or recursive functions. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can define functions in the &lt;code&gt;IML&lt;/code&gt; procedure, and the definition can be nested. 
That is you can define another function in a user-defined function. 
Note that the order of definition of functions matter (similar to C). 
A function must be defined before it is called. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the &lt;code&gt;IML&lt;/code&gt; procedure, 
every data object is a matrix.
There is no concept of vector in the IML procedure like R does.
However, elements of a matrix can be accessed by a single index (e.g., x[3]),
so you can a matrix with 1 row/column as if it is a vector (as in R).
When a matrix has multiple rows and columns, 
you can still access its elements using a single index,
but be aware that elements are read by ROW 
which is different from R.
For example, 
the following code prints out 2 and 10.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;proc iml;&lt;/span&gt;
    &lt;span class="k"&gt;x&lt;/span&gt; = {&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;, &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt; &lt;span class="m"&gt;1000&lt;/span&gt;};
    m = nrow(&lt;span class="k"&gt;x&lt;/span&gt;);
    n = ncol(&lt;span class="k"&gt;x&lt;/span&gt;);
    print (&lt;span class="k"&gt;x&lt;/span&gt;[&lt;span class="m"&gt;2&lt;/span&gt;]);
    print(&lt;span class="k"&gt;x&lt;/span&gt;[&lt;span class="m"&gt;4&lt;/span&gt;])&lt;span class="kr"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;quit;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;In SAS, 
data sets are global which means that any procedure can use a created data set.
However, 
variables defined in a &lt;code&gt;IML&lt;/code&gt; procedure is local, 
which means that variables defined in different &lt;code&gt;IML&lt;/code&gt; procedures are not shared. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can define subroutines in a &lt;code&gt;IML&lt;/code&gt; procedure. 
A subroutine is just a bunch of statment putted together. 
A subroutine does not have any argument, 
which means that it must invoked without parentheses. 
A module/function can have argument(s), 
and must be invoked with parentheses. 
Another important difference is that 
variables defined in a function takes effect only in the function 
while variables in a module takes effect in the whole &lt;code&gt;IML&lt;/code&gt; procedure after its definition. 
Based on these comparision, 
function is more useful and better than module in the &lt;code&gt;IML&lt;/code&gt; procedure. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The slicing of vectors and matrices in the IML procedure is similar to that in R.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The name of a function in the &lt;code&gt;IML&lt;/code&gt; procedure can exceeds 8 characters, but I am not
sure about the maximum length.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use &lt;code&gt;mattrib&lt;/code&gt; to modify attributes of matrix in the &lt;code&gt;IML&lt;/code&gt; procedure. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You cannot print value of an expression directly in the IML procedure. 
You must either assign the value of the expression to a variable first or put the expression into parentheses. For example, 
proc iml;
    print 1+2;
quit;
raises an error while the following two ways of coding works.
proc iml;
    print (1+2);
quit;
proc iml;
    x = 1+2;
    print x;
quit;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You cannot use the &lt;code&gt;put&lt;/code&gt; command to print value of variables in the IML procedure,
instead, 
you should use the &lt;code&gt;print&lt;/code&gt; command. 
However, 
unlike &lt;code&gt;put&lt;/code&gt;, 
&lt;code&gt;print&lt;/code&gt; cannot format (e.g., date9.) output values.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can &lt;code&gt;||&lt;/code&gt; to combine matrix horizontally and &lt;code&gt;//&lt;/code&gt; to combine matrix vertically. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can define a same module multiple times in an IML procedure.
The last defintion will be used.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By default, 
modules defined in an IML procedure is not visible to another IML procedure.
However,
you can store modules (to a library) defined in an IML procedure 
using the statement 
    store module=LocNonMissingRows; 
And you probably want to change the library for storing modules to a permanent one
before you storing a module.
You can do this using 
    reset storage=BlogDir.BlogModules; 
You can then use a stored module in aother IML procedure by loading it first.
    load module=LocNonMissingRows;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can read files using the &lt;code&gt;%include&lt;/code&gt; command in an IML procedure.
This means that you can define modules and put them into sas files 
and read them in when needed. 
This makes your SAS code more resuable and easier to manage.
You can also store user-defined modules 
and load them to be accessible later. 
However, it is not as convenient as &lt;code&gt;%include&lt;/code&gt;. 
And store a module to a permannet location make it inconvenint to update these moduels.
It is suggested that you always use &lt;code&gt;%include&lt;/code&gt; to read definition of modules from files.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="questions"&gt;Questions&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;not very sure how to use default arguments in user-defined functions in the &lt;code&gt;IML&lt;/code&gt; procedure.&lt;/li&gt;
&lt;/ol&gt;</content><category term="SAS"></category><category term="matrix"></category><category term="programming"></category><category term="IML"></category></entry><entry><title>Boolean Values in C++</title><link href="http://www.legendu.net/en/blog/boolean-values-in-cpp/" rel="alternate"></link><published>2015-02-19T13:47:49-08:00</published><updated>2015-02-19T13:47:49-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-02-19:/en/blog/boolean-values-in-cpp/</id><summary type="html">&lt;h2 id="boolean-values"&gt;Boolean Values&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Boolean expressions are evaluated from left to right (the same in Java),
so it is totally OK to write code like &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;;x.size() &amp;amp;amp;&amp;amp;amp; x[a]){&lt;/span&gt;
    ...
}
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;where &lt;code&gt;x&lt;/code&gt; is a vector.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;There is no &lt;code&gt;&amp;amp;&amp;amp;=&lt;/code&gt; and &lt;code&gt;||=&lt;/code&gt; operators in C++,
instead you can use &lt;code&gt;&amp;amp;=&lt;/code&gt; and &lt;code&gt;|=&lt;/code&gt;.
Though …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h2 id="boolean-values"&gt;Boolean Values&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Boolean expressions are evaluated from left to right (the same in Java),
so it is totally OK to write code like &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;;x.size() &amp;amp;amp;&amp;amp;amp; x[a]){&lt;/span&gt;
    ...
}
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;where &lt;code&gt;x&lt;/code&gt; is a vector.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;There is no &lt;code&gt;&amp;amp;&amp;amp;=&lt;/code&gt; and &lt;code&gt;||=&lt;/code&gt; operators in C++,
instead you can use &lt;code&gt;&amp;amp;=&lt;/code&gt; and &lt;code&gt;|=&lt;/code&gt;.
Though &lt;code&gt;&amp;amp;=&lt;/code&gt; and &lt;code&gt;|=&lt;/code&gt; are not specially for boolean values, 
they work perfectly for boolean values.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the numbers you work with support infinity or NaN, 
boolean expressions become tricky. 
For example, suppose &lt;code&gt;nan&lt;/code&gt; is a varialbe representing Nan,
both &lt;code&gt;2 &amp;lt; nan&lt;/code&gt; and &lt;code&gt;2 &amp;gt;= nan&lt;/code&gt; return &lt;code&gt;false&lt;/code&gt;,
which is not what we want. 
A safer way is to first check whether numbers involved are NaNs. 
Hopefully, ternary boolean type will be introduced into C++ in future. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="boolean"></category><category term="C++"></category><category term="programming"></category></entry><entry><title>Initializing Variables in C++</title><link href="http://www.legendu.net/en/blog/initializing-varialbes-in-cpp/" rel="alternate"></link><published>2015-02-19T13:45:33-08:00</published><updated>2015-02-19T13:45:33-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-02-19:/en/blog/initializing-varialbes-in-cpp/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;code&gt;{}&lt;/code&gt; is more powerful than &lt;code&gt;()&lt;/code&gt; and thus is preferred over &lt;code&gt;()&lt;/code&gt;. 
You should use always use &lt;code&gt;{}&lt;/code&gt; except for a few cases where &lt;code&gt;()&lt;/code&gt; is necessary.
For example, 
if you want to create a vector of length 1000, 
you have to use &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;instead of &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1000 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;&lt;code&gt;{}&lt;/code&gt; is more powerful than &lt;code&gt;()&lt;/code&gt; and thus is preferred over &lt;code&gt;()&lt;/code&gt;. 
You should use always use &lt;code&gt;{}&lt;/code&gt; except for a few cases where &lt;code&gt;()&lt;/code&gt; is necessary.
For example, 
if you want to create a vector of length 1000, 
you have to use &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;instead of &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which create a vector with one element 1000.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Objects in C++ are intialized to have some value when they are created,
i.e., an object in C++ always have a valid value. 
This is different from Java. 
In Java, objects are essentially references. 
If an object in Java does not point to any memory when initializing, 
it is &lt;code&gt;null&lt;/code&gt;. 
In C++, 
it is impossible to have &lt;code&gt;null&lt;/code&gt; object. 
You can only have &lt;code&gt;null&lt;/code&gt; pointers in C++.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Universal initialization list &lt;code&gt;{}&lt;/code&gt; is very powerful and convenient,
especially when working with containers. 
However you cannot initialize non-const reference using &lt;code&gt;{}&lt;/code&gt;
using g++ 4.7, 
which seems to be a bug. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="initialization"></category><category term="C++"></category><category term="programming"></category></entry><entry><title>Install the GSL Library</title><link href="http://www.legendu.net/en/blog/install-gsl-library/" rel="alternate"></link><published>2015-02-19T13:41:31-08:00</published><updated>2015-02-19T13:41:31-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-02-19:/en/blog/install-gsl-library/</id><summary type="html">&lt;p&gt;GSL is an advance C/C++ library that is widely used. 
To install GSL, 
you can download the source file and 
following instruction in the included README and INSTALL document. 
For Unix/Linux users, 
the GSL library is often availabe in the repository. 
For example, you can use the following …&lt;/p&gt;</summary><content type="html">&lt;p&gt;GSL is an advance C/C++ library that is widely used. 
To install GSL, 
you can download the source file and 
following instruction in the included README and INSTALL document. 
For Unix/Linux users, 
the GSL library is often availabe in the repository. 
For example, you can use the following command to install the GSL library in Debian.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;wajig&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;libgsl0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will install the GSL library to the default location, 
so that you do not have specify the &lt;code&gt;-I&lt;/code&gt; and &lt;code&gt;-L&lt;/code&gt; options for the GSL library. 
However, 
you still have to use the option &lt;code&gt;-lgsl&lt;/code&gt; and &lt;code&gt;-lgslcblas&lt;/code&gt; 
(can be replaced by other available BLAS libraries) in order to compile your code using GSL.&lt;/p&gt;</content><category term="Debian"></category><category term="C/C++"></category><category term="Linux"></category><category term="programming"></category><category term="GSL"></category></entry><entry><title>Lvalue Reference and Rvalue Reference</title><link href="http://www.legendu.net/en/blog/lvalue-rvalue-reference/" rel="alternate"></link><published>2015-01-15T02:17:12-08:00</published><updated>2015-01-15T02:17:12-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-01-15:/en/blog/lvalue-rvalue-reference/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/cpp/left-right.jpg" height="180" width="200" align="right"/&gt;&lt;/p&gt;
&lt;h2 id="difference-betwen-lvalue-and-rvalue-reference"&gt;Difference betwen Lvalue and Rvalue Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Lvalue and Rvalue are terrible names. 
They are due to historical reasonal but people stuck with these names.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A lvalue reference has a name while a rvalue reference has no name, in other words, 
a lvalue reference is persistent while a rvalue reference is …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/cpp/left-right.jpg" height="180" width="200" align="right"/&gt;&lt;/p&gt;
&lt;h2 id="difference-betwen-lvalue-and-rvalue-reference"&gt;Difference betwen Lvalue and Rvalue Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Lvalue and Rvalue are terrible names. 
They are due to historical reasonal but people stuck with these names.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A lvalue reference has a name while a rvalue reference has no name, in other words, 
a lvalue reference is persistent while a rvalue reference is temporary.
Let &lt;code&gt;f(vector&amp;lt;int&amp;gt; &amp;amp;&amp;amp; x)&lt;/code&gt; be a function/method (can be a constructor) 
which takes a rvalue reference as argument.
It is common to misunderstand &lt;code&gt;x&lt;/code&gt; as a rvalue reference. 
When a rvalue reference/temporary object is passed to &lt;code&gt;f&lt;/code&gt;, 
it is moved to &lt;code&gt;x&lt;/code&gt;,
however, &lt;code&gt;x&lt;/code&gt; itself is not a rvalue reference/temporary object because it has a name.
&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; only means that it is OK to move &lt;code&gt;x&lt;/code&gt;, but does not mean that &lt;code&gt;x&lt;/code&gt; is a rvalue reference/temporary object.
And at the place where you intend to move &lt;code&gt;x&lt;/code&gt;, 
you must use &lt;code&gt;std::move&lt;/code&gt; manually to move it, 
otherwise, it get copied. 
Values return by functions/methods and expression are temporary values, 
so you do have to use &lt;code&gt;std::move&lt;/code&gt; to move them when you pass them 
to functions/emthods that take a rvalue reference as argument.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can take the address of a lvalue reference but you cannot take the address of a rvalue reference. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you apply &lt;code&gt;std::move&lt;/code&gt; on a primitive type variable (double, int and so on), 
it is usually lefted unchanged. 
This means that copy is usually the fastest way to implement
move on primitive types, but it is not guaranteed that copy is 
always used (different compiler might have different implementation on this). 
After being moved a variable still have a valid but unspecified value.
So do not use the value in a moved variable until you given it a new known value.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A lvalue referece cannot be moved. 
The reason is that such operation is not necessary. 
To move the object that the lvalue reference points to, 
one can move the object directly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You cannot use a vecotor (similar for other containers) of lvalue references,
because lvalue references have to be initialized to point to valid objects when they are created. 
An alternative way is to use vector of pointers/iterators instead. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Always use &lt;code&gt;const&lt;/code&gt; lvalue reference, unless you intend to change the referenced object. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="how-to-use-rvalue-reference"&gt;How to Use Rvalue Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Do not write &amp;amp;&amp;amp; to return type of a function,
and there is no need to return a local variable using &lt;code&gt;std::move&lt;/code&gt;.
When return a local variable, it is automatically move in C++11. 
However, if the local variable is static, then it is not moved as expected.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you copy content of an argument in a function, 
overload it with rvalue reference and move the content.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you write a class with the copy constructor and the assignment operator, 
write also the move constructor and the move assignment operator.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="C/C++"></category><category term="reference"></category><category term="programming"></category></entry><entry><title>Time and Date in R</title><link href="http://www.legendu.net/en/blog/time-and-date-in-r/" rel="alternate"></link><published>2015-01-14T16:46:40-08:00</published><updated>2015-01-14T16:46:40-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-01-14:/en/blog/time-and-date-in-r/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;The function &lt;code&gt;as.Date&lt;/code&gt; and &lt;code&gt;strptime&lt;/code&gt; convert string to dates. 
For these functions to work right, 
you must use the right format.&lt;/li&gt;
&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;The function &lt;code&gt;as.Date&lt;/code&gt; and &lt;code&gt;strptime&lt;/code&gt; convert string to dates. 
For these functions to work right, 
you must use the right format.&lt;/li&gt;
&lt;/ol&gt;</content><category term="R"></category><category term="date"></category><category term="time"></category><category term="programming"></category><category term="CRAN"></category></entry><entry><title>Compare R with Other Languages on Data Manipulation</title><link href="http://www.legendu.net/en/blog/pass-array-r-other-language/" rel="alternate"></link><published>2015-01-13T13:14:35-08:00</published><updated>2015-01-13T13:14:35-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2015-01-13:/en/blog/pass-array-r-other-language/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/r/r.png" height="200" width="240" align="right"/&gt;
Here I compare R with other languages such as C/C++, Java, MATLAB, Python and so
on data manipulation. I list a few advantages and disadvantages of R on data
manipulation compared with other programming languages. &lt;/p&gt;
&lt;p&gt;Generally speaking, it is very convenient to manipulate data in R. Using function
&lt;code&gt;read …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/r/r.png" height="200" width="240" align="right"/&gt;
Here I compare R with other languages such as C/C++, Java, MATLAB, Python and so
on data manipulation. I list a few advantages and disadvantages of R on data
manipulation compared with other programming languages. &lt;/p&gt;
&lt;p&gt;Generally speaking, it is very convenient to manipulate data in R. Using function
&lt;code&gt;read.table&lt;/code&gt; (and other derived functions), you can read numerical and
character data into a data frame from a text file at the same time. Though other
programming languages can do this too, most of them are not as simple and convenient
as R. For example, you can read in a table in MATLAB using function &lt;code&gt;dlmread&lt;/code&gt;,
but the data has to be of the same type. Function &lt;code&gt;xlsread&lt;/code&gt; in MATLAB can read
numerical and character values at the same type, but as its name indicates, it
relies on the Microsoft Excel software. What is more, &lt;code&gt;xlsread&lt;/code&gt; read data into a
cell which does not have row names and column names attributes. The first row of
the data (usually stands for the headers) is read into the cell as the first row
of data. This is inconvenient. 
A matrix and data frame in R can have both column names and row names.
They make extracting and recording data very convenient in R.
MATLAB is close to R in the sense that its matrix data structure is comparable
to the matrix data structure in R, and its structure array data structure is
comparable to the data frame data structure in R. However, you can only extract
rows from a structure array but not columns. The cell data structure in MATLAB
is another data structure that is comparable to the data frame data structre in
R, however, as I mentioned before it doesn't have row names and column names
attributes. All these things make it a hessle to work on data with different
types at the same time in MATLAB. &lt;/p&gt;
&lt;p&gt;Python has some libraries (e.g., pandas and pydataframe) that offer similar
object as data frame in R and similar functions as &lt;code&gt;read.table&lt;/code&gt; and
&lt;code&gt;write.table&lt;/code&gt; (and their derived functions) in R. One advatange of Python over R
is that it has better support of object oriented programming than R. Working on
vector alike object in python is more convenient than in R many times. For example, you can
easily insert an element into a list in Python with the &lt;code&gt;insert&lt;/code&gt; method while in
R you have to extract parts of a vector/list and then recombine them with the
elements you want to insert. &lt;/p&gt;
&lt;p&gt;Support of string in C awful. Java has a better support of string, however, I
don't know whether there are libraries offering convenient ways to read and write data like 
&lt;code&gt;read.table&lt;/code&gt; and &lt;code&gt;write.table&lt;/code&gt; in R. Honestly speaking, I doubt. What's more,
compiled langugaes are not as convenient as script languages to explore data.&lt;/p&gt;
&lt;p&gt;Given these things discussed above, Python and R
are good choices if you have to deal with both numerical and character data at the same time.&lt;/p&gt;</content><category term="Python"></category><category term="C++"></category><category term="programming"></category><category term="statistics"></category><category term="Java"></category><category term="string"></category><category term="data frame"></category><category term="R"></category><category term="OOP"></category><category term="MATLAB"></category><category term="CRAN"></category></entry><entry><title>Cartesian Product in SAS</title><link href="http://www.legendu.net/en/blog/cartesian%20product%20in%20sas/" rel="alternate"></link><published>2014-10-23T15:52:51-07:00</published><updated>2014-10-23T15:52:51-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2014-10-23:/en/blog/cartesian product in sas/</id><summary type="html">&lt;p&gt;Suppose we have 2 variables &lt;code&gt;x = ("a", "b", "c")&lt;/code&gt; and &lt;code&gt;y = (1, 2, 3)&lt;/code&gt;,
and we want to create a dataset containing the Cartesian product of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; in SAS.
This can be achieved by manually input the Cartesian product of x and y in a data step.
However …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Suppose we have 2 variables &lt;code&gt;x = ("a", "b", "c")&lt;/code&gt; and &lt;code&gt;y = (1, 2, 3)&lt;/code&gt;,
and we want to create a dataset containing the Cartesian product of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; in SAS.
This can be achieved by manually input the Cartesian product of x and y in a data step.
However,
this is infeasible when &lt;code&gt;x&lt;/code&gt; and/or &lt;code&gt;y&lt;/code&gt; is very large or &lt;code&gt;x&lt;/code&gt; and/or &lt;code&gt;y&lt;/code&gt; can only be determined at run time. 
Here I provide 2 two general ways to generate Cartesian product of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="use-outer-join-of-sql"&gt;Use Outer Join of SQL&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;input&lt;/span&gt; &lt;span class="n"&gt;x$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;datalines&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="k"&gt;c&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;input&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;datalines&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;proc&lt;/span&gt; &lt;span class="k"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="n"&gt;cart&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt;
    &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
    &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="use-loop-in-data-step"&gt;Use Loop in Data Step&lt;/h2&gt;
&lt;p&gt;If one of the 2 variables (whose Cartesian product is to be calculated) 
has an explicit expression (e.g., &lt;span class="math"&gt;\(y_i = i\)&lt;/span&gt;), 
then we can also use a loop in a data step to calculate the Cartesian product.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;data&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;input&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;$&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;datalines&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;a&lt;/span&gt;
&lt;span class="nv"&gt;b&lt;/span&gt;
&lt;span class="nv"&gt;c&lt;/span&gt;
&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;run&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;data&lt;/span&gt; &lt;span class="nv"&gt;cart&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;run&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(Note: the loop trick a frequently used one in SAS to convert a "fat" data to a "thin" data.)&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="programming"></category><category term="SAS"></category><category term="Cartesian product"></category></entry><entry><title>Copy Arrays in Java</title><link href="http://www.legendu.net/en/blog/copy-array-java/" rel="alternate"></link><published>2014-10-19T13:48:18-07:00</published><updated>2014-10-19T13:48:18-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2014-10-19:/en/blog/copy-array-java/</id><summary type="html">&lt;p&gt;There are several different ways to copy arrays of object (primitive types) in Java. 
However, 
the fastest way seems to be &lt;code&gt;System.arraycopy&lt;/code&gt;. 
This methed is implemented using native code and only performs a shallow copy. 
Acutally most methods for copying arrays in Java perform shallow copy.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;There are several different ways to copy arrays of object (primitive types) in Java. 
However, 
the fastest way seems to be &lt;code&gt;System.arraycopy&lt;/code&gt;. 
This methed is implemented using native code and only performs a shallow copy. 
Acutally most methods for copying arrays in Java perform shallow copy.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;copies&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;elements&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;arr1&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;arr2&lt;/span&gt; 
&lt;span class="k"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arraycopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="array"></category><category term="copy"></category><category term="Java"></category><category term="programming"></category></entry><entry><title>Type Cast in Java</title><link href="http://www.legendu.net/en/blog/type-cast-in-java/" rel="alternate"></link><published>2014-10-02T10:50:55-07:00</published><updated>2014-10-02T10:50:55-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2014-10-02:/en/blog/type-cast-in-java/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;You cannot cast between integer and boolean values. 
However it is trivia to convert data between integer and boolean. 
For example,
&lt;code&gt;int i = b ? 1 : 0;&lt;/code&gt; convert a boolean value &lt;code&gt;b&lt;/code&gt; into an integer value &lt;code&gt;i&lt;/code&gt;, 
and &lt;code&gt;boolean b = i != 0&lt;/code&gt; convert an integer value &lt;code&gt;i&lt;/code&gt; into a boolean value …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;You cannot cast between integer and boolean values. 
However it is trivia to convert data between integer and boolean. 
For example,
&lt;code&gt;int i = b ? 1 : 0;&lt;/code&gt; convert a boolean value &lt;code&gt;b&lt;/code&gt; into an integer value &lt;code&gt;i&lt;/code&gt;, 
and &lt;code&gt;boolean b = i != 0&lt;/code&gt; convert an integer value &lt;code&gt;i&lt;/code&gt; into a boolean value &lt;code&gt;b&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;</content><category term="type cast"></category><category term="programming"></category><category term="Java"></category></entry><entry><title>String in Different Programming Languages</title><link href="http://www.legendu.net/en/blog/summary-string-popular-programming-language/" rel="alternate"></link><published>2014-09-14T16:34:30-07:00</published><updated>2014-09-14T16:34:30-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2014-09-14:/en/blog/summary-string-popular-programming-language/</id><summary type="html">&lt;p&gt;A string is essentially a sequence of characters. 
This is how string is implemented in many programming languages (string in Java is different).
For this reason, you can operate string like an array in some programming languages.
This post is a shallow summary on strings in different programming languages.
For …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A string is essentially a sequence of characters. 
This is how string is implemented in many programming languages (string in Java is different).
For this reason, you can operate string like an array in some programming languages.
This post is a shallow summary on strings in different programming languages.
For a deep discussion, please check other posts. &lt;/p&gt;
&lt;h2 id="representate"&gt;Representate&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++: double quotes (single quotes for char type)&lt;/li&gt;
&lt;li&gt;Java: double quotes (single quotes for char type)&lt;/li&gt;
&lt;li&gt;Bash: single or double quotes (double quotes allows expansion of varialbes while single quotes not) &lt;/li&gt;
&lt;li&gt;Python: single or double quotes (exchangeable)&lt;/li&gt;
&lt;li&gt;Ruby: single or double quotes (single preserve escapes while double interpret them)&lt;/li&gt;
&lt;li&gt;R: single or double quotes (exchangeable)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="substring"&gt;Substring&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++: use iterators and constructor of the std::string class&lt;/li&gt;
&lt;li&gt;Java: substring() as a method&lt;/li&gt;
&lt;li&gt;Bash: &lt;code&gt;${str:0:3}&lt;/code&gt; where &lt;code&gt;str&lt;/code&gt; is a string variable&lt;/li&gt;
&lt;li&gt;Python: used like an array &lt;code&gt;str[2:]&lt;/code&gt;, &lt;code&gt;str[:2]&lt;/code&gt;, &lt;code&gt;x[:-2]&lt;/code&gt;, ...&lt;/li&gt;
&lt;li&gt;Ruby: &lt;code&gt;slice()&lt;/code&gt; as a method or used like an array str[3..-1], str[2,3], ...&lt;/li&gt;
&lt;li&gt;R: &lt;code&gt;substr()&lt;/code&gt; as a function&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="concatenate"&gt;Concatenate&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++: +&lt;/li&gt;
&lt;li&gt;Java: +&lt;/li&gt;
&lt;li&gt;Bash: &lt;code&gt;"${str1}other_str"&lt;/code&gt; where &lt;code&gt;str1&lt;/code&gt; is a string variable. If no white space, double quotes can be omitted&lt;/li&gt;
&lt;li&gt;Python: +&lt;/li&gt;
&lt;li&gt;Ruby: + &lt;/li&gt;
&lt;li&gt;R: paste() as a function&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="length"&gt;Length&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++: size() as a method&lt;/li&gt;
&lt;li&gt;Java: length() as a method&lt;/li&gt;
&lt;li&gt;Bash: &lt;code&gt;${#v}&lt;/code&gt; where &lt;code&gt;v&lt;/code&gt; is a variable in bash &lt;/li&gt;
&lt;li&gt;Python: len() as a function&lt;/li&gt;
&lt;li&gt;Ruby: length() as a method&lt;/li&gt;
&lt;/ul&gt;</content><category term="Python"></category><category term="programming"></category><category term="Java"></category><category term="string"></category><category term="bash"></category><category term="Ruby"></category><category term="R"></category></entry><entry><title>General Tips for MATLAB</title><link href="http://www.legendu.net/en/blog/general-tips-for-MATLAB/" rel="alternate"></link><published>2014-09-08T10:35:47-07:00</published><updated>2014-09-08T10:35:47-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2014-09-08:/en/blog/general-tips-for-MATLAB/</id><summary type="html">&lt;h2 id="skills"&gt;Skills&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;MATLAB support profiling running time of code, 
so that you what to work on to optimize your code.s&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is expensive to allocate a new block of memory (not only in MATLAB
but also in other programming laguages), 
so you should avoid allocating new blocks of memory all …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h2 id="skills"&gt;Skills&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;MATLAB support profiling running time of code, 
so that you what to work on to optimize your code.s&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is expensive to allocate a new block of memory (not only in MATLAB
but also in other programming laguages), 
so you should avoid allocating new blocks of memory all the time. 
It is better to allocate a big block of memory once and forever 
if you know the actually size of memory that you have to use 
(e.g. usually you know the size of arrays and matrices that you are going to use) 
than to allocate small blocks of memory many times. 
If it is impossible to avoid allocating new blocks of memory, 
it is better to allocate a bigger memory than needed each time. 
In this way, you waste space but might save much time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use block &lt;code&gt;try ... catch ... end&lt;/code&gt; to handle code that might throw exception in MATLAB. 
You should be aware of the importance of handling exception. 
In many cases you just cannot afford to stop running code, 
for example the program written for a rocket should not stop running when exception happens. 
Even for statistician, 
it is very important to handle exceptions. 
For example, if you run a code which might takes 2 month, 
but your code throws out an exception after running a month. 
Do you want the program to the stop running after half the the long task has been done? 
So a better ways is always handle any exceptions that throws out. 
Some exceptions might result from hardware (e.g. no enough disk space). 
In this case, 
you can let your code notify you (e.g. via email or text message) 
and then wait for you fix the problem and then continue running.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sometimes you might want to write a user-defined function 
with variable (even unknown) number of arguments. 
There are some functions helpful for this in MATLAB. 
&lt;code&gt;nargin&lt;/code&gt; and &lt;code&gt;nargout&lt;/code&gt; returns the number of input variables and output variables; 
&lt;code&gt;nargcheck&lt;/code&gt; and &lt;code&gt;nargoutchk&lt;/code&gt; validate number of input and output arguments respectively; 
&lt;code&gt;varargin&lt;/code&gt; and &lt;code&gt;varargout&lt;/code&gt; stand for input and output argument lists respectively.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;break, return goto and error&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By default, MATLAB use "short" format to display out, 
which uses only four decimal digits for numbers. 
To change the display format, you can use &lt;code&gt;format&lt;/code&gt;. 
For example, you can use &lt;code&gt;format('longG')&lt;/code&gt; to make MATLAB give more readable outputs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can execute system command by invoke &lt;code&gt;system&lt;/code&gt;, 
which is similar to R. 
For example, 
to shutdown computer 1 hour after computing in MATLAB is done in Windows operating system, 
you can add &lt;code&gt;shutdown('shutdown/s /t 3600')&lt;/code&gt; at the end of your code 
or just type it into the console while the code is running. 
Similarly, 
you can invoke &lt;code&gt;dos&lt;/code&gt; to run dos command and &lt;code&gt;perl&lt;/code&gt; to execute perl script.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use &lt;code&gt;computer&lt;/code&gt; to get information about the computer on which MATLAB is running.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="programming"&gt;Programming&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;MATLAB supports boolean variables. 
(I somehow have an impression that MATLAB does not support variables 
and one must use 1 or 0 instead. 
I am not sure whether boolean variables are introduced in newer versions of MATLAB or not.)
A boolean variable has 3 possible values: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;unknown&lt;/code&gt; 
(more programming languages are supporting ternary boolean variables).
You have to be very careful about the &lt;code&gt;unknown&lt;/code&gt; value.
It can be error-prone sometimes.
Logical comparisons can be assigned to (boolean) variables directly. 
Numerical values are casted to boolean values when needed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The syntax of MATLAB is kind of a mix of &lt;code&gt;Visual Basic&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;statements&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;defines a function named &lt;code&gt;f&lt;/code&gt; in MATLAB. 
To get all 3 return values of &lt;code&gt;f&lt;/code&gt;, 
you must call it in the form of &lt;code&gt;[rv1, rv2, rv3] = f(arg1, arg2, arg3, arg4);&lt;/code&gt;;
to get the first 2 return values of &lt;code&gt;f&lt;/code&gt;, 
you call it in the form of &lt;code&gt;[rv1, rv2] = f(arg1, arg2, arg3, arg4);&lt;/code&gt;, so on and so forth.
Notice that you cannot use a vector with length &lt;code&gt;k&lt;/code&gt; to extract the first &lt;code&gt;k&lt;/code&gt; return values of &lt;code&gt;f&lt;/code&gt;. 
The reason is that the types of return values are unkown and can be of any types. 
The tricky part is that when you extract the return values of &lt;code&gt;f&lt;/code&gt; using a vector of length &lt;code&gt;k&lt;/code&gt;,
it is possible that no error or warning message is displayed. 
The first return value of &lt;code&gt;f&lt;/code&gt; is assigned to the vector or all elements of the vector
(if it is an slicing of an array).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The first function defined in a m-file is the main function 
and will be called when the m-file is called.
All subsequent functions in the m-file can only be called by the main function.
It is recommended that you named a m-file after the main function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are two types of objects in MATLAB: value object and handle object. 
A value object behaves like being passed by value 
while a handle object is passed by reference. 
By default objects (matrix, array and so on) in MATLAB are value objects. 
However, even if a value object behaves like being passed by value, 
if it is not modify inside a function when passed to the function, 
no copy will be made into the workspace of the function. 
This system is so called copy-on-write, 
which might save much memory if the matrices or arrays passed are huge. 
The famous statistical software R will always make a copy of a argument 
if it is passed by value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MATLAB does not check the passing of parameters to functions. 
Whether the parameters passed to a function are illegal can only be decide at run time, 
which is the way that most interpret language use.
If your code takes lots of time to be run (e.g. a big simulation),
you'd better first downgrade the complexity of the problem and run a test code, 
otherwise you might find that there is in your code after you have run your code for a long time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By default, 
variables appear in a user-defined function 
and variables in the workspace are local variable, 
which means that you cannot use variables from the workspace in a user-defined function
nor can you use variables from a user-defined function in the workspace. 
To make a variable global, 
you can use command &lt;code&gt;global&lt;/code&gt;, e.g. to make variable &lt;code&gt;x&lt;/code&gt; global you can use &lt;code&gt;global x;&lt;/code&gt;. 
If a variable is global, 
you can use it everywhere if you have made the necessary declaration 
(e.g. you have to declare that a variable is global in a user-defined function, 
if you want to use it as global.), 
and its value will be the same everywhere 
(This is because no matter where you use it, 
it points to the same place in the memory).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To run a bunch of code, you can put the code into a M file or you can define a function. 
Sometimes, 
there are a few of small pieces of code that you use a lot 
but they are too short and will be used only in a single work 
that you hesitate to write them into M files or to write them as functions. 
What you can do is to define them as inline functions or function handles. 
Inline functions work only for very simple functions. 
Every symbol appear in a inline function string is treated as a variable, 
so you cannot pass data into a inline function except for constants. 
Function handle is more flexible way to deal with this situation. 
You can use any object in the workspace in a function handle. 
What's more, a function handle cannot be changed after it is defined. 
For example, if a function handle uses an object in the workspace, 
it remains the same even if you change the object or remove it from the workspace, 
which is usually what we expect. 
So generally speaking function handles are more flexible 
and useful than inline functions, 
but surely it is slower than inline functions. 
Function handles are usually used to wrap existing functions for convenient use. 
For example, 
in statistics data is usually passed to a likelihood function as a parameter 
because global variable is generally not a good idea. 
When you optimize a likelihood function, 
you do not want to optimize over the data parameter. 
To handle this situation, please refer to section &lt;code&gt;optimization&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;eval&lt;/code&gt; evaluate string containing MATLAB expressions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The passing of a function as an argument of another function 
is achieved through function handle in MATLAB. 
To get the function handle of an existing function (not a function handle), 
you can simply add a prefix &lt;code&gt;@&lt;/code&gt; to it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="tips"></category><category term="skills"></category><category term="programming"></category><category term="MATLAB"></category></entry><entry><title>Rcpp Rocks</title><link href="http://www.legendu.net/en/blog/rcpp-rocks/" rel="alternate"></link><published>2014-08-16T19:26:30-07:00</published><updated>2014-08-16T19:26:30-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2014-08-16:/en/blog/rcpp-rocks/</id><summary type="html">&lt;p&gt;Please see &lt;a href="https://bitbucket.org/dclong/r-learn/src/"&gt;here&lt;/a&gt; 
for some simple examples for learning Rcpp and related packages.&lt;/p&gt;
&lt;h2 id="tips"&gt;Tips&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Though you can overload functions in a Rcpp module,
it causes problems when you export these overloaded functions.
This is because currently Rcpp cannot distinguish them when exporting them.
It is suggested that you do not …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Please see &lt;a href="https://bitbucket.org/dclong/r-learn/src/"&gt;here&lt;/a&gt; 
for some simple examples for learning Rcpp and related packages.&lt;/p&gt;
&lt;h2 id="tips"&gt;Tips&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Though you can overload functions in a Rcpp module,
it causes problems when you export these overloaded functions.
This is because currently Rcpp cannot distinguish them when exporting them.
It is suggested that you do not overload functions that are to be exported.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;Module&lt;/code&gt; function in the "Rcpp" package 
might fail to load modules even if the C++ code is compiled successfully.
If this happens, 
you can try the option &lt;code&gt;mustStart = TRUE&lt;/code&gt;.
It is suggested that you always use this option when you use the &lt;code&gt;Module&lt;/code&gt; function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do not import the namespace &lt;code&gt;std&lt;/code&gt; when using Rcpp. 
This causes name conflicts. 
It is also suggested that 
you always prefix functions with their namespace (even for Rcpp functions),
otherwise it is very error-prone.
For example, 
if you want to use the &lt;code&gt;std::abs&lt;/code&gt; function 
but you forget the namespace (&lt;code&gt;std::&lt;/code&gt;) prefix, 
the &lt;code&gt;Rcpp::abs&lt;/code&gt; will be used instead. 
Your code will probably compile without any error message,
but the results won't be right. 
This kind of bug is very trick.
You'd better avoid it at the first place.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The following operations might cause segmentation fault and 
thus forces R to quit.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Calling&lt;/span&gt; &lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;functions&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;wrong&lt;/span&gt; &lt;span class="nb"&gt;number&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="k"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Unhandled&lt;/span&gt; &lt;span class="n"&gt;exceptions&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.,&lt;/span&gt; &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Use&lt;/span&gt; &lt;span class="n"&gt;Rcpp&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;previous&lt;/span&gt; &lt;span class="n"&gt;save&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="n"&gt;workspace&lt;/span&gt; &lt;span class="k"&gt;without&lt;/span&gt; &lt;span class="n"&gt;compiling&lt;/span&gt; &lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;again&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These operations are very dangerous, 
because you lose unsaved data in the R workspace when R is forced to quit. 
So you have to be very careful when you use C++ functions. 
It is recommended that you handle exceptions in C++ code. 
If you do not know how to handle exceptions in C++ code,
a safer way but a little tedious way is to always call C++ functions using the &lt;code&gt;try&lt;/code&gt; function in R.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;In C++, 
methods for accessing elements of containers usually have both bound-checking 
and no-bound-checking versions. 
You should be aware that the no-bound-checking versions are more dangerous,
because your code might continue to run without any warning message after things to wrong.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Passing data between R and C++ is made easy. 
You can pass vectors, matrices and lists 
between R and C++ directly with the help of Rcpp. 
Rcpp takes care of the data converting automatically.
When you use the "RcppArmadillo" package, 
the converting between R objects and "Armadillo" matrices is also done automatically.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A list in R (and thus in Rcpp) is essentially a generic vector. 
You must know the structure of the list in order to work on it in Rcpp.
Each element of a &lt;code&gt;List&lt;/code&gt; in Rcpp is of type &lt;code&gt;SEXP&lt;/code&gt;. 
You have to first convert it to an Rcpp object 
and then work on it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use reference of List in Rcpp, 
but a const reference of List is not allowed. 
Also though you can make a const reference of elements of a List,
I think it is misleading. 
Because a cast is usually need, 
I think a copy is often made. 
It is always good practice to transform a List object 
to a more type-strict data structure in C++ before you operate on it. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A vector in Rcpp can have names and you access an element by its name. 
However, 
different from R, 
error happens if you access element using a non-existing name. 
To avoid this, 
you can first use the &lt;code&gt;containsElementNamed&lt;/code&gt; method 
of the Vector class to query whether an element 
with a specified name exists. 
Note that the &lt;code&gt;containsElementNamed&lt;/code&gt; method accepts &lt;code&gt;const char *&lt;/code&gt; as argument
not &lt;code&gt;std::string&lt;/code&gt;. 
However, 
you can use the &lt;code&gt;c_str&lt;/code&gt; method to convert std::string to &lt;code&gt;const char *&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There is no data structure in R corresponding to &lt;code&gt;std::set&lt;/code&gt; in C++. 
So when you &lt;code&gt;wrap&lt;/code&gt; a set to an R object, 
it becomes an array/vector in R.
If you want to convert, 
say, 
a vector in R to a &lt;code&gt;std::set&lt;/code&gt; in C++,
you have to first convert the vector in R 
to &lt;code&gt;std::vector&lt;/code&gt; or &lt;code&gt;Rcpp::NumericVector&lt;/code&gt; 
and then insert the vector into the set.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is not convenient to get and operate on the names of a vector in Rcpp,
but you can pass the names of a vector/list to Rcpp as a vector from R. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use access R functions (in installed packages) easily in C++ code via Rcpp.
However, 
Rcpp is for extending R via C++, 
i.e., you have to come back to R. 
Trying to compile C++ code using Rcpp to and run binary code usually cause segmentation fault. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can pass R functions (including user-defined functions) to Rcpp as Function objects, 
which is really convenient. 
The following is a silly illustration example. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;Function f(fun);&lt;/span&gt;
&lt;span class="nv"&gt;SEXP&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;as&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;;int&amp;amp;gt;(x);&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;wrap&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;;&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;rwrap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;cxxfunction&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;signature&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;function&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;,&lt;span class="nv"&gt;code&lt;/span&gt;,&lt;span class="nv"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Rcpp&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++11 support is still experimental in most C++ compilers. 
To enable the support of C++11 in g++, you can add the option &lt;code&gt;-std=c++0x&lt;/code&gt; 
or &lt;code&gt;-std=c++11&lt;/code&gt; (depending on the version of the compiler). 
In Rcpp, support of C++11 can be done throught the &lt;code&gt;settings&lt;/code&gt; option 
of the &lt;code&gt;cxxfunction&lt;/code&gt;. The following is an illustration example.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;std::vector&amp;amp;lt;int&amp;amp;gt; v{1,2,3};&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;wrap&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;;&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;getPlugin&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Rcpp&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;settings&lt;/span&gt;&lt;span class="mh"&gt;$e&lt;/span&gt;&lt;span class="nv"&gt;nv&lt;/span&gt;$&lt;span class="nv"&gt;PKG_CXXFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;paste&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;-std=c++0x &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;,&lt;span class="nv"&gt;settings&lt;/span&gt;&lt;span class="mh"&gt;$e&lt;/span&gt;&lt;span class="nv"&gt;nv&lt;/span&gt;$&lt;span class="nv"&gt;PKG_CXXFLAGS&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;fcpp11&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;cxxfunction&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;code&lt;/span&gt;,&lt;span class="nv"&gt;includes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;#include &amp;amp;lt;vector&amp;amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;,&lt;span class="nv"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;settings&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To link libraries, 
you have to add options to the &lt;code&gt;settings&lt;/code&gt; argument of &lt;code&gt;cxxfunction&lt;/code&gt;.
The following is an example of linking the GSL library. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;as&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;;int&amp;amp;gt;(r_n));&lt;/span&gt;
&lt;span class="nv"&gt;double&lt;/span&gt; &lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;as&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;;double&amp;amp;gt;(r_p));&lt;/span&gt;
&lt;span class="nv"&gt;std&lt;/span&gt;::&lt;span class="nv"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;;double&amp;amp;gt; x(n);&lt;/span&gt;
&lt;span class="nv"&gt;ralpha_wrapper&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt;.&lt;span class="nv"&gt;begin&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;, &lt;span class="nv"&gt;x&lt;/span&gt;.&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;, &lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;wrap&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;includes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;readText&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;beta.cpp&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;getPlugin&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Rcpp&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;settings&lt;/span&gt;&lt;span class="mh"&gt;$e&lt;/span&gt;&lt;span class="nv"&gt;nv&lt;/span&gt;$&lt;span class="nv"&gt;PKG_LIBS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;paste&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;-lgsl -lgslcblas &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;settings&lt;/span&gt;&lt;span class="mh"&gt;$e&lt;/span&gt;&lt;span class="nv"&gt;nv&lt;/span&gt;$&lt;span class="nv"&gt;PKG_LIBS&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;settings&lt;/span&gt;&lt;span class="mh"&gt;$e&lt;/span&gt;&lt;span class="nv"&gt;nv&lt;/span&gt;$&lt;span class="nv"&gt;PKG_CXXFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;paste&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;-std=c++0x &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;,&lt;span class="nv"&gt;settings&lt;/span&gt;&lt;span class="mh"&gt;$e&lt;/span&gt;&lt;span class="nv"&gt;nv&lt;/span&gt;$&lt;span class="nv"&gt;PKG_CXXFLAGS&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;ralpha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;cxxfunction&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;signature&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;r_n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;integer&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;, &lt;span class="nv"&gt;r_p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;double&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;, 
                &lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;code&lt;/span&gt;, &lt;span class="nv"&gt;includes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;includes&lt;/span&gt;, &lt;span class="nv"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;settings&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="traps"&gt;Traps&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Missing namespace prefix when calling functions that present in different namespaces.
For example,
if you want to use &lt;code&gt;std::abs&lt;/code&gt; but forget the namespace prefix (&lt;code&gt;std::&lt;/code&gt;),
the function &lt;code&gt;Rcpp::abs&lt;/code&gt; will be used.
This is a very tricky bug.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Forget to synchronize the state of random number generators 
used in Rcpp with the one used in R. 
In this situation, 
random number generating functions in Rcpp always generate the same number. 
If you use random number generating functions in Rcpp but always get the same result, 
it's probably that you forget to synchronize the state of random number generators.
A simple way to synchronize the state of random number generators in Rcpp is to 
define a object of &lt;code&gt;RNGScope&lt;/code&gt; before you call random number generating functions.
For example,
you can put the statement &lt;code&gt;RNGScope scope;&lt;/code&gt; in the function/block that you have to call 
random number generating functions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="C++"></category><category term="list"></category><category term="programming"></category><category term="HPC"></category><category term="Rcpp"></category><category term="R"></category><category term="RcppArmadillo"></category><category term="Armadillo"></category><category term="rock"></category></entry><entry><title>Parallel Computing in MATLAB</title><link href="http://www.legendu.net/en/blog/parallel-computing-in-MATLAB/" rel="alternate"></link><published>2014-06-19T19:45:42-07:00</published><updated>2014-06-19T19:45:42-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2014-06-19:/en/blog/parallel-computing-in-MATLAB/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;It is very easy to do parallel computing in MATLAB. 
Usually what you have to do is to change &lt;code&gt;for&lt;/code&gt; to &lt;code&gt;parfor&lt;/code&gt; 
for the loop that you want to run in parallel. 
The parallel code can also be run on a single thread and you will not lose much efficiency …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;It is very easy to do parallel computing in MATLAB. 
Usually what you have to do is to change &lt;code&gt;for&lt;/code&gt; to &lt;code&gt;parfor&lt;/code&gt; 
for the loop that you want to run in parallel. 
The parallel code can also be run on a single thread and you will not lose much efficiency, 
so you are always encouraged to write parallel code in MATLAB. 
However, to benefit from parallel computing, 
you must open pool of MATLAB sessions first either manually or automatically in your code. 
To open a pool of 4 MATLAB sessions manually, 
you can use the following code&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% before R2013b&lt;/span&gt;
&lt;span class="n"&gt;matlabpool&lt;/span&gt; &lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;local&amp;#39;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="c"&gt;% from R2013b&lt;/span&gt;
&lt;span class="n"&gt;parpool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;local&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To close a pool of MATLAB sessions manually, 
you can use&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;matlabpool&lt;/span&gt; &lt;span class="k"&gt;close&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you want to make your MATLAB parallel code portable, 
you'd better open the pool of MATLAB sessions manually 
instead of open it automatically in your code, 
because different computers have different number of cores.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Though parallel computing in MATLAB is easy, 
it is hard to fix problems if there is any. 
Here is some strategies that you can use 
to avoid problems in parallel computing in MATLAB. 
If a reduced variable does not work well, 
you can use a sliced variable instead, 
and it is more efficient, generally speaking.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MATLAB complains if your code is not written appropriately. 
To avoid variable problems in parallel computing in MATLAB, 
you can use the following strategies.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make a full copy of the array you want to use into each thread.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use a sliced array instead of sum variables.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="HPC"></category><category term="parallel"></category><category term="concurrency"></category><category term="programming"></category><category term="MATLAB"></category></entry><entry><title>Automated Phone Bill Using Ruby Program</title><link href="http://www.legendu.net/en/blog/automated-verizon-bill-using-ruby/" rel="alternate"></link><published>2014-06-18T08:17:18-07:00</published><updated>2014-06-18T08:17:18-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2014-06-18:/en/blog/automated-verizon-bill-using-ruby/</id><summary type="html">&lt;p&gt;I have decided to try different programming languages. 
I learn Python a month ago. 
I would like to say that Python is great scripting language. 
The only thing I do not like so far is inconsistent about methods and functions.
It is annoying to remember whether a call should be …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have decided to try different programming languages. 
I learn Python a month ago. 
I would like to say that Python is great scripting language. 
The only thing I do not like so far is inconsistent about methods and functions.
It is annoying to remember whether a call should be made by method or by function. 
I started learning Ruby a few weeks ago.
I have to say that the syntax of Rudy looks weird to me at first,
and I even doubted whether it is worth my effort to learn this language since I already 
know how to program in Python. 
But I have long heard about cool stuff such as Ruby on Rails, Cucumber and so on. 
So I finally convinced myself to continue on studying Ruby. 
As I mentioned in another post, the best way to learn a language is to use it.
I have been thinking about writing a program to parse the statement (in pdf) of 
my Verizon family plan, calculating bill for each member and send email to notify
the bill each of them has to pay automatically. 
I had a R script which can do the calculation part provided that I type some
information manually. 
I decided to make my job as the primary user of the family plan easier.
I am happy that I left this coding job to Ruby for practise. 
&lt;a href="https://github.com/dclong/Ruby-Verizon"&gt;My code&lt;/a&gt; is on GitHub.
If the code does not run, 
you have to install a few ruby packages in order to use it. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="n"&gt;actionmailer&lt;/span&gt; &lt;span class="n"&gt;highline&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The code only works for current Verizon family plan statement. 
I wish Verizon not to change the format of the family plan statement so that
this program can be used by people like me for a long time, otherwise I have to
make this program more robust to support statement in other format as well.&lt;/p&gt;</content><category term="Python"></category><category term="programming"></category><category term="Verizon"></category><category term="Ruby"></category><category term="email"></category><category term="phone"></category></entry><entry><title>Tips for C++ Compilers</title><link href="http://www.legendu.net/en/blog/tips-gcc-compiler/" rel="alternate"></link><published>2014-03-07T11:33:07-08:00</published><updated>2014-03-07T11:33:07-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2014-03-07:/en/blog/tips-gcc-compiler/</id><summary type="html">&lt;h2 id="gcc"&gt;GCC&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;User option &lt;code&gt;-lpthread&lt;/code&gt; to link the thread library when your code use the thread library. 
If you do not use, the option &lt;code&gt;-lpthread&lt;/code&gt;, you can probably compile your coe without any 
error or warning, but you will probably get the following error when you run the code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;terminate&lt;/span&gt; &lt;span class="k"&gt;called …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h2 id="gcc"&gt;GCC&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;User option &lt;code&gt;-lpthread&lt;/code&gt; to link the thread library when your code use the thread library. 
If you do not use, the option &lt;code&gt;-lpthread&lt;/code&gt;, you can probably compile your coe without any 
error or warning, but you will probably get the following error when you run the code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;terminate&lt;/span&gt; &lt;span class="k"&gt;called&lt;/span&gt; &lt;span class="k"&gt;after&lt;/span&gt; &lt;span class="n"&gt;throwing&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;std::system_error&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;what&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  &lt;span class="k"&gt;Operation&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="n"&gt;permitted&lt;/span&gt;
  &lt;span class="n"&gt;Aborted&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;User option &lt;code&gt;-std=c++0x&lt;/code&gt; to compile C++11 code. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some thumb rules for compiler optimization:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;when you need to debug, use the option &lt;code&gt;-O0&lt;/code&gt; 
(and the option &lt;code&gt;-g&lt;/code&gt; to generate debugging symbols.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;when you are preparing to ship it, 
use the option &lt;code&gt;-O2&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;when you really care about performance (e.g., for use on Gentoo), 
use the option &lt;code&gt;-O3&lt;/code&gt;. 
However, this is not always safe. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;when you need to put it on an embedded system, use &lt;code&gt;-Os&lt;/code&gt; 
(optimize for size, not for efficiency.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use to &lt;code&gt;-D&lt;/code&gt; to predefine macros&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="clang"&gt;Clang&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;use libc++ instead libstdc++&lt;/li&gt;
&lt;/ol&gt;</content><category term="C++"></category><category term="programming"></category><category term="GCC"></category><category term="thread"></category><category term="compiler"></category><category term="link"></category></entry><entry><title>General Tips for R</title><link href="http://www.legendu.net/en/blog/general-tips-for-r/" rel="alternate"></link><published>2013-12-05T00:29:52-08:00</published><updated>2013-12-05T00:29:52-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2013-12-05:/en/blog/general-tips-for-r/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Many R functions have lots of arguments which allows you get a full
control of their behaviors, so before you ask whether there is any R
function which have a little different behavior from a R function
you know, you'd better first check the arguments of the function you
know …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Many R functions have lots of arguments which allows you get a full
control of their behaviors, so before you ask whether there is any R
function which have a little different behavior from a R function
you know, you'd better first check the arguments of the function you
know.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Many R functions are generic functions (e.g. &lt;code&gt;plot&lt;/code&gt;, &lt;code&gt;residuals&lt;/code&gt;, &lt;code&gt;coef&lt;/code&gt;, etc), 
which means that they can be
applied to different types of objects, and the behavior varies
according to the type of objects.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="tips"></category><category term="R"></category><category term="generic"></category><category term="programming"></category><category term="argument"></category></entry><entry><title>Distributions in R</title><link href="http://www.legendu.net/en/blog/distributions-in-r/" rel="alternate"></link><published>2013-12-05T00:22:23-08:00</published><updated>2013-12-05T00:22:23-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2013-12-05:/en/blog/distributions-in-r/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The definition of geometric distribution in R is not the same as the common definition. 
A random variable of geometric distribution in R starts from zero, 
i.e. geometric distribution in R is defined as the number of failures before we succeed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A random variable of negative binomial distribution &lt;span class="math"&gt;\(NB …&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The definition of geometric distribution in R is not the same as the common definition. 
A random variable of geometric distribution in R starts from zero, 
i.e. geometric distribution in R is defined as the number of failures before we succeed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A random variable of negative binomial distribution &lt;span class="math"&gt;\(NB(r,p)\)&lt;/span&gt; in R 
is defined as the number of failures before we succeed for &lt;code&gt;r&lt;/code&gt; times,
where &lt;code&gt;p&lt;/code&gt; is the success probability in each trial.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The definition of hyper-geometric is the same as common but be careful with the parameters!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="distribution"></category><category term="R"></category><category term="programming"></category><category term="statistics"></category></entry><entry><title>Random Number Generating in R</title><link href="http://www.legendu.net/en/blog/rng-in-r/" rel="alternate"></link><published>2013-12-05T00:21:35-08:00</published><updated>2013-12-05T00:21:35-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2013-12-05:/en/blog/rng-in-r/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Functions for sampling random numbers from distributions 
    share a same "basic" random number generator (RNG). 
    If one set a seed for the "basic" RNG in use, 
    it affects all functions for generating observations from distributions. 
    The kind of "basic" RNG can be queried and set by &lt;code&gt;RNGkind&lt;/code&gt;. 
    The default RNG …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Functions for sampling random numbers from distributions 
    share a same "basic" random number generator (RNG). 
    If one set a seed for the "basic" RNG in use, 
    it affects all functions for generating observations from distributions. 
    The kind of "basic" RNG can be queried and set by &lt;code&gt;RNGkind&lt;/code&gt;. 
    The default RNG in R is Mersenne-Twister.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When doing a big simulation, 
    some people like to split the simulation into smart parts 
    and run each part on a different machine. 
    Theorectically speaking, 
    this can cause problems, 
    because random numbers generated on different machines might not come 
    from disjoint parts of a same seed 
    (or even not a same kind of random number generator). 
    Parallel computing is an alternative to this approach.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="R"></category><category term="programming"></category><category term="RNG"></category></entry><entry><title>Alike Objects/Functions in R</title><link href="http://www.legendu.net/en/blog/alike-objects-in-r/" rel="alternate"></link><published>2013-12-05T00:19:25-08:00</published><updated>2013-12-05T00:19:25-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2013-12-05:/en/blog/alike-objects-in-r/</id><summary type="html">&lt;h2 id="matrix-vs-data-frame"&gt;Matrix VS Data Frame:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The data in a matrix must be of the same type while different columns 
in a data frame can have different types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A data frame is much bigger than a matrix with the same dimension. 
If possible, always use matrix instead of data frame to do …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h2 id="matrix-vs-data-frame"&gt;Matrix VS Data Frame:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The data in a matrix must be of the same type while different columns 
in a data frame can have different types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A data frame is much bigger than a matrix with the same dimension. 
If possible, always use matrix instead of data frame to do computation.
Especially, 
when you creating arrays using the function &lt;code&gt;array&lt;/code&gt;,
you should avoid using a data frame as the data source 
(even if all columns of the data frame have the same type).
A way to work around this is to first convert a data frame to a matrix 
and then use the matrix as the data source.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A data frame has names for rows and columns by default while a matrix not.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="sub-vs-gsub"&gt;&lt;code&gt;sub&lt;/code&gt; VS &lt;code&gt;gsub&lt;/code&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;The function &lt;code&gt;sub&lt;/code&gt; substitute only the first occurence of the string 
that matches the given pattern 
while function &lt;code&gt;gsub&lt;/code&gt; substitute all occurences of strings that matches the given pattern.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="warning-vs-warnings"&gt;&lt;code&gt;warning&lt;/code&gt; VS &lt;code&gt;warnings&lt;/code&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;The function &lt;code&gt;warning&lt;/code&gt; shows a user-defined warning message 
while the function &lt;code&gt;warnings&lt;/code&gt; displays previously generated warning messages.&lt;/li&gt;
&lt;/ol&gt;</content><category term="programming"></category><category term="regex"></category><category term="data frame"></category><category term="matrix"></category><category term="R"></category><category term="warning"></category></entry><entry><title>Linear Algebra in MATLAB</title><link href="http://www.legendu.net/en/blog/linear-algebra-in-MATLAB/" rel="alternate"></link><published>2012-12-04T00:00:00-08:00</published><updated>2012-12-04T00:00:00-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2012-12-04:/en/blog/linear-algebra-in-MATLAB/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Unlike most other programming languages, 
to get elements of an array in MATLAB, 
you have to parentheses to specify index. 
See more information in &lt;a href="http://dclong.github.io/en/2012/05/containers-summary-in-popular-languages/"&gt;this post&lt;/a&gt;.
If you want to get or set elements of a cell in MATLAB, 
you have to use curly braces. 
If you use parentheses to …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Unlike most other programming languages, 
to get elements of an array in MATLAB, 
you have to parentheses to specify index. 
See more information in &lt;a href="http://dclong.github.io/en/2012/05/containers-summary-in-popular-languages/"&gt;this post&lt;/a&gt;.
If you want to get or set elements of a cell in MATLAB, 
you have to use curly braces. 
If you use parentheses to extract elements of a cell,
the result will still be a cell.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;vrrotmat2vec&lt;/code&gt; converts a rotation matrix to its axis-angle representation. 
Conversely, 
&lt;code&gt;vrrotvec2mat&lt;/code&gt; converts an axis-angle
(the axis do not have to be a unit one, as long as it is not a zero vector) 
representation of a rotation matrix to a matrix form.
There are also many other representations of a rotation matrix, 
e.g. Euler angle representation and quaternion representation.
&lt;code&gt;dcm2angle&lt;/code&gt; and &lt;code&gt;angle2dcm&lt;/code&gt; converts between a rotation matrix and its Euler angle representation; 
&lt;code&gt;quat2dcm&lt;/code&gt; and &lt;code&gt;dcm2quat&lt;/code&gt; converts between a rotation matrix and its quaternion representation;
&lt;code&gt;quat2angle&lt;/code&gt; and &lt;code&gt;angle2quat&lt;/code&gt; converts between the Euler angle representation 
and quaternion representation of a rotation matrix.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use &lt;code&gt;all&lt;/code&gt; to check whether the elements of a vector 
(either a column vector or a row vector) are all &lt;code&gt;true&lt;/code&gt; (or non-zero values). 
How ever if you apply &lt;code&gt;all&lt;/code&gt; on an matrix or a multi-dimensional array, 
you will get vectors or arrays of boolean values depending on the dimension you specified. 
To check whether all elements of a matrix or multi-dimensional array are &lt;code&gt;true&lt;/code&gt; 
(or non-zero values), 
you have use &lt;code&gt;all&lt;/code&gt; more than once. 
For example, 
if &lt;code&gt;bmat&lt;/code&gt; is a boolean matrix in MATLAB, 
you can use &lt;code&gt;all(all(bmat))&lt;/code&gt; to check whether all elements of &lt;code&gt;bmat&lt;/code&gt; are &lt;code&gt;true&lt;/code&gt;. 
&lt;code&gt;any&lt;/code&gt; works similarly to &lt;code&gt;all&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use &lt;code&gt;size&lt;/code&gt; to get the dimensions of an array. 
You can specify more output variables than necessary for &lt;code&gt;size&lt;/code&gt;, 
and these redundant variables will have value &lt;code&gt;1&lt;/code&gt;. 
If you specify less output variables than the dimension of the array, 
then the last output variable is the product of these left dimensions. 
To get the &lt;span class="math"&gt;\(k^&lt;code&gt;th&lt;/code&gt;\)&lt;/span&gt; dimension of an array &lt;code&gt;a&lt;/code&gt;, 
you can simply use &lt;code&gt;size(a,k)&lt;/code&gt;. 
If you are just interested in the first two dimensions of a multi-dimensional array &lt;code&gt;a&lt;/code&gt;, 
then you can use &lt;span class="math"&gt;\([n_1, n_2, \sim]\)&lt;/span&gt; to extract the first two dimensions, 
where &lt;span class="math"&gt;\(\sim\)&lt;/span&gt; means that the left dimensions will be ignored.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To get the largest dimension of an array, 
you can use &lt;code&gt;length&lt;/code&gt;, 
which is different from R that uses &lt;code&gt;length&lt;/code&gt; to get the total number of elements in an array or list. 
To get the total number of elements of an array in MATLAB, you have to use &lt;code&gt;numel&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;arrayfun&lt;/code&gt; applies a given function to each element of an array,
which is similar to &lt;code&gt;apply&lt;/code&gt; in R. 
&lt;code&gt;arrayfun&lt;/code&gt; in MATLAB is not as convenient as &lt;code&gt;apply&lt;/code&gt; in R 
which can also apply a function to marginals of an arrays instead of only elements of the array,
however there are some functions (mostly statistical summary functions) 
in MATLAB that allows you to work on specified marginals of an array, 
e.g. &lt;code&gt;size&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;mean&lt;/code&gt; and so on. 
Use these functions can avoid inconvenient loops in MATLAB. 
Sometimes, 
you might want to pass extra parameters to the function 
that is to be applied to each element of an array. 
&lt;To do this, please refer to ...&gt;
Similar to &lt;code&gt;arrayfun&lt;/code&gt;, &lt;code&gt;cellfun&lt;/code&gt; applies a given function to each element in a cell array. 
From my experience, &lt;code&gt;cellfun&lt;/code&gt; has advantage when its elements have different sizes (or even types), 
which make coding simpler. 
It does not seem to speed up the code compared to loops. 
There is also another &lt;code&gt;spfun&lt;/code&gt; which applies a given function to non-zero elements of a sparse matrix.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In &lt;code&gt;R&lt;/code&gt; a vectors is very flexible, 
and it can be a row vector or a column vector depends on different situations.
A vector in R is different from a matrix.
In MATLAB a vector is a matrix (either $1\times n)' or $n\times1)') 
and thus there are both column vectors and row vectors in MATLAB.
Function and operations usually behave differently on row vector and column vector in MATLAB. 
Since a vector in MATLAB is essentially a matrix, operations on vectors must
be compatible matrix operations. Since in Mathematics vectors are
column vectors by default, you'd better use column vectors in MATLAB
if both row and column vectors are OK.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use &lt;code&gt;isempty&lt;/code&gt; to check whether an array is empty in MATLAB, &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;null&lt;/code&gt; calculates the null space of a matrix.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;repmat&lt;/code&gt; replicates and tile array.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;eigs&lt;/code&gt; is frequently used to find the eigenvalues of sparse square
matrices. Because a sparse square matrix usually has a very large
dimension, it has a large amount (the same as its dimension) of
eigenvalues. Usually only a few of them are interesting. To
calculate the $k)' large eigenvalue of a sparse matrix &lt;code&gt;spm&lt;/code&gt;, you
can use &lt;code&gt;eigs(spm,k)&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="algebra"></category><category term="programming"></category><category term="MATLAB"></category></entry><entry><title>Numerical Analysis in MATLAB</title><link href="http://www.legendu.net/en/blog/numerical-analysis-in-MATLAB/" rel="alternate"></link><published>2012-12-04T00:00:00-08:00</published><updated>2012-12-04T00:00:00-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2012-12-04:/en/blog/numerical-analysis-in-MATLAB/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;fmincon&lt;/code&gt; finds minimum of constrained nonlinear multivariate function.
&lt;code&gt;fminunc&lt;/code&gt; finds minimum of unconstrained nonlinear multivariate function.
&lt;code&gt;fgoalattain&lt;/code&gt; solves multiobjective goal attainment problems; 
&lt;code&gt;fminimax&lt;/code&gt; solves minimax constraint problems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you use one of these functions mentioned above to do optimizations, 
you might want to pass extra parameters to the objective function …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;fmincon&lt;/code&gt; finds minimum of constrained nonlinear multivariate function.
&lt;code&gt;fminunc&lt;/code&gt; finds minimum of unconstrained nonlinear multivariate function.
&lt;code&gt;fgoalattain&lt;/code&gt; solves multiobjective goal attainment problems; 
&lt;code&gt;fminimax&lt;/code&gt; solves minimax constraint problems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you use one of these functions mentioned above to do optimizations, 
you might want to pass extra parameters to the objective function. 
You can do this directly in R, 
however, 
you have to this indirectly in MATLAB. 
To pass extra parameters to the objective function, 
there are 3 different ways: anonymous function, nested function and global variable. 
I think anonymous function is the best an most nature way to do it. 
Suppose you have defined an objective function &lt;code&gt;myObjFun(x,a,b,c)&lt;/code&gt;, 
and you want to do optimization for given &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;. 
You can first specify values for &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;, 
define a function handle &lt;code&gt;f=@(x)myObjFun(x,a,b,c)&lt;/code&gt;, 
and then optimize function handle &lt;code&gt;f&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;quadl&lt;/code&gt; can be used to numerically calculate integrals. 
To calculate integrals symbolically, 
you can use &lt;code&gt;int&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="programming"></category><category term="MATLAB"></category></entry><entry><title>Error when Launching MATLAB in Linux</title><link href="http://www.legendu.net/en/blog/problem-when-launching-MATLAB/" rel="alternate"></link><published>2012-12-04T00:00:00-08:00</published><updated>2012-12-04T00:00:00-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2012-12-04:/en/blog/problem-when-launching-MATLAB/</id><summary type="html">&lt;p&gt;See &lt;a href="http://www.mathworks.com/support/solutions/en/data/1-F68FSA/index.html?solution=1-F68FSA"&gt;here&lt;/a&gt;
for more information.&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a href="http://www.mathworks.com/support/solutions/en/data/1-F68FSA/index.html?solution=1-F68FSA"&gt;here&lt;/a&gt;
for more information.&lt;/p&gt;</content><category term="Linux"></category><category term="programming"></category><category term="MATLAB"></category></entry><entry><title>Sending Email in MATLAB</title><link href="http://www.legendu.net/en/blog/send-email-in-MATLAB/" rel="alternate"></link><published>2012-12-04T00:00:00-08:00</published><updated>2012-12-04T00:00:00-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2012-12-04:/en/blog/send-email-in-MATLAB/</id><summary type="html">&lt;p&gt;It is very easy to send emails in MATLAB. 
To do this, you can just call &lt;code&gt;sendmail&lt;/code&gt;. 
However, 
usually you need to set preference for sending emails using &lt;code&gt;setpref&lt;/code&gt; first. 
Here is one example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;%%&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nv"&gt;Define&lt;/span&gt; &lt;span class="nv"&gt;these&lt;/span&gt; &lt;span class="nv"&gt;variables&lt;/span&gt; &lt;span class="nv"&gt;appropriately&lt;/span&gt;:
&lt;span class="nv"&gt;mail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;username@gmail.com&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="c1"&gt;; %Your GMail email address&lt;/span&gt;
&lt;span class="nv"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;password&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="c1"&gt;; %Your GMail …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;It is very easy to send emails in MATLAB. 
To do this, you can just call &lt;code&gt;sendmail&lt;/code&gt;. 
However, 
usually you need to set preference for sending emails using &lt;code&gt;setpref&lt;/code&gt; first. 
Here is one example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;%%&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nv"&gt;Define&lt;/span&gt; &lt;span class="nv"&gt;these&lt;/span&gt; &lt;span class="nv"&gt;variables&lt;/span&gt; &lt;span class="nv"&gt;appropriately&lt;/span&gt;:
&lt;span class="nv"&gt;mail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;username@gmail.com&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="c1"&gt;; %Your GMail email address&lt;/span&gt;
&lt;span class="nv"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;password&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="c1"&gt;; %Your GMail password&lt;/span&gt;
&lt;span class="o"&gt;%%&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;Then&lt;/span&gt; &lt;span class="nv"&gt;this&lt;/span&gt; &lt;span class="nv"&gt;code&lt;/span&gt; &lt;span class="nv"&gt;will&lt;/span&gt; &lt;span class="nv"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;up&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;preferences&lt;/span&gt; &lt;span class="nv"&gt;properly&lt;/span&gt;:
&lt;span class="nv"&gt;setpref&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;Internet&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;,&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;E_mail&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;,&lt;span class="nv"&gt;mail&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;setpref&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;Internet&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;,&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;SMTP_Server&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;,&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;smtp.gmail.com&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;setpref&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;Internet&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;,&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;SMTP_Username&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;,&lt;span class="nv"&gt;mail&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;setpref&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;Internet&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;,&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;SMTP_Password&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;,&lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;java&lt;/span&gt;.&lt;span class="nv"&gt;lang&lt;/span&gt;.&lt;span class="nv"&gt;System&lt;/span&gt;.&lt;span class="nv"&gt;getProperties&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;props&lt;/span&gt;.&lt;span class="nv"&gt;setProperty&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;mail.smtp.auth&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;,&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;props&lt;/span&gt;.&lt;span class="nv"&gt;setProperty&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;mail.smtp.socketFactory.class&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;javax.net.ssl.SSLSocketFactory&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;props&lt;/span&gt;.&lt;span class="nv"&gt;setProperty&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;mail.smtp.socketFactory.port&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;,&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;465&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;%%&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;Send&lt;/span&gt; &lt;span class="nv"&gt;email&lt;/span&gt;. &lt;span class="nv"&gt;The&lt;/span&gt; &lt;span class="nv"&gt;first&lt;/span&gt; &lt;span class="nv"&gt;argument&lt;/span&gt; &lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;recipient&lt;/span&gt;.
&lt;span class="nv"&gt;sendmail&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;receiver@gmail.com&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;,&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;Test from MATLAB&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;,&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;Hello! This is a test from MATLAB!&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="MATLAB"></category><category term="programming"></category><category term="email"></category></entry><entry><title>Special Functions in MATLAB</title><link href="http://www.legendu.net/en/blog/special-functions-in-MATLAB/" rel="alternate"></link><published>2012-12-04T00:00:00-08:00</published><updated>2012-12-04T00:00:00-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2012-12-04:/en/blog/special-functions-in-MATLAB/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sin&lt;/code&gt; calculates sine of arguments in radian 
while &lt;code&gt;sind&lt;/code&gt; calculates sine of arguments in degrees; 
&lt;code&gt;asin&lt;/code&gt; calculates inverse of sine resulting in radian 
while &lt;code&gt;asind&lt;/code&gt; calculates inverse of sine resulting in degrees. 
Other triangular functions behave similarly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The modified Bessel function of the first kind &lt;code&gt;$I_n(x)$&lt;/code&gt; 
is implemented as …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sin&lt;/code&gt; calculates sine of arguments in radian 
while &lt;code&gt;sind&lt;/code&gt; calculates sine of arguments in degrees; 
&lt;code&gt;asin&lt;/code&gt; calculates inverse of sine resulting in radian 
while &lt;code&gt;asind&lt;/code&gt; calculates inverse of sine resulting in degrees. 
Other triangular functions behave similarly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The modified Bessel function of the first kind &lt;code&gt;$I_n(x)$&lt;/code&gt; 
is implemented as &lt;code&gt;besseli&lt;/code&gt; in MATLAB. 
Notice that for large value &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;$I_n(x)$&lt;/code&gt; is huge, 
so it is better to use scaled Bessel function for large &lt;code&gt;x&lt;/code&gt;. 
To do this, you just need specify an extra argument for &lt;code&gt;besseli&lt;/code&gt;. 
Notice that other kind of Bessel functions are also implemented in MATLAB.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Incomplete Beta function is implemented as &lt;code&gt;betainc&lt;/code&gt; 
and incomplete Gamma function is implemented as &lt;code&gt;gammainc&lt;/code&gt; in MATLAB.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The logarithm of Gamma function is implemented as &lt;code&gt;gammaln&lt;/code&gt; 
and the logarithm of Beta function is implemented as &lt;code&gt;betaln&lt;/code&gt; in MATLAB.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cart2sph, cart2pol, pol2crt, sph2cart, hsv2rgb&lt;/code&gt; and &lt;code&gt;rgb2hsv&lt;/code&gt; can
transform coordinates between different coordinate systems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;mfun&lt;/code&gt; can help evaluate special mathematica functions numerically,
but you should be aware of the fact that the result return by
calling &lt;code&gt;mfun&lt;/code&gt; is not as accurate as invoking these special function
directly in MATLAB, especially when a function is near its root and
its arguments are relatively large. Also &lt;code&gt;mfunlist&lt;/code&gt; can list special
functions for use with &lt;code&gt;mfun&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="function"></category><category term="programming"></category><category term="MATLAB"></category></entry><entry><title>MATLAB for Statisticians</title><link href="http://www.legendu.net/en/blog/statistics-in-MATLAB/" rel="alternate"></link><published>2012-12-04T00:00:00-08:00</published><updated>2012-12-04T00:00:00-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2012-12-04:/en/blog/statistics-in-MATLAB/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;There are generally two ways to generate uniform and normal random numbers in MATLAB. 
One ways is to use [functions] &lt;code&gt;randn&lt;/code&gt; (for standard normal distribution) 
and &lt;code&gt;rand&lt;/code&gt; (for standard uniform distribution). 
The other way is to use [functions] &lt;code&gt;unirnd&lt;/code&gt; and &lt;code&gt;normrnd&lt;/code&gt; 
(there are also functions end with "rnd" for generating …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;There are generally two ways to generate uniform and normal random numbers in MATLAB. 
One ways is to use [functions] &lt;code&gt;randn&lt;/code&gt; (for standard normal distribution) 
and &lt;code&gt;rand&lt;/code&gt; (for standard uniform distribution). 
The other way is to use [functions] &lt;code&gt;unirnd&lt;/code&gt; and &lt;code&gt;normrnd&lt;/code&gt; 
(there are also functions end with "rnd" for generating random numbers from other distributions). 
The difference between these two different kinds of functions is that 
the first group of functions generate only "standard" distributions 
while the second group of functions generate distribution with any parameters. 
So the group of functions end with "rnd" is recommended to use.
In old versions (2010a and earlier) of MATLAB, 
these random number generating functions end with "rnd" might cause problems 
in parallel computing. 
Then you want to use these two basic functions &lt;code&gt;rand&lt;/code&gt; and &lt;code&gt;randn&lt;/code&gt;, 
and use all kinds of technics to generate random variables you want.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;randsample&lt;/code&gt; generates a random sample 
from a given collection of data with or without replacement. 
It also support weighted sampling with replacement, 
but does not support weighted sampling without replacement. 
There is another very similar but more powerful function called &lt;code&gt;datasample&lt;/code&gt; 
which support weighted sampling (both with and without replacement). 
Note that both these two functions can generate random permutations 
which was frequently done using &lt;code&gt;randperm&lt;/code&gt; in MATLAB of older versions. 
For old versions (before 2011b) of MATLAB, 
you can use &lt;code&gt;randi&lt;/code&gt; to generate random indexes 
and extract corresponding elements of arrays.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When MATLAB starts, 
it set the random number generator to the default one 
and set the seed to be the default seed. 
So if you run a simulation, 
reboot MATLAB and run the same simulation, 
you will get the same results.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;tabular&lt;/code&gt; counts the frequency of observations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;iqr&lt;/code&gt; calculates the interquartile range of given data.
There is a similar function called &lt;code&gt;IQR&lt;/code&gt; in R.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="statistics"></category><category term="programming"></category><category term="MATLAB"></category></entry><entry><title>Java Programming Style</title><link href="http://www.legendu.net/en/blog/java-programming-style/" rel="alternate"></link><published>2012-12-03T00:00:00-08:00</published><updated>2012-12-03T00:00:00-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2012-12-03:/en/blog/java-programming-style/</id><summary type="html">&lt;h2 id="good-writing-style"&gt;Good Writing Style&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;It is recommend to always use &lt;code&gt;{}&lt;/code&gt; if even there is only one statement inside it. 
The reason is that you never know whether you are going to add more statements into it or not. 
And it will make the code more readable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Feel free to declare the …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h2 id="good-writing-style"&gt;Good Writing Style&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;It is recommend to always use &lt;code&gt;{}&lt;/code&gt; if even there is only one statement inside it. 
The reason is that you never know whether you are going to add more statements into it or not. 
And it will make the code more readable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Feel free to declare the variable in the smallest &lt;code&gt;{}&lt;/code&gt; block possible. 
The compiler will optimize this kind of code for us. 
So it is better to make the code more readable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is always good to write code similar to how you would solve the problem naturely. 
It is easy to make mistakes when we try to make the code more concise. 
Unless you can dramatically improve the performance of the code, 
do not change the code for conciseness.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avoid using a same name for a different types (instance, local and argument) of variables.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="style"></category><category term="Java"></category><category term="programming"></category></entry><entry><title>R for Numerical Analysis</title><link href="http://www.legendu.net/en/blog/r-for-numerical-analysis/" rel="alternate"></link><published>2012-11-21T00:00:00-08:00</published><updated>2012-11-21T00:00:00-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2012-11-21:/en/blog/r-for-numerical-analysis/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/r/r.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Usually when we check whether two double values equal or not, we
would check whether they're close enough or not. This is due to
possible information loss of double values stored in computer.
However, in R we can directly use &lt;code&gt;==&lt;/code&gt; to check whether two objects
(including double values) equal or …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/r/r.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Usually when we check whether two double values equal or not, we
would check whether they're close enough or not. This is due to
possible information loss of double values stored in computer.
However, in R we can directly use &lt;code&gt;==&lt;/code&gt; to check whether two objects
(including double values) equal or not. This is because for double
values, R will automatically check whether they are close or not
instead of checking whether they are equal like other languages do.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;optim&lt;/code&gt; and &lt;code&gt;optimize&lt;/code&gt; can be used to find the minimum and
maximum value of a function. By default these two functions find the
minimum value. But we can use control=list(fnscale=-1) in optim and
maximum=T in optimize to find the maximum value. Surely there are
some difference between these functions. First we give an original
value of the parameter for the function &lt;code&gt;optim&lt;/code&gt; while we give an
interval of the parameter for the function &lt;code&gt;optimize&lt;/code&gt;. Second and
also most important, the function &lt;code&gt;optimize&lt;/code&gt; can only do the
optimization over one variable while the function &lt;code&gt;optim&lt;/code&gt; can do the
optimization over multiple variables. However, when we use &lt;code&gt;optim&lt;/code&gt;
to do optimization over multiple variables, we must put these
variables into a single vector.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can use function &lt;code&gt;uniroot&lt;/code&gt; to find the roots of a given function,
and we can use function &lt;code&gt;optim&lt;/code&gt; or &lt;code&gt;optimize&lt;/code&gt; to find the maximum or
minimum value of a function.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="optimization"></category><category term="programming"></category><category term="numerical analyis"></category><category term="R"></category></entry><entry><title>R System and Configurations</title><link href="http://www.legendu.net/en/blog/r-system-and-configurations/" rel="alternate"></link><published>2012-11-21T00:00:00-08:00</published><updated>2012-11-21T00:00:00-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2012-11-21:/en/blog/r-system-and-configurations/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/r/r.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To allow opening R from a directory in R in Windows system, we can
modify the registry. More specifically, we can add a command name
(to be appear in the right-click menu) under
&lt;code&gt;HKEY_CLASSES_ROOT\Directory\Backgroup\shell&lt;/code&gt;, and then
add a subkey &lt;code&gt;command&lt;/code&gt; under it. Last, we just need to …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/r/r.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To allow opening R from a directory in R in Windows system, we can
modify the registry. More specifically, we can add a command name
(to be appear in the right-click menu) under
&lt;code&gt;HKEY_CLASSES_ROOT\Directory\Backgroup\shell&lt;/code&gt;, and then
add a subkey &lt;code&gt;command&lt;/code&gt; under it. Last, we just need to change the
default value to be the command that we want to run each time we
click the menu item.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are many ways to change configurations of R. For example, to
change the default working directory of R in Windows, you can change
the properties of the shortcut of R software, which also applies to
other softwares in Windows. Another way is to put some code which
changes the default working directory into file &lt;code&gt;Rprofile.site&lt;/code&gt; 
(The code inside this file will be run on the startup of R.).
The latter way can also be used to set other configurations for R,
and it is preferred to other ways of setting configurations for R,
because it is a universal way and is guaranteed to work (If you set configurations for R in other ways and at the same
time, set configurations in file &lt;code&gt;Rprofile.site&lt;/code&gt;, these
configurations in file &lt;code&gt;Rprofile.site&lt;/code&gt; will be in effect.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;R.Version&lt;/code&gt; can display the version information of R.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;args&lt;/code&gt; can show the arguments of functions in R.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can use function &lt;code&gt;Sys.sleep&lt;/code&gt; to suspend execution of R for given
time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By default, function &lt;code&gt;ls&lt;/code&gt; returns non-hidden objects 
(By default, &lt;code&gt;ls&lt;/code&gt; does not return objects whose names start with a
dot. For this reason I call these objects whose name start with a
dot hidden objects.) in current
environment. For example if we use &lt;code&gt;ls()&lt;/code&gt; in a function, then it
only returns these non-hidden objects defined in the function. To
get non-hidden object in the top level environment (R workspace),
you can use &lt;code&gt;ls(pos=1)&lt;/code&gt;; to get non-hidden objects in a package, we
can use &lt;code&gt;ls(pos="package:pkgname")&lt;/code&gt;. Sometimes, you might want to
see all objects including these hidden ones in an environment. To do
so, you can use the option &lt;code&gt;all.anmes=T&lt;/code&gt;. Notice that &lt;code&gt;ls&lt;/code&gt; also support
regular expression (use the option &lt;code&gt;pattern&lt;/code&gt;), which enables you to find
objects in R workspace faster.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In order to be convenient, usually we would like to specify short
names of executables. Sometimes this could lead to failure because
some functions in R do not accept short names of executables, e.g.
&lt;code&gt;shell.exec&lt;/code&gt;, which is really stupid. A good way to solve the
problem is to use function &lt;code&gt;Sys.which&lt;/code&gt; to find the full name of
executables. Conversely, function &lt;code&gt;basename&lt;/code&gt; can get the base name
of a path.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;system&lt;/code&gt; calls invokes a system command, but the command passed to
it must be an executable (extensions &lt;code&gt;.exe&lt;/code&gt; or &lt;code&gt;.com&lt;/code&gt;) or a batch
file (extensions &lt;code&gt;.cmd&lt;/code&gt; or &lt;code&gt;.bat&lt;/code&gt;). Redirection, pipes, DOS internal
commands and so on cannot be used with &lt;code&gt;system&lt;/code&gt;. &lt;code&gt;shell&lt;/code&gt; is a more
user-friendly wrapper for &lt;code&gt;system&lt;/code&gt; which is more powerful (support
redirection, pipes, DOS internal commands and so on). If you want to
make use of Windows file association, use &lt;code&gt;shell.exec&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;search&lt;/code&gt; returns search path for R, which includes loaded
packages.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;demo&lt;/code&gt; is helpful to show how to use a function or package,
however, it creates many global variables which is annoying. Using
function &lt;code&gt;example&lt;/code&gt; can solve this problem, but it seems that these
functions are not exactly the same. I'm a little confused about
these two functions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;R support partial matching on tags, which means that usually you
do not have to use full names for arguments of a R function. You can
use partial names for arguments. However, always be careful when a R
function takes &lt;code&gt;ldots&lt;/code&gt; as an argument.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;Sys.setenv&lt;/code&gt; and &lt;code&gt;Sys.unsetenv&lt;/code&gt; can set and unset
environment variables.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Sys.info&lt;/code&gt; contains information about the operating system. Variable
&lt;code&gt;.Platform&lt;/code&gt; contains information about R system 
(Actually information related to R system are usually stored in
variables starting with dot).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Sys.time&lt;/code&gt; returns the system time, i.e. the time of the computer on
which the code is run. There is another function called &lt;code&gt;system.time&lt;/code&gt;
which can calculate how much time an evaluation takes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;gc&lt;/code&gt; collect garbage. R is infamous for extensive memory using. If
you delete some big objects in R workspace, you'd better use &lt;code&gt;gc()&lt;/code&gt;
to manually trigger the garbage collection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the good us of &lt;code&gt;source&lt;/code&gt; with local = TRUE ...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;options&lt;/code&gt; allows one to get and set a variety of global options
which affect the way in which R computes and displays ints results.
For example, &lt;code&gt;options(width=40)&lt;/code&gt; forces R to format its output
results to have at most 40 characters (if possible). Notice that
this can be very helpful if you use Sweave. For example, if the
outputs of some R code in Sweave is too long, you can add a similar
command as above to format the R outputs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="R"></category><category term="configuration"></category><category term="programming"></category><category term="system"></category></entry><entry><title>Pointers in C++</title><link href="http://www.legendu.net/en/blog/pointers-in-cpp/" rel="alternate"></link><published>2012-10-21T00:00:00-07:00</published><updated>2012-10-21T00:00:00-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2012-10-21:/en/blog/pointers-in-cpp/</id><summary type="html">&lt;h2 id="pointers"&gt;Pointers&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;No pointer, no polymorphism.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C/C++ is notorious for raw pointers. 
While pointers can boost up the speed of programs, 
it invites a trillion chances for making mistakes. 
You should avoid using raw pointers, 
instead, 
consider using &lt;code&gt;unique_ptr&lt;/code&gt;, &lt;code&gt;shared_ptr&lt;/code&gt; and &lt;code&gt;weak_ptr&lt;/code&gt;.
They are almost as efficient as raw pointers …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h2 id="pointers"&gt;Pointers&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;No pointer, no polymorphism.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C/C++ is notorious for raw pointers. 
While pointers can boost up the speed of programs, 
it invites a trillion chances for making mistakes. 
You should avoid using raw pointers, 
instead, 
consider using &lt;code&gt;unique_ptr&lt;/code&gt;, &lt;code&gt;shared_ptr&lt;/code&gt; and &lt;code&gt;weak_ptr&lt;/code&gt;.
They are almost as efficient as raw pointers but much safer to use. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If &lt;code&gt;p&lt;/code&gt; is a dynamically allocated array, 
you have to use &lt;code&gt;delete[] p&lt;/code&gt; to delete it when it is no longer required. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;auto_ptr&lt;/code&gt; objects cannot be stored in STL containers, 
because they are not copy-construable or assignable.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="C++"></category><category term="programming"></category><category term="pointer"></category></entry><entry><title>Write Portable C++ Code</title><link href="http://www.legendu.net/en/blog/write-portable-cpp-code/" rel="alternate"></link><published>2012-10-21T00:00:00-07:00</published><updated>2012-10-21T00:00:00-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2012-10-21:/en/blog/write-portable-cpp-code/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Addresses on 64 and 32 OS are different, 
so you have to be careful when your program have to deal with address. 
For example, 
if you take the difference of two pointers/iterators, 
you should type &lt;code&gt;std::ptrdiff_t&lt;/code&gt; (which is essentially a singed integer type). 
Using an arbitrary integer type …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Addresses on 64 and 32 OS are different, 
so you have to be careful when your program have to deal with address. 
For example, 
if you take the difference of two pointers/iterators, 
you should type &lt;code&gt;std::ptrdiff_t&lt;/code&gt; (which is essentially a singed integer type). 
Using an arbitrary integer type makes you code non-portable. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;std::size_t&lt;/code&gt; represents the unsigned native integer size 
on the current architecture (i.e. 16-bit, 32-bit or 64-bit) compiling the code. 
So, to make your code portable,
you should decare indexing variables in loops as &lt;code&gt;std::size_t&lt;/code&gt; instead of &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;unsigned int&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="C++"></category><category term="programming"></category><category term="portable"></category></entry><entry><title>Automated Verizon Phone Bill (Continued)</title><link href="http://www.legendu.net/en/blog/automated-verizon-phone-bill-continued/" rel="alternate"></link><published>2012-09-05T00:00:00-07:00</published><updated>2012-09-05T00:00:00-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2012-09-05:/en/blog/automated-verizon-phone-bill-continued/</id><summary type="html">&lt;p&gt;I have switched to the "Share Everything" plan of Verizon two weeks ago,
and I got a little complex bill this month due to people leaving and joining my family plan. 
My ruby program for parsing phone bill still works well. 
It is actually surprising smarter than I thought on …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have switched to the "Share Everything" plan of Verizon two weeks ago,
and I got a little complex bill this month due to people leaving and joining my family plan. 
My ruby program for parsing phone bill still works well. 
It is actually surprising smarter than I thought on this complicated bill. 
Big congratulations to myself!&lt;/p&gt;</content><category term="phone"></category><category term="verizon"></category><category term="Ruby"></category><category term="programming"></category></entry><entry><title>Load User-written Script into Ruby</title><link href="http://www.legendu.net/en/blog/load-script-ruby/" rel="alternate"></link><published>2012-08-25T00:00:00-07:00</published><updated>2012-08-25T00:00:00-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2012-08-25:/en/blog/load-script-ruby/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/ruby/ruby.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;By default the current working directoly is not in the search path of Ruby. 
To load a user-written script named "script.rb" into Ruby, 
you can use the command &lt;code&gt;require './script.rb'&lt;/code&gt;.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/ruby/ruby.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;By default the current working directoly is not in the search path of Ruby. 
To load a user-written script named "script.rb" into Ruby, 
you can use the command &lt;code&gt;require './script.rb'&lt;/code&gt;.&lt;/p&gt;</content><category term="search path"></category><category term="require"></category><category term="programming"></category><category term="load"></category><category term="package"></category><category term="Ruby"></category></entry><entry><title>Tips for Ruby</title><link href="http://www.legendu.net/en/blog/tips-ruby/" rel="alternate"></link><published>2012-08-25T00:00:00-07:00</published><updated>2012-08-25T00:00:00-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2012-08-25:/en/blog/tips-ruby/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/ruby/ruby.png" height="200" width="200" align="right"/&gt;&lt;/p&gt;
&lt;h2 id="array"&gt;Array&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The method &lt;code&gt;push&lt;/code&gt; inserts an element to the back of the arry; 
the method &lt;code&gt;insert&lt;/code&gt; inserts an element to any place of the array.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The method &lt;code&gt;pop&lt;/code&gt; removes the last element of the array;
the method &lt;code&gt;delete&lt;/code&gt; removes any specified element from the array.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The method &lt;code&gt;concat&lt;/code&gt; combines the …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/ruby/ruby.png" height="200" width="200" align="right"/&gt;&lt;/p&gt;
&lt;h2 id="array"&gt;Array&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The method &lt;code&gt;push&lt;/code&gt; inserts an element to the back of the arry; 
the method &lt;code&gt;insert&lt;/code&gt; inserts an element to any place of the array.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The method &lt;code&gt;pop&lt;/code&gt; removes the last element of the array;
the method &lt;code&gt;delete&lt;/code&gt; removes any specified element from the array.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The method &lt;code&gt;concat&lt;/code&gt; combines the array with another one;
the method &lt;code&gt;join&lt;/code&gt; concatenates all elements in the array separated 
by the specified delimiter. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="string"&gt;String&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use the method &lt;code&gt;to_i&lt;/code&gt; to convert a string to integer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You use both single and double quotes to denote string. 
The difference is that single quotes preserves 
escape characters while double quotes interprete escape characters.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The method &lt;code&gt;end_with?&lt;/code&gt; check whether a string ends with the specified string.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The method &lt;code&gt;upcase&lt;/code&gt; returns a copy of the string with lower case letters
replaced with their upper case letters; 
the method &lt;code&gt;downcase&lt;/code&gt; returns a copy of the string with upper case letters 
replaced with their lower case letters;
the method &lt;code&gt;swapcase&lt;/code&gt; return a copy of the string with lower case letters 
replaced with their upper case letters and upper case character replaced with 
their lower case letters. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the method &lt;code&gt;strip&lt;/code&gt; to remove leading and trailing white spaces.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="input-and-output"&gt;Input and Output&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Both the function &lt;code&gt;puts&lt;/code&gt; and &lt;code&gt;print&lt;/code&gt; display the content of objects 
on the console. The difference is that the function &lt;code&gt;puts&lt;/code&gt; add a new line
to the end if their is no one while &lt;code&gt;print&lt;/code&gt; not.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The function &lt;code&gt;gets&lt;/code&gt; read in input from the console. 
You can use the &lt;code&gt;chomp&lt;/code&gt; method to ignore new lines,
i.e., you can use &lt;code&gt;gets.chomp&lt;/code&gt; to read a single line from the console.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="file-and-directory"&gt;File and Directory&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You can use the method &lt;code&gt;Dir.entries&lt;/code&gt; to query files and subdirectories
in a directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The method &lt;code&gt;File.delete&lt;/code&gt; removes files specified files. 
The number of files passed as arguments is returned. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="flow-control"&gt;Flow Control&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;You cannot use &lt;code&gt;else if&lt;/code&gt; in Ruby, instead you can use &lt;code&gt;elsif&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="object-and-class"&gt;Object and Class&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;methods&lt;/code&gt; to query all methods of an object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You'd not define a function with the same as some directly usable function/method in Ruby.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="array"></category><category term="IO"></category><category term="Ruby"></category><category term="programming"></category><category term="string"></category></entry><entry><title>String in C++11</title><link href="http://www.legendu.net/en/blog/cpp-auto-string/" rel="alternate"></link><published>2012-08-20T00:00:00-07:00</published><updated>2012-08-20T00:00:00-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2012-08-20:/en/blog/cpp-auto-string/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;auto s = "abcd"&lt;/code&gt; creats &lt;code&gt;const char *&lt;/code&gt; not string, so use &lt;code&gt;auto&lt;/code&gt; with caution. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Since a string in C++ is an array of chars, 
you can operate it like an array. 
For example, you can use range-based for loop and so on.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is recommended that you use &lt;code&gt;std::string&lt;/code&gt; in …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;auto s = "abcd"&lt;/code&gt; creats &lt;code&gt;const char *&lt;/code&gt; not string, so use &lt;code&gt;auto&lt;/code&gt; with caution. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Since a string in C++ is an array of chars, 
you can operate it like an array. 
For example, you can use range-based for loop and so on.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is recommended that you use &lt;code&gt;std::string&lt;/code&gt; in function which are not intended to be 
interfaces, and you use &lt;code&gt;const char *&lt;/code&gt; as parameters of function that are intended to be 
interfaces (e.g., compiled as shared library and so on).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use &lt;code&gt;==&lt;/code&gt; to compare whether the content of two &lt;code&gt;std::string&lt;/code&gt; are the same,
but you cannot use &lt;code&gt;==&lt;/code&gt; to compare the content of &lt;code&gt;const char *&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="auto"></category><category term="iteration"></category><category term="programming"></category><category term="C/C++"></category><category term="string"></category><category term="loop"></category><category term="char"></category></entry><entry><title>Make Plots in SAS</title><link href="http://www.legendu.net/en/blog/sas-plot/" rel="alternate"></link><published>2012-07-11T00:00:00-07:00</published><updated>2012-07-11T00:00:00-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2012-07-11:/en/blog/sas-plot/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/sas/sas.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;There are functions to add points, lines and legends to an existing plot in R.
In SAS, there is no way to do this. 
What you can do is to add plotting commands in the plotting procedure and rerun your code. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Staring from version 9.2, SAS offers new procedures …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/sas/sas.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;There are functions to add points, lines and legends to an existing plot in R.
In SAS, there is no way to do this. 
What you can do is to add plotting commands in the plotting procedure and rerun your code. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Staring from version 9.2, SAS offers new procedures such as PROC SGPLOT and PROC SGPANEL for making plots.
PROC SGPLOT (sophisticated graphical plot) produces high quality plots. 
PROC SGPANEL divides the window into several parts and make plots on these sub area.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is possible to call R from SAS which means that you can use R to make plots in SAS if you like. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="image"></category><category term="SAS"></category><category term="graphics"></category><category term="programming"></category></entry><entry><title>Thread Safe Random Number Generator</title><link href="http://www.legendu.net/en/blog/thread-safe-random-number-generator/" rel="alternate"></link><published>2012-07-08T00:00:00-07:00</published><updated>2012-07-08T00:00:00-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2012-07-08:/en/blog/thread-safe-random-number-generator/</id><summary type="html">&lt;p&gt;&lt;img src="http://www.legendu.net/media/rng/random-number-generator.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;In statistical simulation, a thread safe random number generator is often useful. 
Thread safty can be achieved by synchronize public methods of random number generator engines. 
In C++, 
this can be done through mutex (see more about my post on multithreading in C++). 
I implemented a &lt;a href="http://www.legendu.net/media/rng/smt.h"&gt;Thread Safe Random Number …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://www.legendu.net/media/rng/random-number-generator.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;In statistical simulation, a thread safe random number generator is often useful. 
Thread safty can be achieved by synchronize public methods of random number generator engines. 
In C++, 
this can be done through mutex (see more about my post on multithreading in C++). 
I implemented a &lt;a href="http://www.legendu.net/media/rng/smt.h"&gt;Thread Safe Random Number Generator&lt;/a&gt; (based on the Mersenne Twister RNG).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#&lt;span class="nv"&gt;ifndef&lt;/span&gt; &lt;span class="nv"&gt;DCLONG_SMT_H_&lt;/span&gt;
#&lt;span class="nv"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;DCLONG_SMT_H_&lt;/span&gt;

#&lt;span class="k"&gt;include&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;;random&amp;amp;gt;&lt;/span&gt;
#&lt;span class="k"&gt;include&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;;mutex&amp;amp;gt;&lt;/span&gt;
&lt;span class="nv"&gt;using&lt;/span&gt; &lt;span class="nv"&gt;namespace&lt;/span&gt; &lt;span class="nv"&gt;std&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;; class UIntType, size_t w, size_t n, size_t m, size_t r,&lt;/span&gt;
&lt;span class="nv"&gt;UIntType&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;, &lt;span class="nv"&gt;size_t&lt;/span&gt; &lt;span class="nv"&gt;u&lt;/span&gt;, &lt;span class="nv"&gt;UIntType&lt;/span&gt; &lt;span class="nv"&gt;d&lt;/span&gt;, &lt;span class="nv"&gt;size_t&lt;/span&gt; &lt;span class="nv"&gt;s&lt;/span&gt;,
&lt;span class="nv"&gt;UIntType&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;, &lt;span class="nv"&gt;size_t&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;, &lt;span class="nv"&gt;UIntType&lt;/span&gt; &lt;span class="nv"&gt;c&lt;/span&gt;, &lt;span class="nv"&gt;size_t&lt;/span&gt; &lt;span class="nv"&gt;l&lt;/span&gt;, &lt;span class="nv"&gt;UIntType&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;gt&lt;/span&gt;&lt;span class="c1"&gt;; class smt : public mersenne_twister_engine&amp;amp;lt;UIntType,w,n,m,r,a,u,d,s,b,t,c,l,f&amp;amp;gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;private&lt;/span&gt;:
        &lt;span class="nv"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;mutex&lt;/span&gt; &lt;span class="nv"&gt;_mutex&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;public&lt;/span&gt;:
        &lt;span class="nv"&gt;UIntType&lt;/span&gt; &lt;span class="nv"&gt;operator&lt;/span&gt;&lt;span class="ss"&gt;()()&lt;/span&gt;{
            &lt;span class="nv"&gt;lock_guard&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;;mutex&amp;amp;gt; lck(_mutex);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;mersenne_twister_engine&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;;UIntType,w,n,m,r,a,u,d,s,b,t,c,l,f&amp;amp;gt;::operator()();&lt;/span&gt;
        }
}&lt;span class="c1"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;; class UIntType, size_t w, size_t n, size_t m, size_t r,&lt;/span&gt;
&lt;span class="nv"&gt;UIntType&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;, &lt;span class="nv"&gt;size_t&lt;/span&gt; &lt;span class="nv"&gt;u&lt;/span&gt;, &lt;span class="nv"&gt;UIntType&lt;/span&gt; &lt;span class="nv"&gt;d&lt;/span&gt;, &lt;span class="nv"&gt;size_t&lt;/span&gt; &lt;span class="nv"&gt;s&lt;/span&gt;,
&lt;span class="nv"&gt;UIntType&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;, &lt;span class="nv"&gt;size_t&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;, &lt;span class="nv"&gt;UIntType&lt;/span&gt; &lt;span class="nv"&gt;c&lt;/span&gt;, &lt;span class="nv"&gt;size_t&lt;/span&gt; &lt;span class="nv"&gt;l&lt;/span&gt;, &lt;span class="nv"&gt;UIntType&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;gt&lt;/span&gt;&lt;span class="c1"&gt;; mutex smt&amp;amp;lt;UIntType,w,n,m,r,a,u,d,s,b,t,c,l,f&amp;amp;gt;::_mutex;&lt;/span&gt;

&lt;span class="nv"&gt;typedef&lt;/span&gt; &lt;span class="nv"&gt;smt&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;;uint32_t,32,351,175,19,0xccab8ee7,&lt;/span&gt;
&lt;span class="mi"&gt;11&lt;/span&gt;,&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nv"&gt;xffffffff&lt;/span&gt;,&lt;span class="mi"&gt;7&lt;/span&gt;,&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nv"&gt;x31b6ab00&lt;/span&gt;,&lt;span class="mi"&gt;15&lt;/span&gt;,&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nv"&gt;xffe50000&lt;/span&gt;,&lt;span class="mi"&gt;17&lt;/span&gt;,&lt;span class="mi"&gt;1812433253&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;gt&lt;/span&gt;&lt;span class="c1"&gt;; smt11213b;&lt;/span&gt;

&lt;span class="nv"&gt;typedef&lt;/span&gt; &lt;span class="nv"&gt;smt&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;;uint32_t,32,624,397,31,0x9908b0df,&lt;/span&gt;
&lt;span class="mi"&gt;11&lt;/span&gt;,&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nv"&gt;xffffffff&lt;/span&gt;,&lt;span class="mi"&gt;7&lt;/span&gt;,&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nv"&gt;x9d2c5680&lt;/span&gt;,&lt;span class="mi"&gt;15&lt;/span&gt;,&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nv"&gt;xefc60000&lt;/span&gt;,&lt;span class="mi"&gt;18&lt;/span&gt;,&lt;span class="mi"&gt;1812433253&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;gt&lt;/span&gt;&lt;span class="c1"&gt;; smt19937;&lt;/span&gt;

#&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;defined&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;BOOST_NO_INT64_T&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;amp&lt;/span&gt;&lt;span class="c1"&gt;;&amp;amp;amp; !defined(BOOST_NO_INTEGRAL_INT64_T)&lt;/span&gt;
&lt;span class="nv"&gt;typedef&lt;/span&gt; &lt;span class="nv"&gt;smt&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;lt&lt;/span&gt;&lt;span class="c1"&gt;;uint64_t,64,312,156,31,&lt;/span&gt;
&lt;span class="nv"&gt;UINT64_C&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nv"&gt;xb5026f5aa96619e9&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;,&lt;span class="mi"&gt;29&lt;/span&gt;,&lt;span class="nv"&gt;UINT64_C&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nv"&gt;x5555555555555555&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;,&lt;span class="mi"&gt;17&lt;/span&gt;,
&lt;span class="nv"&gt;UINT64_C&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nv"&gt;x71d67fffeda60000&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;,&lt;span class="mi"&gt;37&lt;/span&gt;,&lt;span class="nv"&gt;UINT64_C&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nv"&gt;xfff7eee000000000&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;,&lt;span class="mi"&gt;43&lt;/span&gt;,
&lt;span class="nv"&gt;UINT64_C&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6364136223846793005&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;gt&lt;/span&gt;&lt;span class="c1"&gt;; smt19937_64;&lt;/span&gt;
#&lt;span class="k"&gt;endif&lt;/span&gt;

#&lt;span class="k"&gt;endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To test whether this random number generator is truely thread safe, 
I generated a bunch of integer from negative binomial distribution 
using both this random number generator and mt19937_64 
with a same seed (on which the random number generator implemented here is based) 
as the underlying engines, 
and compare whether they are the same set. 
Surprisingly, 
the two sets of integers I got were different. 
I was very confused and ask this problem to &lt;a href="http://bartoszmilewski.com/"&gt;Bartosz Milewski&lt;/a&gt; 
who published a series of video tutorials on multithreading in C++11. 
After discussing with Bartosz Milewski, 
he pointed out that the problem was because 
the negative binomial distribution calls the method &lt;code&gt;operator()()&lt;/code&gt; multiple times 
to generate a single random integer. 
This does not mean that anything is wrong with the implementation of the negative binomial distribution. 
It is thread safe as long as the underlying random number generator it uses is thread safe. 
Due to the fact that a negative binomial distribution calls the method &lt;code&gt;operator()()&lt;/code&gt; 
of the underlying random number generator multiple times to generate a single integer, 
the random numbers it generates based on a synchronized random number generator
is not necessarily the same set as the one 
that the corresponding serial random number generator generates from the same seed. 
I verified that the numbers generated by the negative binomial distribution 
using the thread safe random number generator here come from the right distribution. 
Another way to validate the implementation of the thread safe random number generator here is that 
if a distribution call the method &lt;code&gt;operator()()&lt;/code&gt; only once to generate a random number, 
then the numbers it generates based on smt and mt19937_64 should be the same set. 
I verified that this is true for a bernoulli distribution. &lt;/p&gt;
&lt;p&gt;Short after I implemented this thread safe random number generator, 
I found betters ways to generate random numbers in parallel. 
The basic is to make the random number engine to jump forward a long enough distance quickly. 
Currently many popular random number generators can jump forward a long enough distance 
in a acceptable short time. 
For example, 
the Mersenne Twister can jump forward in milliseconds. 
For more information, please see &lt;a href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/SFMT/#dSFMT"&gt;SFMT&lt;/a&gt;.&lt;/p&gt;</content><category term="C++"></category><category term="RNG"></category><category term="programming"></category><category term="thread"></category><category term="distribution"></category><category term="HPC"></category><category term="fun problems"></category><category term="MT"></category><category term="Concurrency"></category></entry><entry><title>Tips for Multithreading/Concurrency Programming in C++11</title><link href="http://www.legendu.net/en/blog/cpp11-concurrency-tips/" rel="alternate"></link><published>2012-06-24T00:00:00-07:00</published><updated>2012-06-24T00:00:00-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2012-06-24:/en/blog/cpp11-concurrency-tips/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If you use g++ to compile your parallel program which uses the thread library,
you need to use the option &lt;code&gt;-lpthread&lt;/code&gt;. 
For more information, see the post &lt;a href="http://dclong.github.io/en/2012/06/tips-gcc-compiler/"&gt;GNU/GCC&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;join&lt;/code&gt; method of threads guarantees happen-before relationship between threads.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can pass either a function (can be lambda function) and …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If you use g++ to compile your parallel program which uses the thread library,
you need to use the option &lt;code&gt;-lpthread&lt;/code&gt;. 
For more information, see the post &lt;a href="http://dclong.github.io/en/2012/06/tips-gcc-compiler/"&gt;GNU/GCC&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;join&lt;/code&gt; method of threads guarantees happen-before relationship between threads.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can pass either a function (can be lambda function) and an object which implement the 
operator &lt;code&gt;()&lt;/code&gt; to a thread. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;future&lt;/code&gt; class in C++11 is similar to the &lt;code&gt;future&lt;/code&gt; class in Java. 
The difference is that in C++11 we have another class named &lt;code&gt;promise&lt;/code&gt; 
which can work together with &lt;code&gt;future&lt;/code&gt; to return values from threads while 
in Java you do not need a promise and can just let methods (to be called by 
threads) return values. In C++11, there is another class &lt;code&gt;async&lt;/code&gt; which is 
close to what Java does. You do not have to use a promise and you can let 
functions/methods (to be called by threads) return values directly. &lt;code&gt;async&lt;/code&gt; 
is kind of like thread pool in Java, but not exactly the same. 
In C++11, you do not have much control on what many threads to with &lt;code&gt;async&lt;/code&gt; 
while in Java, you have better control on that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To protect shared data between threads in C++11, you have to use the &lt;code&gt;mutex&lt;/code&gt; (mutual exclusion)
class which is similar to the &lt;code&gt;ReentrantLock&lt;/code&gt; class in Java. Actually the
&lt;code&gt;ReentrantLock&lt;/code&gt; class in Java is essentially mutex. 
There is a common misunderstanding about &lt;strong&gt;lock&lt;/strong&gt; in Java.
The locking/unlocking is a conceptual thing that happens via programmer
discipline: basically if you make a method synchronized to prevent a read/write
conflict on a variable, then you have to ensure that every access to that
variable is throught a synchronized method/block of the same object. That forces
every threads to acquire mutex of the object and ensures mutual exclusion. 
Directly use of the &lt;code&gt;lock&lt;/code&gt; and &lt;code&gt;unlock&lt;/code&gt; methods of mutex is not encouraged in 
C++11 though, this is becuase if exception occurs between the locked block, 
the resource will never be unlock resulting dead lock. 
In Java this is gracefully addressed by introducing a &lt;code&gt;finally&lt;/code&gt; block in
addition to the &lt;code&gt;try ... catch ...&lt;/code&gt; blocks. 
A commonly used way to proctect shared data in C++11 is to use the &lt;code&gt;lock_guard&lt;/code&gt; 
class. For example you can put the following code in the functions/methods that 
need to be access by thread mutual exclusively&lt;/p&gt;
&lt;p&gt;std::lock_guard&lt;std::mutex&gt; lck(_mutex);&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;where &lt;code&gt;_mutex&lt;/code&gt; is a shared object of the &lt;code&gt;mutex&lt;/code&gt; class among these
functions/methods. The deconstructor of the &lt;code&gt;lock_guard&lt;/code&gt; unlocks the lock so
this guarantees that no dead lock happens. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;It seems that parallel code in c++ is as efficient as in java (in the sense of code speedup)? &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;std::async&lt;/code&gt; together with &lt;code&gt;std::future&lt;/code&gt; is an alternative to 
&lt;code&gt;std::thread&lt;/code&gt; and shared variables when implementing parallel algorithms. 
Using &lt;code&gt;std::async&lt;/code&gt; and &lt;code&gt;std::future&lt;/code&gt;, one avoids to lock/unlock variables 
and thus avoids false sharing problems, so it sometimes a better alternative
to &lt;code&gt;std::thread&lt;/code&gt; and shared variables. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you pass the address of a method to a thread or async, 
you must use the full name of the function, 
i.e., you have to use class name as the prefix. 
Also, you have to pass &lt;code&gt;this&lt;/code&gt; as the second parameter to thread/async
if the method is a non-static method. 
This is because a non-static method need a instance to run. 
(I'm not very sure whether this is true for static methods)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You'd better not pass overloaded functions to thread or async in a class,
because it is hard for the thread or async to know which one is the right method to call.
I'm not sure whether there is way to solve this problem or not ...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It seems that object used mutex cannot be copied? 
So if you write a thread safe class using mutex, 
you'd better override the default copy constructor of the class,
or you can make the mutex static. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Parallel program often requires shared varialbes which should be access by references. 
By default objects are passed by value (i.e. copied) in C++, 
so you have to be careful when you write parallel code in C++,
otherwise, it is easy to make mistakes. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prefer asynchronized buffering when dealing with high-latency operations. 
A good article from Herb Sutter can be found 
&lt;a href="http://www.drdobbs.com/architecture-and-design/know-when-to-use-an-active-object-instea/227500074?pgno=1"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="programming"></category><category term="C/C++"></category><category term="Java"></category><category term="HPC"></category><category term="async"></category><category term="mutex"></category><category term="future"></category><category term="concurrency"></category><category term="promise"></category></entry><entry><title>Parallel Computing in Java</title><link href="http://www.legendu.net/en/blog/parallel-computing-java/" rel="alternate"></link><published>2012-06-11T00:00:00-07:00</published><updated>2012-06-11T00:00:00-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2012-06-11:/en/blog/parallel-computing-java/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/java/multithreading.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;The following are a few tips for multithreading parallel computing in Java.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Instance fields, static fields and elements of arrays are stored in heap
memory and thus can be shared between different threads. 
Local variables and parameter variables are never shared between threads.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If race condition happens (read and write …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/java/multithreading.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;The following are a few tips for multithreading parallel computing in Java.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Instance fields, static fields and elements of arrays are stored in heap
memory and thus can be shared between different threads. 
Local variables and parameter variables are never shared between threads.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If race condition happens (read and write to the same shared variable by 
different threads), 
you must protect the shared resource (object), which can be done through synchronized
method, locking/unlocking or atomic variables. 
When a thread excecute a synchronized method or block, 
it requires a mutex (mutual exclusion) of the object. 
This does not prevent all other threads from accessing the object 
but only these threads who also require mutex of the same object. 
If the object has public fileds and other unsynchronized methos,
other threads can still access these fileds or methods at the same time.
This means that nothing is acutally locked when you use synchronized method or locking/unlocking.
The locking/unlocking is a conceptual thing that happens via programmer discipline: 
basically if you make a method synchronized to prevent a read/write conflict on a variable, 
then you have to ensure that &lt;strong&gt;every&lt;/strong&gt; access to that variable is throught a synchronized method/block of the same object. 
That forces every threads to acquire mutex of the object and ensures mutual exclusion. 
The misunderstanding about locking/unlocking leads to buggy code which try to protect shared
object using synchronized method/block outside it. 
If a synchronized method/block is used to protect shared object, 
it must be inside the object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Elements of arrays are independent variables and thus no synchronization 
is needed if different threads access elements with different indices. 
Similar rule applies to different instance variables of an object.
However, false sharing can happen if two threads access variables that are 
stored close in the memory (more accurate, in a same cache line). 
Though false sharing does not make your parallel code invalid, 
it downgrade the efficiency of the code. 
The following are some strategies to allievate false sharing.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you let different threads to access different elements of an array, 
you can cut the array into non-interleaving parts 
(e.g., &lt;code&gt;0-(k-1)&lt;/code&gt; and &lt;code&gt;k-(n-1)&lt;/code&gt;) and let different threads work on different pieces. 
Or you can use thread-local copies of the array. 
This does not kill falsing sharing. 
The essential way to avoid falsing sharing is to avoid different threads accessing a same cache line. 
To avoid false sharing completely, you can separate parts of the array (to be 
accessed by diffrent threads) using dummy elements. 
A general rule is to make the sepration segment twice the size of cache line 
(which is usually 64 bytes).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use future object to return results from threads.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can align varialbes at the beginning of cache lines.&lt;br&gt;
While this is supported in C/C++, it is not well supported in Java.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;join&lt;/code&gt; method of threads and the &lt;code&gt;awaitTermination&lt;/code&gt; method of thread pool (if return true)
guarantees happen-before relationship between threads. In other words, if you
call the join method of a thread, then the changed made by the threads is
seenable by the code after the &lt;code&gt;join&lt;/code&gt; method. This is also true for the method 
&lt;code&gt;awaitTermination&lt;/code&gt; given that it returns &lt;code&gt;true&lt;/code&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If no barrie (join of threads, termination of thread pool) is set, the order of execuation of thread is underterminant. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You have to call the &lt;code&gt;signal&lt;/code&gt; or the &lt;code&gt;signallAll&lt;/code&gt; method in some thread if you every called
the &lt;code&gt;await&lt;/code&gt; method in another thread. There is no need to call these two notifying methods
if you never called the &lt;code&gt;await&lt;/code&gt; method in a thread. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When doing multithreading parallel computing, there is no benefit to use
more thread than the number of available cores on the computer on which the
code is to be run. You can use the following code the get the number of available
cores on a computer.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;int coresNumber = Runtime.getRuntime().availableProcessors();&lt;/code&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using the future class, you can return results from threads. 
The advantage of using future class is that you do not have to
destroy threads or thread pool to retrieve result. 
The threads/thread pool created are/is resuable.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you create an object of Runnable or Callable and pass it to a thread or submit 
it to a thread pool, it is better to make deep copies of arguments passed to the 
constructor of the object. There are two reasons for this. First, shallow copy
makes the object shared and might result in race condition. Second, the object
might be destroied while the threads which require the object are still running. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The following is a Java method which create a thread pool of fixed number of threads, 
add tasks into the pool, shutdown the pool and wait for all jobs to be finished.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;public&lt;/span&gt; &lt;span class="nv"&gt;void&lt;/span&gt; &lt;span class="nv"&gt;parSimulateIndependent&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;String&lt;/span&gt; &lt;span class="nv"&gt;outputFile&lt;/span&gt;,&lt;span class="nv"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;maxNumberOfThreads&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;throws&lt;/span&gt; &lt;span class="nv"&gt;IOException&lt;/span&gt;{
    &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nv"&gt;initialize&lt;/span&gt; &lt;span class="nv"&gt;output&lt;/span&gt;, &lt;span class="nv"&gt;must&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nv"&gt;it&lt;/span&gt; &lt;span class="nv"&gt;here&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;avoid&lt;/span&gt; &lt;span class="nv"&gt;possible&lt;/span&gt; &lt;span class="nv"&gt;issues&lt;/span&gt;
    &lt;span class="nv"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;new&lt;/span&gt; &lt;span class="nv"&gt;SPTOutput&lt;/span&gt;[&lt;span class="nv"&gt;numberOfSimulations&lt;/span&gt;][]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nv"&gt;thread&lt;/span&gt; &lt;span class="nv"&gt;pool&lt;/span&gt;
    &lt;span class="nv"&gt;ExecutorService&lt;/span&gt; &lt;span class="nv"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Executors&lt;/span&gt;.&lt;span class="nv"&gt;newFixedThreadPool&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;maxNumberOfThreads&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;simulationIndex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;; simulationIndex&amp;amp;lt;numberOfSimulations; ++simulationIndex){&lt;/span&gt;
        &lt;span class="nv"&gt;generateIndependentData&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nv"&gt;writeData&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;simulationIndex&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;generateRandomIndexOfCombinations&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;pool&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;new&lt;/span&gt; &lt;span class="nv"&gt;SPTsRunnable&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;combinations&lt;/span&gt;,&lt;span class="nv"&gt;data&lt;/span&gt;,&lt;span class="nv"&gt;randomIndexOfCombinations&lt;/span&gt;, &lt;span class="nv"&gt;sizeOfFirstGroup&lt;/span&gt;,&lt;span class="nv"&gt;sequentialTerminationCriteria&lt;/span&gt;,&lt;span class="nv"&gt;output&lt;/span&gt;,&lt;span class="nv"&gt;simulationIndex&lt;/span&gt;&lt;span class="ss"&gt;))&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
    }
    &lt;span class="nv"&gt;pool&lt;/span&gt;.&lt;span class="nv"&gt;shutdown&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;pool&lt;/span&gt;.&lt;span class="nv"&gt;isTerminated&lt;/span&gt;&lt;span class="ss"&gt;())&lt;/span&gt;{
        &lt;span class="nv"&gt;try&lt;/span&gt; {
            &lt;span class="nv"&gt;pool&lt;/span&gt;.&lt;span class="nv"&gt;awaitTermination&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;, &lt;span class="nv"&gt;TimeUnit&lt;/span&gt;.&lt;span class="nv"&gt;SECONDS&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
        } &lt;span class="nv"&gt;catch&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;InterruptedException&lt;/span&gt; &lt;span class="nv"&gt;e&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; {
            &lt;span class="nv"&gt;e&lt;/span&gt;.&lt;span class="nv"&gt;printStackTrace&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
            &lt;span class="nv"&gt;System&lt;/span&gt;.&lt;span class="nv"&gt;out&lt;/span&gt;.&lt;span class="nv"&gt;println&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Some thread in the pool was interrupted.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Below is another example which distribute jobs to threads manually.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;void&lt;/span&gt; &lt;span class="nv"&gt;runJobs&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;threadsNumber&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; {
    &lt;span class="nv"&gt;Thread&lt;/span&gt;[] &lt;span class="nv"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;new&lt;/span&gt; &lt;span class="nv"&gt;Thread&lt;/span&gt;[&lt;span class="nv"&gt;threadsNumber&lt;/span&gt;]&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;each&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;array&lt;/span&gt;.&lt;span class="nv"&gt;length&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nv"&gt;threadsNumber&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;eachPlusOne&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;each&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;extra&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;array&lt;/span&gt;.&lt;span class="nv"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;threadsNumber&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;each&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;startIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;endIndex&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;; i &amp;amp;lt; extra; ++i) {&lt;/span&gt;
        &lt;span class="nv"&gt;endIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;startIndex&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;eachPlusOne&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;t&lt;/span&gt;[&lt;span class="nv"&gt;i&lt;/span&gt;] &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;new&lt;/span&gt; &lt;span class="nv"&gt;Thread&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;new&lt;/span&gt; &lt;span class="nv"&gt;SetElementRunnable&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;array&lt;/span&gt;, &lt;span class="nv"&gt;startIndex&lt;/span&gt;, &lt;span class="nv"&gt;endIndex&lt;/span&gt;&lt;span class="ss"&gt;))&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;t&lt;/span&gt;[&lt;span class="nv"&gt;i&lt;/span&gt;].&lt;span class="nv"&gt;start&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;startIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;endIndex&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
    }
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;extra&lt;/span&gt;&lt;span class="c1"&gt;; i &amp;amp;lt; threadsNumber; ++i) {&lt;/span&gt;
        &lt;span class="nv"&gt;endIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;startIndex&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;each&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;t&lt;/span&gt;[&lt;span class="nv"&gt;i&lt;/span&gt;] &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;new&lt;/span&gt; &lt;span class="nv"&gt;Thread&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;new&lt;/span&gt; &lt;span class="nv"&gt;SetElementRunnable&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;array&lt;/span&gt;, &lt;span class="nv"&gt;startIndex&lt;/span&gt;, &lt;span class="nv"&gt;endIndex&lt;/span&gt;&lt;span class="ss"&gt;))&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;t&lt;/span&gt;[&lt;span class="nv"&gt;i&lt;/span&gt;].&lt;span class="nv"&gt;start&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;startIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;endIndex&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
    }
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;threadsNumber&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;; i &amp;amp;gt;= 0; --i) {&lt;/span&gt;
        &lt;span class="nv"&gt;try&lt;/span&gt; {
            &lt;span class="nv"&gt;t&lt;/span&gt;[&lt;span class="nv"&gt;i&lt;/span&gt;].&lt;span class="nv"&gt;join&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
        } &lt;span class="nv"&gt;catch&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;InterruptedException&lt;/span&gt; &lt;span class="nv"&gt;e&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; {
            &lt;span class="nv"&gt;e&lt;/span&gt;.&lt;span class="nv"&gt;printStackTrace&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
            &lt;span class="nv"&gt;System&lt;/span&gt;.&lt;span class="nv"&gt;out&lt;/span&gt;.&lt;span class="nv"&gt;println&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Thread &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt; was interrupted.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the run method of the SetElementRunnable class is given below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;public&lt;/span&gt; &lt;span class="nv"&gt;void&lt;/span&gt; &lt;span class="nv"&gt;run&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;{
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;startIndex&lt;/span&gt;&lt;span class="c1"&gt;; index&amp;amp;lt;endIndex; ++index){&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;; i&amp;amp;lt;1000000000; ++i){&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;; j&amp;amp;lt;100000000; ++j){&lt;/span&gt;
                &lt;span class="nv"&gt;Math&lt;/span&gt;.&lt;span class="nv"&gt;sqrt&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;.&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
            }
        }
        &lt;span class="nv"&gt;array&lt;/span&gt;[&lt;span class="nv"&gt;index&lt;/span&gt;] &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice that different threads acess different elements of a shared array, 
so no synchronization is need. 
Another lock-free approach is to use atomic variables (operations to the variable is atomic). 
The following example sums integers in parallel using the AtomicInteger class.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;public&lt;/span&gt; &lt;span class="nv"&gt;class&lt;/span&gt; &lt;span class="nv"&gt;TestSumRunnable&lt;/span&gt; {
    &lt;span class="nv"&gt;public&lt;/span&gt; &lt;span class="nv"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;void&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;String&lt;/span&gt;[] &lt;span class="nv"&gt;args&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; {
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;step&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;; step &amp;amp;lt; 10000; ++step) {&lt;/span&gt;
            &lt;span class="nv"&gt;AtomicInteger&lt;/span&gt; &lt;span class="nv"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;new&lt;/span&gt; &lt;span class="nv"&gt;AtomicInteger&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
            &lt;span class="nv"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;coresNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Runtime&lt;/span&gt;.&lt;span class="nv"&gt;getRuntime&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;.&lt;span class="nv"&gt;availableProcessors&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
            &lt;span class="nv"&gt;ExecutorService&lt;/span&gt; &lt;span class="nv"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Executors&lt;/span&gt;.&lt;span class="nv"&gt;newFixedThreadPool&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;coresNumber&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;; i &amp;amp;lt; 1000; ++i) {&lt;/span&gt;
                &lt;span class="nv"&gt;pool&lt;/span&gt;.&lt;span class="nv"&gt;execute&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;new&lt;/span&gt; &lt;span class="nv"&gt;SumRunnable&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;sum&lt;/span&gt;, &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="ss"&gt;))&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
            }
            &lt;span class="nv"&gt;pool&lt;/span&gt;.&lt;span class="nv"&gt;shutdown&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;pool&lt;/span&gt;.&lt;span class="nv"&gt;isTerminated&lt;/span&gt;&lt;span class="ss"&gt;())&lt;/span&gt; {
                &lt;span class="nv"&gt;try&lt;/span&gt; {
                &lt;span class="nv"&gt;pool&lt;/span&gt;.&lt;span class="nv"&gt;awaitTermination&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;, &lt;span class="nv"&gt;TimeUnit&lt;/span&gt;.&lt;span class="nv"&gt;SECONDS&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
                } &lt;span class="nv"&gt;catch&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;InterruptedException&lt;/span&gt; &lt;span class="nv"&gt;e&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; {
                &lt;span class="nv"&gt;e&lt;/span&gt;.&lt;span class="nv"&gt;printStackTrace&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
                }
            }
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;sum&lt;/span&gt;.&lt;span class="nv"&gt;get&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;499500&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; {
                &lt;span class="nv"&gt;System&lt;/span&gt;.&lt;span class="nv"&gt;err&lt;/span&gt;.&lt;span class="nv"&gt;println&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Wrong!&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
            }
            &lt;span class="nv"&gt;System&lt;/span&gt;.&lt;span class="nv"&gt;out&lt;/span&gt;.&lt;span class="nv"&gt;println&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;step &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;step&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt; done.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The run method of the SumRunnable class is as follows.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getAndAdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addend&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the above 3 examples, both thread pool and user-managed threads were used. 
Using thread pool is more convenient and is scalable for general purpose jobs. 
However, if you know that all jobs requires almost the same time to run, using
user-managed threads is more efficient because it creates much fewer objects.
This is often true in statistics simulations. &lt;/p&gt;</content><category term="lock"></category><category term="programming"></category><category term="thread"></category><category term="race condition"></category><category term="Java"></category><category term="HPC"></category><category term="parallel"></category><category term="concurrency"></category><category term="mutex"></category></entry><entry><title>Define Operator in R</title><link href="http://www.legendu.net/en/blog/overload-operator-r/" rel="alternate"></link><published>2012-06-08T00:00:00-07:00</published><updated>2012-06-08T00:00:00-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2012-06-08:/en/blog/overload-operator-r/</id><summary type="html">&lt;p&gt;One thing I do not like R is that operations on String in R 
are not as convenient as in other programming langauges such as Java, Python and Ruby. 
In these 3 programming languages, 
you can simply use &lt;code&gt;+&lt;/code&gt; to concatenate strings while in R you have to use the function …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One thing I do not like R is that operations on String in R 
are not as convenient as in other programming langauges such as Java, Python and Ruby. 
In these 3 programming languages, 
you can simply use &lt;code&gt;+&lt;/code&gt; to concatenate strings while in R you have to use the function &lt;code&gt;paste&lt;/code&gt;.
The inconvenience result from unable to overload functions and operators in R. 
However, you can still define/override operators in R. 
For example,
the following code renew the definition of &lt;code&gt;+&lt;/code&gt; to concatenate two strings.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;+&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="R"></category><category term="operator"></category><category term="overloading"></category><category term="override"></category><category term="programming"></category></entry><entry><title>Send Email in Ruby</title><link href="http://www.legendu.net/en/blog/send-email-ruby/" rel="alternate"></link><published>2012-06-07T00:00:00-07:00</published><updated>2012-06-07T00:00:00-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2012-06-07:/en/blog/send-email-ruby/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/ruby/ruby.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;A few days ago, I started writing my first Ruby program which read my Verizon
family plan statements, calculate bills for each member and send emails to
notify them. The part of reading PDF document and calculating bill is easy. I
stuck at the sending email part. There are many …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/ruby/ruby.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;A few days ago, I started writing my first Ruby program which read my Verizon
family plan statements, calculate bills for each member and send emails to
notify them. The part of reading PDF document and calculating bill is easy. I
stuck at the sending email part. There are many Ruby libraries for sending
emails, but I want one that allows me to use my Gmail account. For security
reasons, I use a backup Gmail for sending emails. So I want a Ruby library which
allows me to set the "Reply-to" header, the "From" header and can send emails to
multiple recipients at a time. I tried a few options, such as "net/smtp",
"mikell/mail", "pony" and finally I was recommended the library "actionmailer".
Among all these libraries, "actionmailer" meets my requirement well and has good
documentation. The following the function I wrote to send email to members in my
family plan.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;email_bills&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;subject&lt;/span&gt;,&lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;action_mailer&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="nv"&gt;ActionMailer&lt;/span&gt;::&lt;span class="nv"&gt;Base&lt;/span&gt;.&lt;span class="nv"&gt;raise_delivery_errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;true&lt;/span&gt;
    &lt;span class="nv"&gt;ActionMailer&lt;/span&gt;::&lt;span class="nv"&gt;Base&lt;/span&gt;.&lt;span class="nv"&gt;delivery_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; :&lt;span class="nv"&gt;smtp&lt;/span&gt;
    &lt;span class="nv"&gt;member_emails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;dclong@iastate.edu,lisa19850925@gmail.com,lynnyu2009@gmail.com,klins@iastate.edu&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    # &lt;span class="nv"&gt;member_emails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;duchuanlong@gmail.com&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
    # &lt;span class="nv"&gt;read&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;password&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;firedragon.du@gmail.com&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="nv"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;read_password&lt;/span&gt;
    &lt;span class="nv"&gt;ActionMailer&lt;/span&gt;::&lt;span class="nv"&gt;Base&lt;/span&gt;.&lt;span class="nv"&gt;smtp_settings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; {
        :&lt;span class="nv"&gt;address&lt;/span&gt;   &lt;span class="o"&gt;=&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;gt&lt;/span&gt;&lt;span class="c1"&gt;; &amp;quot;smtp.gmail.com&amp;quot;,&lt;/span&gt;
        :&lt;span class="nv"&gt;port&lt;/span&gt;      &lt;span class="o"&gt;=&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;gt&lt;/span&gt;&lt;span class="c1"&gt;; 587,&lt;/span&gt;
        :&lt;span class="nv"&gt;domain&lt;/span&gt;    &lt;span class="o"&gt;=&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;gt&lt;/span&gt;&lt;span class="c1"&gt;; &amp;quot;gmail.com&amp;quot;,&lt;/span&gt;
        :&lt;span class="nv"&gt;authentication&lt;/span&gt; &lt;span class="o"&gt;=&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;gt&lt;/span&gt;&lt;span class="c1"&gt;; :plain,&lt;/span&gt;
        :&lt;span class="nv"&gt;user_name&lt;/span&gt;      &lt;span class="o"&gt;=&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;gt&lt;/span&gt;&lt;span class="c1"&gt;; &amp;quot;firedragon.du@gmail.com&amp;quot;,&lt;/span&gt;
        :&lt;span class="nv"&gt;password&lt;/span&gt;       &lt;span class="o"&gt;=&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;gt&lt;/span&gt;&lt;span class="c1"&gt;; password,&lt;/span&gt;
        :&lt;span class="nv"&gt;enable_starttls_auto&lt;/span&gt; &lt;span class="o"&gt;=&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;gt&lt;/span&gt;&lt;span class="c1"&gt;; true&lt;/span&gt;
    }
    &lt;span class="nv"&gt;mail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;ActionMailer&lt;/span&gt;::&lt;span class="nv"&gt;Base&lt;/span&gt;.&lt;span class="nv"&gt;mail&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;:&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;gt&lt;/span&gt;&lt;span class="c1"&gt;;member_emails)&lt;/span&gt;
    &lt;span class="nv"&gt;mail&lt;/span&gt;.&lt;span class="nv"&gt;from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;duchuanlong@gmail.com&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="nv"&gt;mail&lt;/span&gt;.&lt;span class="nv"&gt;reply_to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;duchuanlong@gmail.com&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="nv"&gt;mail&lt;/span&gt;.&lt;span class="nv"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;subject&lt;/span&gt;
    &lt;span class="nv"&gt;mail&lt;/span&gt;.&lt;span class="nv"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;body&lt;/span&gt;
    &lt;span class="nv"&gt;mail&lt;/span&gt;.&lt;span class="nv"&gt;deliver&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;read_password&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;
    &lt;span class="nv"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;highline/import&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;ask&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;Please enter the password for &amp;quot;firedragon.du@gmail.com&amp;quot;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;{
        &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nv"&gt;q&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="nv"&gt;q&lt;/span&gt;.&lt;span class="nv"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    }
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="smtp"></category><category term="programming"></category><category term="Verizon"></category><category term="PDF"></category><category term="Ruby"></category><category term="email"></category></entry><entry><title>Abuse of Vector in R</title><link href="http://www.legendu.net/en/blog/abuse-vector-r/" rel="alternate"></link><published>2012-05-16T00:00:00-07:00</published><updated>2012-05-16T00:00:00-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2012-05-16:/en/blog/abuse-vector-r/</id><summary type="html">&lt;p&gt;R is a language that is friendly to vector operation, 
so vector is an important data structure in R. 
A single data (of basic types, e.g., numeric or character) is essentially a
vector of length 1. A matrix or an array in R is essentially a vector. 
R make …&lt;/p&gt;</summary><content type="html">&lt;p&gt;R is a language that is friendly to vector operation, 
so vector is an important data structure in R. 
A single data (of basic types, e.g., numeric or character) is essentially a
vector of length 1. A matrix or an array in R is essentially a vector. 
R make extensive use of vectors. A vector in R can either be a column vector or
a row vector depending on how you write the code. This is perhaps OK with most
people though it invites chances to make mistakes. One annoying thing about
vector is that When you extract a row or a column from a
matrix, you get a vector. 
I think this is one place that R abuse vectors. When you extract a sub matrix,
you want it to be a matrix as well most of the time. Even if you do want a
vector, most functions in R coerce a matrix to vector automatically, so return a
matrix instead of a vector doesn't hurt. MATLAB goes to another
extreem on vectors. There is no separate data structre for vector in MATLAB. 
A vector in MATLAB is either a matrix with 1 row or a matrix with 1 column. &lt;/p&gt;
&lt;p&gt;R is famous for its simple and flexible syntax, however, it's too
flexible and as coinsequence that it's slow compared to many other programming 
languages, and it's easy to make tricky mistakes in R. &lt;/p&gt;</content><category term="programming"></category><category term="matrix"></category><category term="data sturcture"></category><category term="data"></category><category term="vector"></category><category term="R"></category></entry><entry><title>Tips for VB/VB.net</title><link href="http://www.legendu.net/en/blog/tips-vb.net/" rel="alternate"></link><published>2011-08-31T00:00:00-07:00</published><updated>2011-08-31T00:00:00-07:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2011-08-31:/en/blog/tips-vb.net/</id><summary type="html">&lt;h2 id="about-string-functions"&gt;About String Functions&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The uniform random variables generated by VB is pretty good.
At least it's acceptable according to the test in R.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;String functions that return a string can be used with a dollar sign at the end, 
which is a faster version of the corresponding function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The function …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h2 id="about-string-functions"&gt;About String Functions&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The uniform random variables generated by VB is pretty good.
At least it's acceptable according to the test in R.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;String functions that return a string can be used with a dollar sign at the end, 
which is a faster version of the corresponding function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The function &lt;code&gt;trim&lt;/code&gt; gets rid of leading and trailing spaces.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The function &lt;code&gt;instr&lt;/code&gt; supports both case sensitive and case insensitive comparisons.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The function &lt;code&gt;split&lt;/code&gt; can split a string into a string array.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="tips"></category><category term="VB/VB.net"></category><category term="programming"></category><category term="string"></category></entry><entry><title>Combination and Permutation Related Functions in R</title><link href="http://www.legendu.net/en/blog/combination-and-permutation-in-r/" rel="alternate"></link><published>2010-11-20T00:00:00-08:00</published><updated>2010-11-20T00:00:00-08:00</updated><author><name>Ben Chuanlong Du</name></author><id>tag:www.legendu.net,2010-11-20:/en/blog/combination-and-permutation-in-r/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;expand.grid&lt;/code&gt; creates a data frame from all possible combinations of supplied vectors or factors. 
For example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="n"&gt;Var1&lt;/span&gt; &lt;span class="n"&gt;Var2&lt;/span&gt; &lt;span class="n"&gt;Var3&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="n"&gt;a&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="o"&gt;+&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;     &lt;span class="n"&gt;b&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="o"&gt;+&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="n"&gt;a&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="o"&gt;+&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="n"&gt;b&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="o"&gt;+&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;     &lt;span class="n"&gt;a&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="o"&gt;+&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;     &lt;span class="n"&gt;b&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="o"&gt;+&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;     &lt;span class="n"&gt;a&lt;/span&gt;    &lt;span class="mi"&gt;1 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;expand.grid&lt;/code&gt; creates a data frame from all possible combinations of supplied vectors or factors. 
For example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="n"&gt;Var1&lt;/span&gt; &lt;span class="n"&gt;Var2&lt;/span&gt; &lt;span class="n"&gt;Var3&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="n"&gt;a&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="o"&gt;+&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;     &lt;span class="n"&gt;b&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="o"&gt;+&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="n"&gt;a&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="o"&gt;+&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="n"&gt;b&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="o"&gt;+&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;     &lt;span class="n"&gt;a&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="o"&gt;+&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;     &lt;span class="n"&gt;b&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="o"&gt;+&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;     &lt;span class="n"&gt;a&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="o"&gt;-&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;     &lt;span class="n"&gt;b&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="o"&gt;-&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;     &lt;span class="n"&gt;a&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="o"&gt;-&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;    &lt;span class="n"&gt;b&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="o"&gt;-&lt;/span&gt;
&lt;span class="mi"&gt;11&lt;/span&gt;    &lt;span class="n"&gt;a&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="o"&gt;-&lt;/span&gt;
&lt;span class="mi"&gt;12&lt;/span&gt;    &lt;span class="n"&gt;b&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="o"&gt;-&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;combn&lt;/code&gt; generates all combinations of &lt;span class="math"&gt;\(n\)&lt;/span&gt; elements taking &lt;span class="math"&gt;\(m\)&lt;/span&gt; at a time.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="R"></category><category term="statisitcs"></category><category term="combination"></category><category term="permutation"></category><category term="programming"></category></entry></feed>